// Package baserow provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package baserow

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"gopkg.in/yaml.v2"
	"io"
	"os"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/labstack/echo/v4"
	"github.com/gin-gonic/gin"
	"github.com/gofiber/fiber/v2"
	"github.com/gorilla/mux"
)
// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
    // create a client with sane default values
    client := Client{
        Server: server,
    }
    // mutate client and add all optional params
    for _, o := range opts {
        if err := o(&client); err != nil {
            return nil, err
        }
    }
    // ensure the server URL always has a trailing slash
    if !strings.HasSuffix(client.Server, "/") {
        client.Server += "/"
    }
    // create httpClient, if not already present
    if client.Client == nil {
        client.Client = &http.Client{}
    }
    return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
// EmailTester request with any body
    EmailTesterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    EmailTester(ctx context.Context, body EmailTesterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    EmailTesterWithFormdataBody(ctx context.Context, body EmailTesterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// FullHealthCheck request
    FullHealthCheck(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminAuditLog request
    AdminAuditLog(ctx context.Context, params *AdminAuditLogParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminAuditLogTypes request
    AdminAuditLogTypes(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExportAuditLog request with any body
    ExportAuditLogWithBody(ctx context.Context, params *ExportAuditLogParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    ExportAuditLog(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    ExportAuditLogWithFormdataBody(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AdminAuditLogUsers request
    AdminAuditLogUsers(ctx context.Context, params *AdminAuditLogUsersParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminAuditLogWorkspaces request
    AdminAuditLogWorkspaces(ctx context.Context, params *AdminAuditLogWorkspacesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListAuthProviders request
    ListAuthProviders(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateAuthProvider request
    CreateAuthProvider(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteAuthProvider request
    DeleteAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetAuthProvider request
    GetAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateAuthProvider request
    UpdateAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminDashboard request
    AdminDashboard(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminListGroups request
    AdminListGroups(ctx context.Context, params *AdminListGroupsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminDeleteGroup request
    AdminDeleteGroup(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminListUsers request
    AdminListUsers(ctx context.Context, params *AdminListUsersParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminImpersonateUser request with any body
    AdminImpersonateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    AdminImpersonateUser(ctx context.Context, body AdminImpersonateUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    AdminImpersonateUserWithFormdataBody(ctx context.Context, body AdminImpersonateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AdminDeleteUser request
    AdminDeleteUser(ctx context.Context, userId int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminEditUser request with any body
    AdminEditUserWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    AdminEditUser(ctx context.Context, userId int, body AdminEditUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    AdminEditUserWithFormdataBody(ctx context.Context, userId int, body AdminEditUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AdminListWorkspaces request
    AdminListWorkspaces(ctx context.Context, params *AdminListWorkspacesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminDeleteWorkspace request
    AdminDeleteWorkspace(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error)

// ListApplicationIntegrations request
    ListApplicationIntegrations(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateApplicationIntegration request with any body
    CreateApplicationIntegrationWithBody(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateApplicationIntegration(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateApplicationIntegrationWithFormdataBody(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListAllApplications request
    ListAllApplications(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupListApplications request
    GroupListApplications(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupCreateApplication request with any body
    GroupCreateApplicationWithBody(ctx context.Context, groupId int, params *GroupCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    GroupCreateApplication(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    GroupCreateApplicationWithFormdataBody(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GroupOrderApplications request with any body
    GroupOrderApplicationsWithBody(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    GroupOrderApplications(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    GroupOrderApplicationsWithFormdataBody(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// WorkspaceListApplications request
    WorkspaceListApplications(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error)

// WorkspaceCreateApplication request with any body
    WorkspaceCreateApplicationWithBody(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    WorkspaceCreateApplication(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    WorkspaceCreateApplicationWithFormdataBody(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// WorkspaceOrderApplications request with any body
    WorkspaceOrderApplicationsWithBody(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    WorkspaceOrderApplications(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    WorkspaceOrderApplicationsWithFormdataBody(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteApplication request
    DeleteApplication(ctx context.Context, applicationId int, params *DeleteApplicationParams, reqEditors... RequestEditorFn) (*http.Response, error)

// WorkspaceGetApplication request
    WorkspaceGetApplication(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateApplication request with any body
    UpdateApplicationWithBody(ctx context.Context, applicationId int, params *UpdateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateApplication(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateApplicationWithFormdataBody(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DuplicateApplicationAsync request
    DuplicateApplicationAsync(ctx context.Context, applicationId int, params *DuplicateApplicationAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListAuthProvidersLoginOptions request
    ListAuthProvidersLoginOptions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExportTable request with any body
    ExportTableWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    ExportTable(ctx context.Context, tableId int, body ExportTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    ExportTableWithFormdataBody(ctx context.Context, tableId int, body ExportTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetExportJob request
    GetExportJob(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableFields request
    ListDatabaseTableFields(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableField request with any body
    CreateDatabaseTableFieldWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableField(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableFieldWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteDatabaseTableField request
    DeleteDatabaseTableField(ctx context.Context, fieldId int, params *DeleteDatabaseTableFieldParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableField request
    GetDatabaseTableField(ctx context.Context, fieldId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableField request with any body
    UpdateDatabaseTableFieldWithBody(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableField(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableFieldWithFormdataBody(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DuplicateTableField request
    DuplicateTableField(ctx context.Context, fieldId int, params *DuplicateTableFieldParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseFieldUniqueRowValues request
    GetDatabaseFieldUniqueRowValues(ctx context.Context, fieldId int, params *GetDatabaseFieldUniqueRowValuesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// TypeFormulaField request with any body
    TypeFormulaFieldWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    TypeFormulaField(ctx context.Context, tableId int, body TypeFormulaFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    TypeFormulaFieldWithFormdataBody(ctx context.Context, tableId int, body TypeFormulaFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTableRowNames request
    ListDatabaseTableRowNames(ctx context.Context, params *ListDatabaseTableRowNamesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableRows request
    ListDatabaseTableRows(ctx context.Context, tableId int, params *ListDatabaseTableRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableRow request with any body
    CreateDatabaseTableRowWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableRow(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableRowWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// BatchDeleteDatabaseTableRows request with any body
    BatchDeleteDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    BatchDeleteDatabaseTableRows(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    BatchDeleteDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// BatchUpdateDatabaseTableRows request with any body
    BatchUpdateDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    BatchUpdateDatabaseTableRows(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    BatchUpdateDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// BatchCreateDatabaseTableRows request with any body
    BatchCreateDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    BatchCreateDatabaseTableRows(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    BatchCreateDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteDatabaseTableRow request
    DeleteDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *DeleteDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableRow request
    GetDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *GetDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableRow request with any body
    UpdateDatabaseTableRowWithBody(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableRowWithFormdataBody(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetAdjacentDatabaseTableRow request
    GetAdjacentDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *GetAdjacentDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error)

// MoveDatabaseTableRow request
    MoveDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *MoveDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTables request
    ListDatabaseTables(ctx context.Context, databaseId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTable request with any body
    CreateDatabaseTableWithBody(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTable(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableWithFormdataBody(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// CreateDatabaseTableAsync request with any body
    CreateDatabaseTableAsyncWithBody(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableAsync(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableAsyncWithFormdataBody(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// OrderDatabaseTables request with any body
    OrderDatabaseTablesWithBody(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    OrderDatabaseTables(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    OrderDatabaseTablesWithFormdataBody(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteDatabaseTable request
    DeleteDatabaseTable(ctx context.Context, tableId int, params *DeleteDatabaseTableParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTable request
    GetDatabaseTable(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTable request with any body
    UpdateDatabaseTableWithBody(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTable(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableWithFormdataBody(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DuplicateDatabaseTableAsync request
    DuplicateDatabaseTableAsync(ctx context.Context, tableId int, params *DuplicateDatabaseTableAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ImportDataDatabaseTableAsync request with any body
    ImportDataDatabaseTableAsyncWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    ImportDataDatabaseTableAsync(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    ImportDataDatabaseTableAsyncWithFormdataBody(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTokens request
    ListDatabaseTokens(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseToken request with any body
    CreateDatabaseTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseToken(ctx context.Context, body CreateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTokenWithFormdataBody(ctx context.Context, body CreateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// CheckDatabaseToken request
    CheckDatabaseToken(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteDatabaseToken request
    DeleteDatabaseToken(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseToken request
    GetDatabaseToken(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseToken request with any body
    UpdateDatabaseTokenWithBody(ctx context.Context, tokenId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseToken(ctx context.Context, tokenId int, body UpdateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTokenWithFormdataBody(ctx context.Context, tokenId int, body UpdateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// PremiumViewAttributesUpdate request with any body
    PremiumViewAttributesUpdateWithBody(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PremiumViewAttributesUpdate(ctx context.Context, viewId int, body PremiumViewAttributesUpdateJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    PremiumViewAttributesUpdateWithFormdataBody(ctx context.Context, viewId int, body PremiumViewAttributesUpdateFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// PublicListDatabaseTableCalendarViewRows request
    PublicListDatabaseTableCalendarViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableCalendarViewRows request
    ListDatabaseTableCalendarViewRows(ctx context.Context, viewId int, params *ListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteDatabaseTableViewDecoration request
    DeleteDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, params *DeleteDatabaseTableViewDecorationParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableViewDecoration request
    GetDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableViewDecoration request with any body
    UpdateDatabaseTableViewDecorationWithBody(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableViewDecorationWithFormdataBody(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteDatabaseTableViewFilter request
    DeleteDatabaseTableViewFilter(ctx context.Context, viewFilterId int, params *DeleteDatabaseTableViewFilterParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableViewFilter request
    GetDatabaseTableViewFilter(ctx context.Context, viewFilterId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableViewFilter request with any body
    UpdateDatabaseTableViewFilterWithBody(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableViewFilter(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableViewFilterWithFormdataBody(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetMetaDatabaseTableFormView request
    GetMetaDatabaseTableFormView(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error)

// SubmitDatabaseTableFormView request with any body
    SubmitDatabaseTableFormViewWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    SubmitDatabaseTableFormView(ctx context.Context, slug string, body SubmitDatabaseTableFormViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    SubmitDatabaseTableFormViewWithFormdataBody(ctx context.Context, slug string, body SubmitDatabaseTableFormViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// UploadFileFormView request
    UploadFileFormView(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error)

// PublicListDatabaseTableGalleryViewRows request
    PublicListDatabaseTableGalleryViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableGalleryViewRows request
    ListDatabaseTableGalleryViewRows(ctx context.Context, viewId int, params *ListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PublicListDatabaseTableGridViewRows request
    PublicListDatabaseTableGridViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableGridViewRows request
    ListDatabaseTableGridViewRows(ctx context.Context, viewId int, params *ListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// FilterDatabaseTableGridViewRows request with any body
    FilterDatabaseTableGridViewRowsWithBody(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    FilterDatabaseTableGridViewRows(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    FilterDatabaseTableGridViewRowsWithFormdataBody(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetDatabaseTableGridViewFieldAggregation request
    GetDatabaseTableGridViewFieldAggregation(ctx context.Context, viewId int, fieldId int, params *GetDatabaseTableGridViewFieldAggregationParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableGridViewFieldAggregations request
    GetDatabaseTableGridViewFieldAggregations(ctx context.Context, viewId int, params *GetDatabaseTableGridViewFieldAggregationsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PublicListDatabaseTableKanbanViewRows request
    PublicListDatabaseTableKanbanViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableKanbanViewRows request
    ListDatabaseTableKanbanViewRows(ctx context.Context, viewId int, params *ListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteDatabaseTableViewSort request
    DeleteDatabaseTableViewSort(ctx context.Context, viewSortId int, params *DeleteDatabaseTableViewSortParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableViewSort request
    GetDatabaseTableViewSort(ctx context.Context, viewSortId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableViewSort request with any body
    UpdateDatabaseTableViewSortWithBody(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableViewSort(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableViewSortWithFormdataBody(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTableViews request
    ListDatabaseTableViews(ctx context.Context, tableId int, params *ListDatabaseTableViewsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableView request with any body
    CreateDatabaseTableViewWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableView(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableViewWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// OrderDatabaseTableViews request with any body
    OrderDatabaseTableViewsWithBody(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    OrderDatabaseTableViews(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    OrderDatabaseTableViewsWithFormdataBody(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DatabaseTablePublicViewLinkRowFieldLookup request
    DatabaseTablePublicViewLinkRowFieldLookup(ctx context.Context, slug string, fieldId int, reqEditors... RequestEditorFn) (*http.Response, error)

// PublicViewTokenAuth request with any body
    PublicViewTokenAuthWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PublicViewTokenAuth(ctx context.Context, slug string, body PublicViewTokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    PublicViewTokenAuthWithFormdataBody(ctx context.Context, slug string, body PublicViewTokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetPublicViewInfo request
    GetPublicViewInfo(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteDatabaseTableView request
    DeleteDatabaseTableView(ctx context.Context, viewId int, params *DeleteDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableView request
    GetDatabaseTableView(ctx context.Context, viewId int, params *GetDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableView request with any body
    UpdateDatabaseTableViewWithBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableView(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableViewWithFormdataBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTableViewDecorations request
    ListDatabaseTableViewDecorations(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableViewDecoration request with any body
    CreateDatabaseTableViewDecorationWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableViewDecoration(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableViewDecorationWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DuplicateDatabaseTableView request
    DuplicateDatabaseTableView(ctx context.Context, viewId int, params *DuplicateDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableViewFieldOptions request
    GetDatabaseTableViewFieldOptions(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableViewFieldOptions request with any body
    UpdateDatabaseTableViewFieldOptionsWithBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableViewFieldOptions(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableViewFieldOptionsWithFormdataBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTableViewFilters request
    ListDatabaseTableViewFilters(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableViewFilter request with any body
    CreateDatabaseTableViewFilterWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableViewFilter(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableViewFilterWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// RotateDatabaseViewSlug request
    RotateDatabaseViewSlug(ctx context.Context, viewId int, params *RotateDatabaseViewSlugParams, reqEditors... RequestEditorFn) (*http.Response, error)

// ListDatabaseTableViewSortings request
    ListDatabaseTableViewSortings(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableViewSort request with any body
    CreateDatabaseTableViewSortWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableViewSort(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableViewSortWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListDatabaseTableWebhooks request
    ListDatabaseTableWebhooks(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateDatabaseTableWebhook request with any body
    CreateDatabaseTableWebhookWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateDatabaseTableWebhook(ctx context.Context, tableId int, body CreateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateDatabaseTableWebhookWithFormdataBody(ctx context.Context, tableId int, body CreateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// TestCallDatabaseTableWebhook request with any body
    TestCallDatabaseTableWebhookWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    TestCallDatabaseTableWebhook(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    TestCallDatabaseTableWebhookWithFormdataBody(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteDatabaseTableWebhook request
    DeleteDatabaseTableWebhook(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDatabaseTableWebhook request
    GetDatabaseTableWebhook(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateDatabaseTableWebhook request with any body
    UpdateDatabaseTableWebhookWithBody(ctx context.Context, webhookId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateDatabaseTableWebhook(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateDatabaseTableWebhookWithFormdataBody(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListGroups request
    ListGroups(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateGroup request with any body
    CreateGroupWithBody(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateGroup(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateGroupWithFormdataBody(ctx context.Context, params *CreateGroupParams, body CreateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListGroupInvitations request
    ListGroupInvitations(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateGroupInvitation request with any body
    CreateGroupInvitationWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateGroupInvitation(ctx context.Context, groupId int, body CreateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateGroupInvitationWithFormdataBody(ctx context.Context, groupId int, body CreateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetGroupInvitationByToken request
    GetGroupInvitationByToken(ctx context.Context, token string, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteGroupInvitation request
    DeleteGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetGroupInvitation request
    GetGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateGroupInvitation request with any body
    UpdateGroupInvitationWithBody(ctx context.Context, groupInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateGroupInvitation(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateGroupInvitationWithFormdataBody(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AcceptGroupInvitation request
    AcceptGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// RejectGroupInvitation request
    RejectGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// OrderGroups request with any body
    OrderGroupsWithBody(ctx context.Context, params *OrderGroupsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    OrderGroups(ctx context.Context, params *OrderGroupsParams, body OrderGroupsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    OrderGroupsWithFormdataBody(ctx context.Context, params *OrderGroupsParams, body OrderGroupsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListGroupUsers request
    ListGroupUsers(ctx context.Context, groupId int, params *ListGroupUsersParams, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteGroupUser request
    DeleteGroupUser(ctx context.Context, groupUserId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateGroupUser request with any body
    UpdateGroupUserWithBody(ctx context.Context, groupUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateGroupUser(ctx context.Context, groupUserId int, body UpdateGroupUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateGroupUserWithFormdataBody(ctx context.Context, groupUserId int, body UpdateGroupUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteGroup request
    DeleteGroup(ctx context.Context, groupId int, params *DeleteGroupParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateGroup request with any body
    UpdateGroupWithBody(ctx context.Context, groupId int, params *UpdateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateGroup(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateGroupWithFormdataBody(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// LeaveGroup request
    LeaveGroup(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupPermissions request
    GroupPermissions(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteApplicationIntegration request
    DeleteApplicationIntegration(ctx context.Context, integrationId int, params *DeleteApplicationIntegrationParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateApplicationIntegration request with any body
    UpdateApplicationIntegrationWithBody(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateApplicationIntegration(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateApplicationIntegrationWithFormdataBody(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// MoveApplicationIntegration request with any body
    MoveApplicationIntegrationWithBody(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    MoveApplicationIntegration(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    MoveApplicationIntegrationWithFormdataBody(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListJob request
    ListJob(ctx context.Context, params *ListJobParams, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateJob request with any body
    CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateJobWithFormdataBody(ctx context.Context, body CreateJobFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetJob request
    GetJob(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminLicenses request
    AdminLicenses(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminRegisterLicense request with any body
    AdminRegisterLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    AdminRegisterLicense(ctx context.Context, body AdminRegisterLicenseJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    AdminRegisterLicenseWithFormdataBody(ctx context.Context, body AdminRegisterLicenseFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AdminRemoveLicense request
    AdminRemoveLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminGetLicense request
    AdminGetLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminLicenseCheck request
    AdminLicenseCheck(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminFillRemainingSeatsOfLicense request
    AdminFillRemainingSeatsOfLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminLicenseLookupUsers request
    AdminLicenseLookupUsers(ctx context.Context, id int, params *AdminLicenseLookupUsersParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminRemoveAllUsersFromLicense request
    AdminRemoveAllUsersFromLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminRemoveUserFromLicense request
    AdminRemoveUserFromLicense(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*http.Response, error)

// AdminAddUserToLicense request
    AdminAddUserToLicense(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupListRoleAssignments request
    GroupListRoleAssignments(ctx context.Context, groupId int, params *GroupListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupAssignRole request with any body
    GroupAssignRoleWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    GroupAssignRole(ctx context.Context, groupId int, body GroupAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    GroupAssignRoleWithFormdataBody(ctx context.Context, groupId int, body GroupAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GroupBatchAssignRole request with any body
    GroupBatchAssignRoleWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    GroupBatchAssignRole(ctx context.Context, groupId int, body GroupBatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    GroupBatchAssignRoleWithFormdataBody(ctx context.Context, groupId int, body GroupBatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListRoleAssignments request
    ListRoleAssignments(ctx context.Context, workspaceId int, params *ListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AssignRole request with any body
    AssignRoleWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    AssignRole(ctx context.Context, workspaceId int, body AssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    AssignRoleWithFormdataBody(ctx context.Context, workspaceId int, body AssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// BatchAssignRole request with any body
    BatchAssignRoleWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    BatchAssignRole(ctx context.Context, workspaceId int, body BatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    BatchAssignRoleWithFormdataBody(ctx context.Context, workspaceId int, body BatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteRowComment request
    DeleteRowComment(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateRowComment request
    UpdateRowComment(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetRowComments request
    GetRowComments(ctx context.Context, tableId int, rowId int, params *GetRowCommentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateRowComment request with any body
    CreateRowCommentWithBody(ctx context.Context, tableId int, rowId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateRowComment(ctx context.Context, tableId int, rowId int, body CreateRowCommentJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateRowCommentWithFormdataBody(ctx context.Context, tableId int, rowId int, body CreateRowCommentFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetSettings request
    GetSettings(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetInstanceId request
    GetInstanceId(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateSettings request with any body
    UpdateSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateSettings(ctx context.Context, body UpdateSettingsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateSettingsWithFormdataBody(ctx context.Context, body UpdateSettingsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListSnapshots request
    ListSnapshots(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateSnapshot request with any body
    CreateSnapshotWithBody(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateSnapshot(ctx context.Context, applicationId int, body CreateSnapshotJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateSnapshotWithFormdataBody(ctx context.Context, applicationId int, body CreateSnapshotFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteSnapshot request
    DeleteSnapshot(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*http.Response, error)

// RestoreSnapshot request
    RestoreSnapshot(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*http.Response, error)

// OauthProviderLoginCallback request
    OauthProviderLoginCallback(ctx context.Context, providerId int, params *OauthProviderLoginCallbackParams, reqEditors... RequestEditorFn) (*http.Response, error)

// OauthProviderLoginRedirect request
    OauthProviderLoginRedirect(ctx context.Context, providerId int, params *OauthProviderLoginRedirectParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AuthProviderSamlAcsUrl request with any body
    AuthProviderSamlAcsUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    AuthProviderSamlAcsUrl(ctx context.Context, body AuthProviderSamlAcsUrlJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    AuthProviderSamlAcsUrlWithFormdataBody(ctx context.Context, body AuthProviderSamlAcsUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AuthProviderLoginUrl request
    AuthProviderLoginUrl(ctx context.Context, params *AuthProviderLoginUrlParams, reqEditors... RequestEditorFn) (*http.Response, error)

// AuthProviderSamlSpLogin request
    AuthProviderSamlSpLogin(ctx context.Context, params *AuthProviderSamlSpLoginParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupListTeams request
    GroupListTeams(ctx context.Context, groupId int, params *GroupListTeamsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupCreateTeam request with any body
    GroupCreateTeamWithBody(ctx context.Context, groupId string, params *GroupCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    GroupCreateTeam(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    GroupCreateTeamWithFormdataBody(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// WorkspaceListTeams request
    WorkspaceListTeams(ctx context.Context, workspaceId int, params *WorkspaceListTeamsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// WorkspaceCreateTeam request with any body
    WorkspaceCreateTeamWithBody(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    WorkspaceCreateTeam(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    WorkspaceCreateTeamWithFormdataBody(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteTeam request
    DeleteTeam(ctx context.Context, teamId int, params *DeleteTeamParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTeam request
    GetTeam(ctx context.Context, teamId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateTeam request with any body
    UpdateTeamWithBody(ctx context.Context, teamId string, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateTeam(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateTeamWithFormdataBody(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListTeamSubjects request
    ListTeamSubjects(ctx context.Context, teamId string, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateSubject request with any body
    CreateSubjectWithBody(ctx context.Context, teamId string, params *CreateSubjectParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateSubject(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateSubjectWithFormdataBody(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteSubject request
    DeleteSubject(ctx context.Context, teamId int, subjectId int, params *DeleteSubjectParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSubject request
    GetSubject(ctx context.Context, teamId string, subjectId int, reqEditors... RequestEditorFn) (*http.Response, error)

// ListTemplates request
    ListTemplates(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupInstallTemplate request
    GroupInstallTemplate(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupInstallTemplateAsync request
    GroupInstallTemplateAsync(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error)

// InstallTemplate request
    InstallTemplate(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateParams, reqEditors... RequestEditorFn) (*http.Response, error)

// InstallTemplateAsync request
    InstallTemplateAsync(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTrashStructure request
    GetTrashStructure(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupEmptyContents request
    GroupEmptyContents(ctx context.Context, groupId int, params *GroupEmptyContentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GroupGetContents request
    GroupGetContents(ctx context.Context, groupId int, params *GroupGetContentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// Restore request with any body
    RestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    Restore(ctx context.Context, body RestoreJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    RestoreWithFormdataBody(ctx context.Context, body RestoreFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// WorkspaceEmptyContents request
    WorkspaceEmptyContents(ctx context.Context, workspaceId int, params *WorkspaceEmptyContentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// WorkspaceGetContents request
    WorkspaceGetContents(ctx context.Context, workspaceId int, params *WorkspaceGetContentsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UploadFile request
    UploadFile(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// UploadViaUrl request with any body
    UploadViaUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UploadViaUrl(ctx context.Context, body UploadViaUrlJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UploadViaUrlWithFormdataBody(ctx context.Context, body UploadViaUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// CreateUser request with any body
    CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateUserWithFormdataBody(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// UpdateAccount request with any body
    UpdateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateAccount(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateAccountWithFormdataBody(ctx context.Context, body UpdateAccountFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ChangePassword request with any body
    ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    ChangePasswordWithFormdataBody(ctx context.Context, body ChangePasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// Dashboard request
    Dashboard(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// Redo request with any body
    RedoWithBody(ctx context.Context, params *RedoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    Redo(ctx context.Context, params *RedoParams, body RedoJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    RedoWithFormdataBody(ctx context.Context, params *RedoParams, body RedoFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ResetPassword request with any body
    ResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    ResetPassword(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    ResetPasswordWithFormdataBody(ctx context.Context, body ResetPasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ScheduleAccountDeletion request
    ScheduleAccountDeletion(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// SendPasswordResetEmail request with any body
    SendPasswordResetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    SendPasswordResetEmail(ctx context.Context, body SendPasswordResetEmailJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    SendPasswordResetEmailWithFormdataBody(ctx context.Context, body SendPasswordResetEmailFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// TokenAuth request with any body
    TokenAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    TokenAuth(ctx context.Context, body TokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    TokenAuthWithFormdataBody(ctx context.Context, body TokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// TokenRefresh request with any body
    TokenRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    TokenRefresh(ctx context.Context, body TokenRefreshJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    TokenRefreshWithFormdataBody(ctx context.Context, body TokenRefreshFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// TokenVerify request with any body
    TokenVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    TokenVerify(ctx context.Context, body TokenVerifyJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    TokenVerifyWithFormdataBody(ctx context.Context, body TokenVerifyFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// Undo request with any body
    UndoWithBody(ctx context.Context, params *UndoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    Undo(ctx context.Context, params *UndoParams, body UndoJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UndoWithFormdataBody(ctx context.Context, params *UndoParams, body UndoFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListWorkspaces request
    ListWorkspaces(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateWorkspace request with any body
    CreateWorkspaceWithBody(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateWorkspace(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateWorkspaceWithFormdataBody(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// GetWorkspaceInvitationByToken request
    GetWorkspaceInvitationByToken(ctx context.Context, token string, reqEditors... RequestEditorFn) (*http.Response, error)

// ListWorkspaceInvitations request
    ListWorkspaceInvitations(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CreateWorkspaceInvitation request with any body
    CreateWorkspaceInvitationWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    CreateWorkspaceInvitation(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    CreateWorkspaceInvitationWithFormdataBody(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteWorkspaceInvitation request
    DeleteWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetWorkspaceInvitation request
    GetWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateWorkspaceInvitation request with any body
    UpdateWorkspaceInvitationWithBody(ctx context.Context, workspaceInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateWorkspaceInvitationWithFormdataBody(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// AcceptWorkspaceInvitation request
    AcceptWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// RejectWorkspaceInvitation request
    RejectWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error)

// OrderWorkspaces request with any body
    OrderWorkspacesWithBody(ctx context.Context, params *OrderWorkspacesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    OrderWorkspaces(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    OrderWorkspacesWithFormdataBody(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// ListWorkspaceUsers request
    ListWorkspaceUsers(ctx context.Context, workspaceId int, params *ListWorkspaceUsersParams, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteWorkspaceUser request
    DeleteWorkspaceUser(ctx context.Context, workspaceUserId int, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateWorkspaceUser request with any body
    UpdateWorkspaceUserWithBody(ctx context.Context, workspaceUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateWorkspaceUser(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateWorkspaceUserWithFormdataBody(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// DeleteWorkspace request
    DeleteWorkspace(ctx context.Context, workspaceId int, params *DeleteWorkspaceParams, reqEditors... RequestEditorFn) (*http.Response, error)

// UpdateWorkspace request with any body
    UpdateWorkspaceWithBody(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    UpdateWorkspace(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    UpdateWorkspaceWithFormdataBody(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
    
// LeaveWorkspace request
    LeaveWorkspace(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error)

// WorkspacePermissions request
    WorkspacePermissions(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error)

// CmsApiPagesRetrieve request
    CmsApiPagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainDocumentsRetrieve request
    ExcludeEachCmsApiMainDocumentsRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainDocumentsFindRetrieve request
    ExcludeEachCmsApiMainDocumentsFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainDocumentsRetrieve2 request
    ExcludeEachCmsApiMainDocumentsRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainImagesRetrieve request
    ExcludeEachCmsApiMainImagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainImagesFindRetrieve request
    ExcludeEachCmsApiMainImagesFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainImagesRetrieve2 request
    ExcludeEachCmsApiMainImagesRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainPagesRetrieve request
    ExcludeEachCmsApiMainPagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainPagesFindRetrieve request
    ExcludeEachCmsApiMainPagesFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainPagesRetrieve2 request
    ExcludeEachCmsApiMainPagesRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error)

// ExcludeEachCmsApiMainPagesActionCreate request
    ExcludeEachCmsApiMainPagesActionCreate(ctx context.Context, id int, actionName string, reqEditors... RequestEditorFn) (*http.Response, error)


}



func (c *Client) EmailTesterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewEmailTesterRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) EmailTester(ctx context.Context, body EmailTesterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewEmailTesterRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) EmailTesterWithFormdataBody(ctx context.Context, body EmailTesterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewEmailTesterRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) FullHealthCheck(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewFullHealthCheckRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminAuditLog(ctx context.Context, params *AdminAuditLogParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminAuditLogRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminAuditLogTypes(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminAuditLogTypesRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportAuditLogWithBody(ctx context.Context, params *ExportAuditLogParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportAuditLogRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportAuditLog(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportAuditLogRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportAuditLogWithFormdataBody(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportAuditLogRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AdminAuditLogUsers(ctx context.Context, params *AdminAuditLogUsersParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminAuditLogUsersRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminAuditLogWorkspaces(ctx context.Context, params *AdminAuditLogWorkspacesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminAuditLogWorkspacesRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListAuthProviders(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListAuthProvidersRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateAuthProvider(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateAuthProviderRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteAuthProviderRequest(c.Server, authProviderId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetAuthProviderRequest(c.Server, authProviderId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateAuthProvider(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateAuthProviderRequest(c.Server, authProviderId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminDashboard(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminDashboardRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminListGroups(ctx context.Context, params *AdminListGroupsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminListGroupsRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminDeleteGroup(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminDeleteGroupRequest(c.Server, groupId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminListUsers(ctx context.Context, params *AdminListUsersParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminListUsersRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminImpersonateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminImpersonateUserRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminImpersonateUser(ctx context.Context, body AdminImpersonateUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminImpersonateUserRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminImpersonateUserWithFormdataBody(ctx context.Context, body AdminImpersonateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminImpersonateUserRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AdminDeleteUser(ctx context.Context, userId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminDeleteUserRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminEditUserWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminEditUserRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminEditUser(ctx context.Context, userId int, body AdminEditUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminEditUserRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminEditUserWithFormdataBody(ctx context.Context, userId int, body AdminEditUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminEditUserRequestWithFormdataBody(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AdminListWorkspaces(ctx context.Context, params *AdminListWorkspacesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminListWorkspacesRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminDeleteWorkspace(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminDeleteWorkspaceRequest(c.Server, workspaceId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListApplicationIntegrations(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListApplicationIntegrationsRequest(c.Server, applicationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateApplicationIntegrationWithBody(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateApplicationIntegrationRequestWithBody(c.Server, applicationId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateApplicationIntegration(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateApplicationIntegrationRequest(c.Server, applicationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateApplicationIntegrationWithFormdataBody(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateApplicationIntegrationRequestWithFormdataBody(c.Server, applicationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListAllApplications(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListAllApplicationsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupListApplications(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupListApplicationsRequest(c.Server, groupId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateApplicationWithBody(ctx context.Context, groupId int, params *GroupCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateApplicationRequestWithBody(c.Server, groupId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateApplication(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateApplicationRequest(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateApplicationWithFormdataBody(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateApplicationRequestWithFormdataBody(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GroupOrderApplicationsWithBody(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupOrderApplicationsRequestWithBody(c.Server, groupId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupOrderApplications(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupOrderApplicationsRequest(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupOrderApplicationsWithFormdataBody(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupOrderApplicationsRequestWithFormdataBody(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) WorkspaceListApplications(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceListApplicationsRequest(c.Server, workspaceId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateApplicationWithBody(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateApplicationRequestWithBody(c.Server, workspaceId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateApplication(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateApplicationRequest(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateApplicationWithFormdataBody(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateApplicationRequestWithFormdataBody(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) WorkspaceOrderApplicationsWithBody(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceOrderApplicationsRequestWithBody(c.Server, workspaceId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceOrderApplications(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceOrderApplicationsRequest(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceOrderApplicationsWithFormdataBody(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceOrderApplicationsRequestWithFormdataBody(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteApplication(ctx context.Context, applicationId int, params *DeleteApplicationParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteApplicationRequest(c.Server, applicationId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceGetApplication(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceGetApplicationRequest(c.Server, applicationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplicationWithBody(ctx context.Context, applicationId int, params *UpdateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationRequestWithBody(c.Server, applicationId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplication(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationRequest(c.Server, applicationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplicationWithFormdataBody(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationRequestWithFormdataBody(c.Server, applicationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DuplicateApplicationAsync(ctx context.Context, applicationId int, params *DuplicateApplicationAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDuplicateApplicationAsyncRequest(c.Server, applicationId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListAuthProvidersLoginOptions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListAuthProvidersLoginOptionsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportTableWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportTableRequestWithBody(c.Server, tableId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportTable(ctx context.Context, tableId int, body ExportTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportTableRequest(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExportTableWithFormdataBody(ctx context.Context, tableId int, body ExportTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExportTableRequestWithFormdataBody(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetExportJob(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetExportJobRequest(c.Server, jobId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableFields(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableFieldsRequest(c.Server, tableId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableFieldWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableFieldRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableField(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableFieldRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableFieldWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableFieldRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteDatabaseTableField(ctx context.Context, fieldId int, params *DeleteDatabaseTableFieldParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableFieldRequest(c.Server, fieldId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableField(ctx context.Context, fieldId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableFieldRequest(c.Server, fieldId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableFieldWithBody(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableFieldRequestWithBody(c.Server, fieldId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableField(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableFieldRequest(c.Server, fieldId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableFieldWithFormdataBody(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableFieldRequestWithFormdataBody(c.Server, fieldId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DuplicateTableField(ctx context.Context, fieldId int, params *DuplicateTableFieldParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDuplicateTableFieldRequest(c.Server, fieldId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseFieldUniqueRowValues(ctx context.Context, fieldId int, params *GetDatabaseFieldUniqueRowValuesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseFieldUniqueRowValuesRequest(c.Server, fieldId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TypeFormulaFieldWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTypeFormulaFieldRequestWithBody(c.Server, tableId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TypeFormulaField(ctx context.Context, tableId int, body TypeFormulaFieldJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTypeFormulaFieldRequest(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TypeFormulaFieldWithFormdataBody(ctx context.Context, tableId int, body TypeFormulaFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTypeFormulaFieldRequestWithFormdataBody(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTableRowNames(ctx context.Context, params *ListDatabaseTableRowNamesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableRowNamesRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableRows(ctx context.Context, tableId int, params *ListDatabaseTableRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableRowsRequest(c.Server, tableId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableRowWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRowRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableRow(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRowRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableRowWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRowRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) BatchDeleteDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchDeleteDatabaseTableRowsRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchDeleteDatabaseTableRows(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchDeleteDatabaseTableRowsRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchDeleteDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchDeleteDatabaseTableRowsRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) BatchUpdateDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchUpdateDatabaseTableRowsRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchUpdateDatabaseTableRows(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchUpdateDatabaseTableRowsRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchUpdateDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchUpdateDatabaseTableRowsRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) BatchCreateDatabaseTableRowsWithBody(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchCreateDatabaseTableRowsRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchCreateDatabaseTableRows(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchCreateDatabaseTableRowsRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchCreateDatabaseTableRowsWithFormdataBody(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchCreateDatabaseTableRowsRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *DeleteDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableRowRequest(c.Server, tableId, rowId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *GetDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableRowRequest(c.Server, tableId, rowId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableRowWithBody(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRowRequestWithBody(c.Server, tableId, rowId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRowRequest(c.Server, tableId, rowId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableRowWithFormdataBody(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRowRequestWithFormdataBody(c.Server, tableId, rowId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetAdjacentDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *GetAdjacentDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetAdjacentDatabaseTableRowRequest(c.Server, tableId, rowId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) MoveDatabaseTableRow(ctx context.Context, tableId int, rowId int, params *MoveDatabaseTableRowParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewMoveDatabaseTableRowRequest(c.Server, tableId, rowId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTables(ctx context.Context, databaseId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTablesRequest(c.Server, databaseId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableWithBody(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRequestWithBody(c.Server, databaseId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTable(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRequest(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableWithFormdataBody(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableRequestWithFormdataBody(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) CreateDatabaseTableAsyncWithBody(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableAsyncRequestWithBody(c.Server, databaseId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableAsync(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableAsyncRequest(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableAsyncWithFormdataBody(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableAsyncRequestWithFormdataBody(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) OrderDatabaseTablesWithBody(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTablesRequestWithBody(c.Server, databaseId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderDatabaseTables(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTablesRequest(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderDatabaseTablesWithFormdataBody(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTablesRequestWithFormdataBody(c.Server, databaseId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteDatabaseTable(ctx context.Context, tableId int, params *DeleteDatabaseTableParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableRequest(c.Server, tableId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTable(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableRequest(c.Server, tableId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableWithBody(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTable(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableWithFormdataBody(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DuplicateDatabaseTableAsync(ctx context.Context, tableId int, params *DuplicateDatabaseTableAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDuplicateDatabaseTableAsyncRequest(c.Server, tableId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ImportDataDatabaseTableAsyncWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewImportDataDatabaseTableAsyncRequestWithBody(c.Server, tableId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ImportDataDatabaseTableAsync(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewImportDataDatabaseTableAsyncRequest(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ImportDataDatabaseTableAsyncWithFormdataBody(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewImportDataDatabaseTableAsyncRequestWithFormdataBody(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTokens(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTokensRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTokenRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseToken(ctx context.Context, body CreateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTokenRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTokenWithFormdataBody(ctx context.Context, body CreateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTokenRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) CheckDatabaseToken(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCheckDatabaseTokenRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteDatabaseToken(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTokenRequest(c.Server, tokenId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseToken(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTokenRequest(c.Server, tokenId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTokenWithBody(ctx context.Context, tokenId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTokenRequestWithBody(c.Server, tokenId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseToken(ctx context.Context, tokenId int, body UpdateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTokenRequest(c.Server, tokenId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTokenWithFormdataBody(ctx context.Context, tokenId int, body UpdateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTokenRequestWithFormdataBody(c.Server, tokenId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) PremiumViewAttributesUpdateWithBody(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPremiumViewAttributesUpdateRequestWithBody(c.Server, viewId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PremiumViewAttributesUpdate(ctx context.Context, viewId int, body PremiumViewAttributesUpdateJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPremiumViewAttributesUpdateRequest(c.Server, viewId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PremiumViewAttributesUpdateWithFormdataBody(ctx context.Context, viewId int, body PremiumViewAttributesUpdateFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPremiumViewAttributesUpdateRequestWithFormdataBody(c.Server, viewId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) PublicListDatabaseTableCalendarViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicListDatabaseTableCalendarViewRowsRequest(c.Server, slug, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableCalendarViewRows(ctx context.Context, viewId int, params *ListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableCalendarViewRowsRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, params *DeleteDatabaseTableViewDecorationParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableViewDecorationRequest(c.Server, viewDecorationId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableViewDecorationRequest(c.Server, viewDecorationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewDecorationWithBody(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewDecorationRequestWithBody(c.Server, viewDecorationId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewDecoration(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewDecorationRequest(c.Server, viewDecorationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewDecorationWithFormdataBody(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewDecorationRequestWithFormdataBody(c.Server, viewDecorationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteDatabaseTableViewFilter(ctx context.Context, viewFilterId int, params *DeleteDatabaseTableViewFilterParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableViewFilterRequest(c.Server, viewFilterId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableViewFilter(ctx context.Context, viewFilterId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableViewFilterRequest(c.Server, viewFilterId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFilterWithBody(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFilterRequestWithBody(c.Server, viewFilterId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFilter(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFilterRequest(c.Server, viewFilterId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFilterWithFormdataBody(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFilterRequestWithFormdataBody(c.Server, viewFilterId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetMetaDatabaseTableFormView(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMetaDatabaseTableFormViewRequest(c.Server, slug)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SubmitDatabaseTableFormViewWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSubmitDatabaseTableFormViewRequestWithBody(c.Server, slug, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SubmitDatabaseTableFormView(ctx context.Context, slug string, body SubmitDatabaseTableFormViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSubmitDatabaseTableFormViewRequest(c.Server, slug, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SubmitDatabaseTableFormViewWithFormdataBody(ctx context.Context, slug string, body SubmitDatabaseTableFormViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSubmitDatabaseTableFormViewRequestWithFormdataBody(c.Server, slug, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) UploadFileFormView(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUploadFileFormViewRequest(c.Server, slug)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicListDatabaseTableGalleryViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicListDatabaseTableGalleryViewRowsRequest(c.Server, slug, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableGalleryViewRows(ctx context.Context, viewId int, params *ListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableGalleryViewRowsRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicListDatabaseTableGridViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicListDatabaseTableGridViewRowsRequest(c.Server, slug, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableGridViewRows(ctx context.Context, viewId int, params *ListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableGridViewRowsRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) FilterDatabaseTableGridViewRowsWithBody(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewFilterDatabaseTableGridViewRowsRequestWithBody(c.Server, viewId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) FilterDatabaseTableGridViewRows(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewFilterDatabaseTableGridViewRowsRequest(c.Server, viewId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) FilterDatabaseTableGridViewRowsWithFormdataBody(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewFilterDatabaseTableGridViewRowsRequestWithFormdataBody(c.Server, viewId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetDatabaseTableGridViewFieldAggregation(ctx context.Context, viewId int, fieldId int, params *GetDatabaseTableGridViewFieldAggregationParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableGridViewFieldAggregationRequest(c.Server, viewId, fieldId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableGridViewFieldAggregations(ctx context.Context, viewId int, params *GetDatabaseTableGridViewFieldAggregationsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableGridViewFieldAggregationsRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicListDatabaseTableKanbanViewRows(ctx context.Context, slug string, params *PublicListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicListDatabaseTableKanbanViewRowsRequest(c.Server, slug, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableKanbanViewRows(ctx context.Context, viewId int, params *ListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableKanbanViewRowsRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteDatabaseTableViewSort(ctx context.Context, viewSortId int, params *DeleteDatabaseTableViewSortParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableViewSortRequest(c.Server, viewSortId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableViewSort(ctx context.Context, viewSortId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableViewSortRequest(c.Server, viewSortId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewSortWithBody(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewSortRequestWithBody(c.Server, viewSortId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewSort(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewSortRequest(c.Server, viewSortId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewSortWithFormdataBody(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewSortRequestWithFormdataBody(c.Server, viewSortId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTableViews(ctx context.Context, tableId int, params *ListDatabaseTableViewsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableViewsRequest(c.Server, tableId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewWithBody(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableView(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewWithFormdataBody(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) OrderDatabaseTableViewsWithBody(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTableViewsRequestWithBody(c.Server, tableId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderDatabaseTableViews(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTableViewsRequest(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderDatabaseTableViewsWithFormdataBody(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderDatabaseTableViewsRequestWithFormdataBody(c.Server, tableId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DatabaseTablePublicViewLinkRowFieldLookup(ctx context.Context, slug string, fieldId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDatabaseTablePublicViewLinkRowFieldLookupRequest(c.Server, slug, fieldId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicViewTokenAuthWithBody(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicViewTokenAuthRequestWithBody(c.Server, slug, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicViewTokenAuth(ctx context.Context, slug string, body PublicViewTokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicViewTokenAuthRequest(c.Server, slug, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PublicViewTokenAuthWithFormdataBody(ctx context.Context, slug string, body PublicViewTokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPublicViewTokenAuthRequestWithFormdataBody(c.Server, slug, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetPublicViewInfo(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetPublicViewInfoRequest(c.Server, slug)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteDatabaseTableView(ctx context.Context, viewId int, params *DeleteDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableViewRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableView(ctx context.Context, viewId int, params *GetDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableViewRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewWithBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewRequestWithBody(c.Server, viewId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableView(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewRequest(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewWithFormdataBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewRequestWithFormdataBody(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTableViewDecorations(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableViewDecorationsRequest(c.Server, viewId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewDecorationWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewDecorationRequestWithBody(c.Server, viewId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewDecoration(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewDecorationRequest(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewDecorationWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewDecorationRequestWithFormdataBody(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DuplicateDatabaseTableView(ctx context.Context, viewId int, params *DuplicateDatabaseTableViewParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDuplicateDatabaseTableViewRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableViewFieldOptions(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableViewFieldOptionsRequest(c.Server, viewId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFieldOptionsWithBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFieldOptionsRequestWithBody(c.Server, viewId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFieldOptions(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFieldOptionsRequest(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableViewFieldOptionsWithFormdataBody(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableViewFieldOptionsRequestWithFormdataBody(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTableViewFilters(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableViewFiltersRequest(c.Server, viewId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewFilterWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewFilterRequestWithBody(c.Server, viewId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewFilter(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewFilterRequest(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewFilterWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewFilterRequestWithFormdataBody(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) RotateDatabaseViewSlug(ctx context.Context, viewId int, params *RotateDatabaseViewSlugParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRotateDatabaseViewSlugRequest(c.Server, viewId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListDatabaseTableViewSortings(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableViewSortingsRequest(c.Server, viewId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewSortWithBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewSortRequestWithBody(c.Server, viewId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewSort(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewSortRequest(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableViewSortWithFormdataBody(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableViewSortRequestWithFormdataBody(c.Server, viewId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListDatabaseTableWebhooks(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListDatabaseTableWebhooksRequest(c.Server, tableId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableWebhookWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableWebhookRequestWithBody(c.Server, tableId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableWebhook(ctx context.Context, tableId int, body CreateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableWebhookRequest(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateDatabaseTableWebhookWithFormdataBody(ctx context.Context, tableId int, body CreateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateDatabaseTableWebhookRequestWithFormdataBody(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) TestCallDatabaseTableWebhookWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTestCallDatabaseTableWebhookRequestWithBody(c.Server, tableId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TestCallDatabaseTableWebhook(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTestCallDatabaseTableWebhookRequest(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TestCallDatabaseTableWebhookWithFormdataBody(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTestCallDatabaseTableWebhookRequestWithFormdataBody(c.Server, tableId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteDatabaseTableWebhook(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteDatabaseTableWebhookRequest(c.Server, webhookId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDatabaseTableWebhook(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDatabaseTableWebhookRequest(c.Server, webhookId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableWebhookWithBody(ctx context.Context, webhookId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableWebhookRequestWithBody(c.Server, webhookId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableWebhook(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableWebhookRequest(c.Server, webhookId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateDatabaseTableWebhookWithFormdataBody(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateDatabaseTableWebhookRequestWithFormdataBody(c.Server, webhookId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListGroups(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListGroupsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroupWithBody(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroup(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroupWithFormdataBody(ctx context.Context, params *CreateGroupParams, body CreateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListGroupInvitations(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListGroupInvitationsRequest(c.Server, groupId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroupInvitationWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupInvitationRequestWithBody(c.Server, groupId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroupInvitation(ctx context.Context, groupId int, body CreateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupInvitationRequest(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateGroupInvitationWithFormdataBody(ctx context.Context, groupId int, body CreateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateGroupInvitationRequestWithFormdataBody(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetGroupInvitationByToken(ctx context.Context, token string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetGroupInvitationByTokenRequest(c.Server, token)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteGroupInvitationRequest(c.Server, groupInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetGroupInvitationRequest(c.Server, groupInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupInvitationWithBody(ctx context.Context, groupInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupInvitationRequestWithBody(c.Server, groupInvitationId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupInvitation(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupInvitationRequest(c.Server, groupInvitationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupInvitationWithFormdataBody(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupInvitationRequestWithFormdataBody(c.Server, groupInvitationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AcceptGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAcceptGroupInvitationRequest(c.Server, groupInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RejectGroupInvitation(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRejectGroupInvitationRequest(c.Server, groupInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderGroupsWithBody(ctx context.Context, params *OrderGroupsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderGroupsRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderGroups(ctx context.Context, params *OrderGroupsParams, body OrderGroupsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderGroupsRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderGroupsWithFormdataBody(ctx context.Context, params *OrderGroupsParams, body OrderGroupsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderGroupsRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListGroupUsers(ctx context.Context, groupId int, params *ListGroupUsersParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListGroupUsersRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteGroupUser(ctx context.Context, groupUserId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteGroupUserRequest(c.Server, groupUserId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupUserWithBody(ctx context.Context, groupUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupUserRequestWithBody(c.Server, groupUserId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupUser(ctx context.Context, groupUserId int, body UpdateGroupUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupUserRequest(c.Server, groupUserId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupUserWithFormdataBody(ctx context.Context, groupUserId int, body UpdateGroupUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupUserRequestWithFormdataBody(c.Server, groupUserId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteGroup(ctx context.Context, groupId int, params *DeleteGroupParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteGroupRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupWithBody(ctx context.Context, groupId int, params *UpdateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupRequestWithBody(c.Server, groupId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroup(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupRequest(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateGroupWithFormdataBody(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateGroupRequestWithFormdataBody(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) LeaveGroup(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewLeaveGroupRequest(c.Server, groupId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupPermissions(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupPermissionsRequest(c.Server, groupId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteApplicationIntegration(ctx context.Context, integrationId int, params *DeleteApplicationIntegrationParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteApplicationIntegrationRequest(c.Server, integrationId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplicationIntegrationWithBody(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationIntegrationRequestWithBody(c.Server, integrationId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplicationIntegration(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationIntegrationRequest(c.Server, integrationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateApplicationIntegrationWithFormdataBody(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateApplicationIntegrationRequestWithFormdataBody(c.Server, integrationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) MoveApplicationIntegrationWithBody(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewMoveApplicationIntegrationRequestWithBody(c.Server, integrationId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) MoveApplicationIntegration(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewMoveApplicationIntegrationRequest(c.Server, integrationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) MoveApplicationIntegrationWithFormdataBody(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewMoveApplicationIntegrationRequestWithFormdataBody(c.Server, integrationId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListJob(ctx context.Context, params *ListJobParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListJobRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateJobRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateJobRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateJobWithFormdataBody(ctx context.Context, body CreateJobFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateJobRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetJob(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetJobRequest(c.Server, jobId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminLicenses(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminLicensesRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminRegisterLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRegisterLicenseRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminRegisterLicense(ctx context.Context, body AdminRegisterLicenseJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRegisterLicenseRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminRegisterLicenseWithFormdataBody(ctx context.Context, body AdminRegisterLicenseFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRegisterLicenseRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AdminRemoveLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRemoveLicenseRequest(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminGetLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminGetLicenseRequest(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminLicenseCheck(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminLicenseCheckRequest(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminFillRemainingSeatsOfLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminFillRemainingSeatsOfLicenseRequest(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminLicenseLookupUsers(ctx context.Context, id int, params *AdminLicenseLookupUsersParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminLicenseLookupUsersRequest(c.Server, id, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminRemoveAllUsersFromLicense(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRemoveAllUsersFromLicenseRequest(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminRemoveUserFromLicense(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminRemoveUserFromLicenseRequest(c.Server, id, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AdminAddUserToLicense(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAdminAddUserToLicenseRequest(c.Server, id, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupListRoleAssignments(ctx context.Context, groupId int, params *GroupListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupListRoleAssignmentsRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupAssignRoleWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupAssignRoleRequestWithBody(c.Server, groupId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupAssignRole(ctx context.Context, groupId int, body GroupAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupAssignRoleRequest(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupAssignRoleWithFormdataBody(ctx context.Context, groupId int, body GroupAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupAssignRoleRequestWithFormdataBody(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GroupBatchAssignRoleWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupBatchAssignRoleRequestWithBody(c.Server, groupId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupBatchAssignRole(ctx context.Context, groupId int, body GroupBatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupBatchAssignRoleRequest(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupBatchAssignRoleWithFormdataBody(ctx context.Context, groupId int, body GroupBatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupBatchAssignRoleRequestWithFormdataBody(c.Server, groupId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListRoleAssignments(ctx context.Context, workspaceId int, params *ListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListRoleAssignmentsRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AssignRoleWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAssignRoleRequestWithBody(c.Server, workspaceId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AssignRole(ctx context.Context, workspaceId int, body AssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAssignRoleRequest(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AssignRoleWithFormdataBody(ctx context.Context, workspaceId int, body AssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAssignRoleRequestWithFormdataBody(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) BatchAssignRoleWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchAssignRoleRequestWithBody(c.Server, workspaceId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchAssignRole(ctx context.Context, workspaceId int, body BatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchAssignRoleRequest(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) BatchAssignRoleWithFormdataBody(ctx context.Context, workspaceId int, body BatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewBatchAssignRoleRequestWithFormdataBody(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteRowComment(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteRowCommentRequest(c.Server, tableId, commentId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateRowComment(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateRowCommentRequest(c.Server, tableId, commentId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetRowComments(ctx context.Context, tableId int, rowId int, params *GetRowCommentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetRowCommentsRequest(c.Server, tableId, rowId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateRowCommentWithBody(ctx context.Context, tableId int, rowId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateRowCommentRequestWithBody(c.Server, tableId, rowId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateRowComment(ctx context.Context, tableId int, rowId int, body CreateRowCommentJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateRowCommentRequest(c.Server, tableId, rowId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateRowCommentWithFormdataBody(ctx context.Context, tableId int, rowId int, body CreateRowCommentFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateRowCommentRequestWithFormdataBody(c.Server, tableId, rowId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetSettings(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetInstanceId(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetInstanceIdRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateSettingsRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateSettings(ctx context.Context, body UpdateSettingsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateSettingsRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateSettingsWithFormdataBody(ctx context.Context, body UpdateSettingsFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateSettingsRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListSnapshots(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListSnapshotsRequest(c.Server, applicationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSnapshotWithBody(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSnapshotRequestWithBody(c.Server, applicationId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSnapshot(ctx context.Context, applicationId int, body CreateSnapshotJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSnapshotRequest(c.Server, applicationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSnapshotWithFormdataBody(ctx context.Context, applicationId int, body CreateSnapshotFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSnapshotRequestWithFormdataBody(c.Server, applicationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteSnapshot(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteSnapshotRequest(c.Server, snapshotId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RestoreSnapshot(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRestoreSnapshotRequest(c.Server, snapshotId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OauthProviderLoginCallback(ctx context.Context, providerId int, params *OauthProviderLoginCallbackParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOauthProviderLoginCallbackRequest(c.Server, providerId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OauthProviderLoginRedirect(ctx context.Context, providerId int, params *OauthProviderLoginRedirectParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOauthProviderLoginRedirectRequest(c.Server, providerId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AuthProviderSamlAcsUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAuthProviderSamlAcsUrlRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AuthProviderSamlAcsUrl(ctx context.Context, body AuthProviderSamlAcsUrlJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAuthProviderSamlAcsUrlRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AuthProviderSamlAcsUrlWithFormdataBody(ctx context.Context, body AuthProviderSamlAcsUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAuthProviderSamlAcsUrlRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AuthProviderLoginUrl(ctx context.Context, params *AuthProviderLoginUrlParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAuthProviderLoginUrlRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) AuthProviderSamlSpLogin(ctx context.Context, params *AuthProviderSamlSpLoginParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAuthProviderSamlSpLoginRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupListTeams(ctx context.Context, groupId int, params *GroupListTeamsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupListTeamsRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateTeamWithBody(ctx context.Context, groupId string, params *GroupCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateTeamRequestWithBody(c.Server, groupId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateTeam(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateTeamRequest(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupCreateTeamWithFormdataBody(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupCreateTeamRequestWithFormdataBody(c.Server, groupId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) WorkspaceListTeams(ctx context.Context, workspaceId int, params *WorkspaceListTeamsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceListTeamsRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateTeamWithBody(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateTeamRequestWithBody(c.Server, workspaceId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateTeam(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateTeamRequest(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceCreateTeamWithFormdataBody(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceCreateTeamRequestWithFormdataBody(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteTeam(ctx context.Context, teamId int, params *DeleteTeamParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteTeamRequest(c.Server, teamId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTeam(ctx context.Context, teamId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTeamRequest(c.Server, teamId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateTeamWithBody(ctx context.Context, teamId string, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateTeamRequestWithBody(c.Server, teamId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateTeam(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateTeamRequest(c.Server, teamId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateTeamWithFormdataBody(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateTeamRequestWithFormdataBody(c.Server, teamId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListTeamSubjects(ctx context.Context, teamId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListTeamSubjectsRequest(c.Server, teamId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSubjectWithBody(ctx context.Context, teamId string, params *CreateSubjectParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSubjectRequestWithBody(c.Server, teamId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSubject(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSubjectRequest(c.Server, teamId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateSubjectWithFormdataBody(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateSubjectRequestWithFormdataBody(c.Server, teamId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteSubject(ctx context.Context, teamId int, subjectId int, params *DeleteSubjectParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteSubjectRequest(c.Server, teamId, subjectId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSubject(ctx context.Context, teamId string, subjectId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSubjectRequest(c.Server, teamId, subjectId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListTemplates(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListTemplatesRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupInstallTemplate(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupInstallTemplateRequest(c.Server, groupId, templateId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupInstallTemplateAsync(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupInstallTemplateAsyncRequest(c.Server, groupId, templateId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) InstallTemplate(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewInstallTemplateRequest(c.Server, workspaceId, templateId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) InstallTemplateAsync(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewInstallTemplateAsyncRequest(c.Server, workspaceId, templateId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTrashStructure(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTrashStructureRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupEmptyContents(ctx context.Context, groupId int, params *GroupEmptyContentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupEmptyContentsRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GroupGetContents(ctx context.Context, groupId int, params *GroupGetContentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGroupGetContentsRequest(c.Server, groupId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRestoreRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) Restore(ctx context.Context, body RestoreJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRestoreRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RestoreWithFormdataBody(ctx context.Context, body RestoreFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRestoreRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) WorkspaceEmptyContents(ctx context.Context, workspaceId int, params *WorkspaceEmptyContentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceEmptyContentsRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspaceGetContents(ctx context.Context, workspaceId int, params *WorkspaceGetContentsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspaceGetContentsRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UploadFile(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUploadFileRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UploadViaUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUploadViaUrlRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UploadViaUrl(ctx context.Context, body UploadViaUrlJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUploadViaUrlRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UploadViaUrlWithFormdataBody(ctx context.Context, body UploadViaUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUploadViaUrlRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateUserRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateUserWithFormdataBody(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateUserRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) UpdateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateAccountRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateAccount(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateAccountRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateAccountWithFormdataBody(ctx context.Context, body UpdateAccountFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateAccountRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewChangePasswordRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewChangePasswordRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ChangePasswordWithFormdataBody(ctx context.Context, body ChangePasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewChangePasswordRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) Dashboard(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDashboardRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RedoWithBody(ctx context.Context, params *RedoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRedoRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) Redo(ctx context.Context, params *RedoParams, body RedoJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRedoRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RedoWithFormdataBody(ctx context.Context, params *RedoParams, body RedoFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRedoRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewResetPasswordRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ResetPassword(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewResetPasswordRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ResetPasswordWithFormdataBody(ctx context.Context, body ResetPasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewResetPasswordRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ScheduleAccountDeletion(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewScheduleAccountDeletionRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SendPasswordResetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSendPasswordResetEmailRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SendPasswordResetEmail(ctx context.Context, body SendPasswordResetEmailJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSendPasswordResetEmailRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) SendPasswordResetEmailWithFormdataBody(ctx context.Context, body SendPasswordResetEmailFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewSendPasswordResetEmailRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) TokenAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenAuthRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenAuth(ctx context.Context, body TokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenAuthRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenAuthWithFormdataBody(ctx context.Context, body TokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenAuthRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) TokenRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenRefreshRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenRefresh(ctx context.Context, body TokenRefreshJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenRefreshRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenRefreshWithFormdataBody(ctx context.Context, body TokenRefreshFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenRefreshRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) TokenVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenVerifyRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenVerify(ctx context.Context, body TokenVerifyJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenVerifyRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) TokenVerifyWithFormdataBody(ctx context.Context, body TokenVerifyFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewTokenVerifyRequestWithFormdataBody(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) UndoWithBody(ctx context.Context, params *UndoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUndoRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) Undo(ctx context.Context, params *UndoParams, body UndoJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUndoRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UndoWithFormdataBody(ctx context.Context, params *UndoParams, body UndoFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUndoRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListWorkspaces(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListWorkspacesRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspaceWithBody(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspace(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspaceWithFormdataBody(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) GetWorkspaceInvitationByToken(ctx context.Context, token string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetWorkspaceInvitationByTokenRequest(c.Server, token)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ListWorkspaceInvitations(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListWorkspaceInvitationsRequest(c.Server, workspaceId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspaceInvitationWithBody(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceInvitationRequestWithBody(c.Server, workspaceId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspaceInvitation(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceInvitationRequest(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CreateWorkspaceInvitationWithFormdataBody(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCreateWorkspaceInvitationRequestWithFormdataBody(c.Server, workspaceId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteWorkspaceInvitationRequest(c.Server, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetWorkspaceInvitationRequest(c.Server, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceInvitationWithBody(ctx context.Context, workspaceInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceInvitationRequestWithBody(c.Server, workspaceInvitationId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceInvitationRequest(c.Server, workspaceInvitationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceInvitationWithFormdataBody(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceInvitationRequestWithFormdataBody(c.Server, workspaceInvitationId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) AcceptWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewAcceptWorkspaceInvitationRequest(c.Server, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) RejectWorkspaceInvitation(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewRejectWorkspaceInvitationRequest(c.Server, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderWorkspacesWithBody(ctx context.Context, params *OrderWorkspacesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderWorkspacesRequestWithBody(c.Server, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderWorkspaces(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderWorkspacesRequest(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) OrderWorkspacesWithFormdataBody(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewOrderWorkspacesRequestWithFormdataBody(c.Server, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) ListWorkspaceUsers(ctx context.Context, workspaceId int, params *ListWorkspaceUsersParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewListWorkspaceUsersRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteWorkspaceUser(ctx context.Context, workspaceUserId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteWorkspaceUserRequest(c.Server, workspaceUserId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceUserWithBody(ctx context.Context, workspaceUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceUserRequestWithBody(c.Server, workspaceUserId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceUser(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceUserRequest(c.Server, workspaceUserId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceUserWithFormdataBody(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceUserRequestWithFormdataBody(c.Server, workspaceUserId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) DeleteWorkspace(ctx context.Context, workspaceId int, params *DeleteWorkspaceParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteWorkspaceRequest(c.Server, workspaceId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceId, params, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspace(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceRequest(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) UpdateWorkspaceWithFormdataBody(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewUpdateWorkspaceRequestWithFormdataBody(c.Server, workspaceId, params, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}




func (c *Client) LeaveWorkspace(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewLeaveWorkspaceRequest(c.Server, workspaceId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) WorkspacePermissions(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewWorkspacePermissionsRequest(c.Server, workspaceId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) CmsApiPagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewCmsApiPagesRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainDocumentsRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainDocumentsRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainDocumentsFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainDocumentsFindRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainDocumentsRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainDocumentsRetrieve2Request(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainImagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainImagesRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainImagesFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainImagesFindRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainImagesRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainImagesRetrieve2Request(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainPagesRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainPagesRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainPagesFindRetrieve(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainPagesFindRetrieveRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainPagesRetrieve2(ctx context.Context, id int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainPagesRetrieve2Request(c.Server, id)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) ExcludeEachCmsApiMainPagesActionCreate(ctx context.Context, id int, actionName string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewExcludeEachCmsApiMainPagesActionCreateRequest(c.Server, id, actionName)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}







// NewEmailTesterRequest calls the generic EmailTester builder with application/json body
func NewEmailTesterRequest(server string, body EmailTesterJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewEmailTesterRequestWithBody(server, "application/json", bodyReader)
}

// NewEmailTesterRequestWithFormdataBody calls the generic EmailTester builder with application/x-www-form-urlencoded body
func NewEmailTesterRequestWithFormdataBody(server string, body EmailTesterFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewEmailTesterRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewEmailTesterRequestWithBody generates requests for EmailTester with any type of body
func NewEmailTesterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/_health/email/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewFullHealthCheckRequest generates requests for FullHealthCheck
func NewFullHealthCheckRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/_health/full/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminAuditLogRequest generates requests for AdminAuditLog
func NewAdminAuditLogRequest(server string, params *AdminAuditLogParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/audit-log/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminAuditLogTypesRequest generates requests for AdminAuditLogTypes
func NewAdminAuditLogTypesRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/audit-log/action-types/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewExportAuditLogRequest calls the generic ExportAuditLog builder with application/json body
func NewExportAuditLogRequest(server string, params *ExportAuditLogParams, body ExportAuditLogJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewExportAuditLogRequestWithBody(server, params, "application/json", bodyReader)
}

// NewExportAuditLogRequestWithFormdataBody calls the generic ExportAuditLog builder with application/x-www-form-urlencoded body
func NewExportAuditLogRequestWithFormdataBody(server string, params *ExportAuditLogParams, body ExportAuditLogFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewExportAuditLogRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewExportAuditLogRequestWithBody generates requests for ExportAuditLog with any type of body
func NewExportAuditLogRequestWithBody(server string, params *ExportAuditLogParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/audit-log/export/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewAdminAuditLogUsersRequest generates requests for AdminAuditLogUsers
func NewAdminAuditLogUsersRequest(server string, params *AdminAuditLogUsersParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/audit-log/users/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminAuditLogWorkspacesRequest generates requests for AdminAuditLogWorkspaces
func NewAdminAuditLogWorkspacesRequest(server string, params *AdminAuditLogWorkspacesParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/audit-log/workspaces/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListAuthProvidersRequest generates requests for ListAuthProviders
func NewListAuthProvidersRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/auth-provider/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewCreateAuthProviderRequest generates requests for CreateAuthProvider
func NewCreateAuthProviderRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/auth-provider/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteAuthProviderRequest generates requests for DeleteAuthProvider
func NewDeleteAuthProviderRequest(server string, authProviderId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auth_provider_id", runtime.ParamLocationPath, authProviderId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/auth-provider/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetAuthProviderRequest generates requests for GetAuthProvider
func NewGetAuthProviderRequest(server string, authProviderId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auth_provider_id", runtime.ParamLocationPath, authProviderId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/auth-provider/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewUpdateAuthProviderRequest generates requests for UpdateAuthProvider
func NewUpdateAuthProviderRequest(server string, authProviderId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auth_provider_id", runtime.ParamLocationPath, authProviderId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/auth-provider/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminDashboardRequest generates requests for AdminDashboard
func NewAdminDashboardRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/dashboard/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminListGroupsRequest generates requests for AdminListGroups
func NewAdminListGroupsRequest(server string, params *AdminListGroupsParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/groups/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminDeleteGroupRequest generates requests for AdminDeleteGroup
func NewAdminDeleteGroupRequest(server string, groupId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/groups/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminListUsersRequest generates requests for AdminListUsers
func NewAdminListUsersRequest(server string, params *AdminListUsersParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/users/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewAdminImpersonateUserRequest calls the generic AdminImpersonateUser builder with application/json body
func NewAdminImpersonateUserRequest(server string, body AdminImpersonateUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewAdminImpersonateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminImpersonateUserRequestWithFormdataBody calls the generic AdminImpersonateUser builder with application/x-www-form-urlencoded body
func NewAdminImpersonateUserRequestWithFormdataBody(server string, body AdminImpersonateUserFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewAdminImpersonateUserRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewAdminImpersonateUserRequestWithBody generates requests for AdminImpersonateUser with any type of body
func NewAdminImpersonateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/users/impersonate/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAdminDeleteUserRequest generates requests for AdminDeleteUser
func NewAdminDeleteUserRequest(server string, userId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewAdminEditUserRequest calls the generic AdminEditUser builder with application/json body
func NewAdminEditUserRequest(server string, userId int, body AdminEditUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewAdminEditUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAdminEditUserRequestWithFormdataBody calls the generic AdminEditUser builder with application/x-www-form-urlencoded body
func NewAdminEditUserRequestWithFormdataBody(server string, userId int, body AdminEditUserFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewAdminEditUserRequestWithBody(server, userId, "application/x-www-form-urlencoded", bodyReader)
}



// NewAdminEditUserRequestWithBody generates requests for AdminEditUser with any type of body
func NewAdminEditUserRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAdminListWorkspacesRequest generates requests for AdminListWorkspaces
func NewAdminListWorkspacesRequest(server string, params *AdminListWorkspacesParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/workspaces/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminDeleteWorkspaceRequest generates requests for AdminDeleteWorkspace
func NewAdminDeleteWorkspaceRequest(server string, workspaceId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/admin/workspaces/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListApplicationIntegrationsRequest generates requests for ListApplicationIntegrations
func NewListApplicationIntegrationsRequest(server string, applicationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/application/%s/integrations/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateApplicationIntegrationRequest calls the generic CreateApplicationIntegration builder with application/json body
func NewCreateApplicationIntegrationRequest(server string, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateApplicationIntegrationRequestWithBody(server, applicationId, params, "application/json", bodyReader)
}

// NewCreateApplicationIntegrationRequestWithFormdataBody calls the generic CreateApplicationIntegration builder with application/x-www-form-urlencoded body
func NewCreateApplicationIntegrationRequestWithFormdataBody(server string, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateApplicationIntegrationRequestWithBody(server, applicationId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateApplicationIntegrationRequestWithBody generates requests for CreateApplicationIntegration with any type of body
func NewCreateApplicationIntegrationRequestWithBody(server string, applicationId int, params *CreateApplicationIntegrationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/application/%s/integrations/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewListAllApplicationsRequest generates requests for ListAllApplications
func NewListAllApplicationsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupListApplicationsRequest generates requests for GroupListApplications
func NewGroupListApplicationsRequest(server string, groupId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewGroupCreateApplicationRequest calls the generic GroupCreateApplication builder with application/json body
func NewGroupCreateApplicationRequest(server string, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewGroupCreateApplicationRequestWithBody(server, groupId, params, "application/json", bodyReader)
}

// NewGroupCreateApplicationRequestWithFormdataBody calls the generic GroupCreateApplication builder with application/x-www-form-urlencoded body
func NewGroupCreateApplicationRequestWithFormdataBody(server string, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewGroupCreateApplicationRequestWithBody(server, groupId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewGroupCreateApplicationRequestWithBody generates requests for GroupCreateApplication with any type of body
func NewGroupCreateApplicationRequestWithBody(server string, groupId int, params *GroupCreateApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewGroupOrderApplicationsRequest calls the generic GroupOrderApplications builder with application/json body
func NewGroupOrderApplicationsRequest(server string, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewGroupOrderApplicationsRequestWithBody(server, groupId, params, "application/json", bodyReader)
}

// NewGroupOrderApplicationsRequestWithFormdataBody calls the generic GroupOrderApplications builder with application/x-www-form-urlencoded body
func NewGroupOrderApplicationsRequestWithFormdataBody(server string, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewGroupOrderApplicationsRequestWithBody(server, groupId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewGroupOrderApplicationsRequestWithBody generates requests for GroupOrderApplications with any type of body
func NewGroupOrderApplicationsRequestWithBody(server string, groupId int, params *GroupOrderApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/group/%s/order/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewWorkspaceListApplicationsRequest generates requests for WorkspaceListApplications
func NewWorkspaceListApplicationsRequest(server string, workspaceId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewWorkspaceCreateApplicationRequest calls the generic WorkspaceCreateApplication builder with application/json body
func NewWorkspaceCreateApplicationRequest(server string, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewWorkspaceCreateApplicationRequestWithBody(server, workspaceId, params, "application/json", bodyReader)
}

// NewWorkspaceCreateApplicationRequestWithFormdataBody calls the generic WorkspaceCreateApplication builder with application/x-www-form-urlencoded body
func NewWorkspaceCreateApplicationRequestWithFormdataBody(server string, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewWorkspaceCreateApplicationRequestWithBody(server, workspaceId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewWorkspaceCreateApplicationRequestWithBody generates requests for WorkspaceCreateApplication with any type of body
func NewWorkspaceCreateApplicationRequestWithBody(server string, workspaceId int, params *WorkspaceCreateApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewWorkspaceOrderApplicationsRequest calls the generic WorkspaceOrderApplications builder with application/json body
func NewWorkspaceOrderApplicationsRequest(server string, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewWorkspaceOrderApplicationsRequestWithBody(server, workspaceId, params, "application/json", bodyReader)
}

// NewWorkspaceOrderApplicationsRequestWithFormdataBody calls the generic WorkspaceOrderApplications builder with application/x-www-form-urlencoded body
func NewWorkspaceOrderApplicationsRequestWithFormdataBody(server string, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewWorkspaceOrderApplicationsRequestWithBody(server, workspaceId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewWorkspaceOrderApplicationsRequestWithBody generates requests for WorkspaceOrderApplications with any type of body
func NewWorkspaceOrderApplicationsRequestWithBody(server string, workspaceId int, params *WorkspaceOrderApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/workspace/%s/order/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, applicationId int, params *DeleteApplicationParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewWorkspaceGetApplicationRequest generates requests for WorkspaceGetApplication
func NewWorkspaceGetApplicationRequest(server string, applicationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateApplicationRequest calls the generic UpdateApplication builder with application/json body
func NewUpdateApplicationRequest(server string, applicationId int, params *UpdateApplicationParams, body UpdateApplicationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateApplicationRequestWithBody(server, applicationId, params, "application/json", bodyReader)
}

// NewUpdateApplicationRequestWithFormdataBody calls the generic UpdateApplication builder with application/x-www-form-urlencoded body
func NewUpdateApplicationRequestWithFormdataBody(server string, applicationId int, params *UpdateApplicationParams, body UpdateApplicationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateApplicationRequestWithBody(server, applicationId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, applicationId int, params *UpdateApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDuplicateApplicationAsyncRequest generates requests for DuplicateApplicationAsync
func NewDuplicateApplicationAsyncRequest(server string, applicationId int, params *DuplicateApplicationAsyncParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/applications/%s/duplicate/async/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListAuthProvidersLoginOptionsRequest generates requests for ListAuthProvidersLoginOptions
func NewListAuthProvidersLoginOptionsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/auth-provider/login-options/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewExportTableRequest calls the generic ExportTable builder with application/json body
func NewExportTableRequest(server string, tableId int, body ExportTableJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewExportTableRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewExportTableRequestWithFormdataBody calls the generic ExportTable builder with application/x-www-form-urlencoded body
func NewExportTableRequestWithFormdataBody(server string, tableId int, body ExportTableFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewExportTableRequestWithBody(server, tableId, "application/x-www-form-urlencoded", bodyReader)
}



// NewExportTableRequestWithBody generates requests for ExportTable with any type of body
func NewExportTableRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/export/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetExportJobRequest generates requests for GetExportJob
func NewGetExportJobRequest(server string, jobId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/export/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableFieldsRequest generates requests for ListDatabaseTableFields
func NewListDatabaseTableFieldsRequest(server string, tableId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableFieldRequest calls the generic CreateDatabaseTableField builder with application/json body
func NewCreateDatabaseTableFieldRequest(server string, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableFieldRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableFieldRequestWithFormdataBody calls the generic CreateDatabaseTableField builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableFieldRequestWithFormdataBody(server string, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableFieldRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableFieldRequestWithBody generates requests for CreateDatabaseTableField with any type of body
func NewCreateDatabaseTableFieldRequestWithBody(server string, tableId int, params *CreateDatabaseTableFieldParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDeleteDatabaseTableFieldRequest generates requests for DeleteDatabaseTableField
func NewDeleteDatabaseTableFieldRequest(server string, fieldId int, params *DeleteDatabaseTableFieldParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableFieldRequest generates requests for GetDatabaseTableField
func NewGetDatabaseTableFieldRequest(server string, fieldId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableFieldRequest calls the generic UpdateDatabaseTableField builder with application/json body
func NewUpdateDatabaseTableFieldRequest(server string, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableFieldRequestWithBody(server, fieldId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableFieldRequestWithFormdataBody calls the generic UpdateDatabaseTableField builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableFieldRequestWithFormdataBody(server string, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableFieldRequestWithBody(server, fieldId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableFieldRequestWithBody generates requests for UpdateDatabaseTableField with any type of body
func NewUpdateDatabaseTableFieldRequestWithBody(server string, fieldId int, params *UpdateDatabaseTableFieldParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDuplicateTableFieldRequest generates requests for DuplicateTableField
func NewDuplicateTableFieldRequest(server string, fieldId int, params *DuplicateTableFieldParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/%s/duplicate/async/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseFieldUniqueRowValuesRequest generates requests for GetDatabaseFieldUniqueRowValues
func NewGetDatabaseFieldUniqueRowValuesRequest(server string, fieldId int, params *GetDatabaseFieldUniqueRowValuesParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/fields/%s/unique_row_values/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.SplitCommaSeparated != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "split_comma_separated", runtime.ParamLocationQuery, *params.SplitCommaSeparated); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewTypeFormulaFieldRequest calls the generic TypeFormulaField builder with application/json body
func NewTypeFormulaFieldRequest(server string, tableId int, body TypeFormulaFieldJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewTypeFormulaFieldRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewTypeFormulaFieldRequestWithFormdataBody calls the generic TypeFormulaField builder with application/x-www-form-urlencoded body
func NewTypeFormulaFieldRequestWithFormdataBody(server string, tableId int, body TypeFormulaFieldFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewTypeFormulaFieldRequestWithBody(server, tableId, "application/x-www-form-urlencoded", bodyReader)
}



// NewTypeFormulaFieldRequestWithBody generates requests for TypeFormulaField with any type of body
func NewTypeFormulaFieldRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/formula/%s/type/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewListDatabaseTableRowNamesRequest generates requests for ListDatabaseTableRowNames
func NewListDatabaseTableRowNamesRequest(server string, params *ListDatabaseTableRowNamesParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/names/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.TableId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "table__{id}", runtime.ParamLocationQuery, *params.TableId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableRowsRequest generates requests for ListDatabaseTableRows
func NewListDatabaseTableRowsRequest(server string, tableId int, params *ListDatabaseTableRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Exclude != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude", runtime.ParamLocationQuery, *params.Exclude); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterFieldFilter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter__{field}__{filter}", runtime.ParamLocationQuery, *params.FilterFieldFilter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterType != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter_type", runtime.ParamLocationQuery, *params.FilterType); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.OrderBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ViewId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id", runtime.ParamLocationQuery, *params.ViewId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableRowRequest calls the generic CreateDatabaseTableRow builder with application/json body
func NewCreateDatabaseTableRowRequest(server string, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableRowRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableRowRequestWithFormdataBody calls the generic CreateDatabaseTableRow builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableRowRequestWithFormdataBody(server string, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableRowRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableRowRequestWithBody generates requests for CreateDatabaseTableRow with any type of body
func NewCreateDatabaseTableRowRequestWithBody(server string, tableId int, params *CreateDatabaseTableRowParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Before != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewBatchDeleteDatabaseTableRowsRequest calls the generic BatchDeleteDatabaseTableRows builder with application/json body
func NewBatchDeleteDatabaseTableRowsRequest(server string, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewBatchDeleteDatabaseTableRowsRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewBatchDeleteDatabaseTableRowsRequestWithFormdataBody calls the generic BatchDeleteDatabaseTableRows builder with application/x-www-form-urlencoded body
func NewBatchDeleteDatabaseTableRowsRequestWithFormdataBody(server string, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewBatchDeleteDatabaseTableRowsRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewBatchDeleteDatabaseTableRowsRequestWithBody generates requests for BatchDeleteDatabaseTableRows with any type of body
func NewBatchDeleteDatabaseTableRowsRequestWithBody(server string, tableId int, params *BatchDeleteDatabaseTableRowsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/batch-delete/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewBatchUpdateDatabaseTableRowsRequest calls the generic BatchUpdateDatabaseTableRows builder with application/json body
func NewBatchUpdateDatabaseTableRowsRequest(server string, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewBatchUpdateDatabaseTableRowsRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewBatchUpdateDatabaseTableRowsRequestWithFormdataBody calls the generic BatchUpdateDatabaseTableRows builder with application/x-www-form-urlencoded body
func NewBatchUpdateDatabaseTableRowsRequestWithFormdataBody(server string, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewBatchUpdateDatabaseTableRowsRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewBatchUpdateDatabaseTableRowsRequestWithBody generates requests for BatchUpdateDatabaseTableRows with any type of body
func NewBatchUpdateDatabaseTableRowsRequestWithBody(server string, tableId int, params *BatchUpdateDatabaseTableRowsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/batch/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewBatchCreateDatabaseTableRowsRequest calls the generic BatchCreateDatabaseTableRows builder with application/json body
func NewBatchCreateDatabaseTableRowsRequest(server string, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewBatchCreateDatabaseTableRowsRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewBatchCreateDatabaseTableRowsRequestWithFormdataBody calls the generic BatchCreateDatabaseTableRows builder with application/x-www-form-urlencoded body
func NewBatchCreateDatabaseTableRowsRequestWithFormdataBody(server string, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewBatchCreateDatabaseTableRowsRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewBatchCreateDatabaseTableRowsRequestWithBody generates requests for BatchCreateDatabaseTableRows with any type of body
func NewBatchCreateDatabaseTableRowsRequestWithBody(server string, tableId int, params *BatchCreateDatabaseTableRowsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/batch/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Before != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDeleteDatabaseTableRowRequest generates requests for DeleteDatabaseTableRow
func NewDeleteDatabaseTableRowRequest(server string, tableId int, rowId int, params *DeleteDatabaseTableRowParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableRowRequest generates requests for GetDatabaseTableRow
func NewGetDatabaseTableRowRequest(server string, tableId int, rowId int, params *GetDatabaseTableRowParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableRowRequest calls the generic UpdateDatabaseTableRow builder with application/json body
func NewUpdateDatabaseTableRowRequest(server string, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableRowRequestWithBody(server, tableId, rowId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableRowRequestWithFormdataBody calls the generic UpdateDatabaseTableRow builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableRowRequestWithFormdataBody(server string, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableRowRequestWithBody(server, tableId, rowId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableRowRequestWithBody generates requests for UpdateDatabaseTableRow with any type of body
func NewUpdateDatabaseTableRowRequestWithBody(server string, tableId int, rowId int, params *UpdateDatabaseTableRowParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetAdjacentDatabaseTableRowRequest generates requests for GetAdjacentDatabaseTableRow
func NewGetAdjacentDatabaseTableRowRequest(server string, tableId int, rowId int, params *GetAdjacentDatabaseTableRowParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/%s/adjacent/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Previous != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "previous", runtime.ParamLocationQuery, *params.Previous); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ViewId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id", runtime.ParamLocationQuery, *params.ViewId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewMoveDatabaseTableRowRequest generates requests for MoveDatabaseTableRow
func NewMoveDatabaseTableRowRequest(server string, tableId int, rowId int, params *MoveDatabaseTableRowParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/rows/table/%s/%s/move/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.BeforeId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before_id", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.UserFieldNames != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_field_names", runtime.ParamLocationQuery, *params.UserFieldNames); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("PATCH", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTablesRequest generates requests for ListDatabaseTables
func NewListDatabaseTablesRequest(server string, databaseId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database_id", runtime.ParamLocationPath, databaseId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/database/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableRequest calls the generic CreateDatabaseTable builder with application/json body
func NewCreateDatabaseTableRequest(server string, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableRequestWithBody(server, databaseId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableRequestWithFormdataBody calls the generic CreateDatabaseTable builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableRequestWithFormdataBody(server string, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableRequestWithBody(server, databaseId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableRequestWithBody generates requests for CreateDatabaseTable with any type of body
func NewCreateDatabaseTableRequestWithBody(server string, databaseId int, params *CreateDatabaseTableParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database_id", runtime.ParamLocationPath, databaseId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/database/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewCreateDatabaseTableAsyncRequest calls the generic CreateDatabaseTableAsync builder with application/json body
func NewCreateDatabaseTableAsyncRequest(server string, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableAsyncRequestWithBody(server, databaseId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableAsyncRequestWithFormdataBody calls the generic CreateDatabaseTableAsync builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableAsyncRequestWithFormdataBody(server string, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableAsyncRequestWithBody(server, databaseId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableAsyncRequestWithBody generates requests for CreateDatabaseTableAsync with any type of body
func NewCreateDatabaseTableAsyncRequestWithBody(server string, databaseId int, params *CreateDatabaseTableAsyncParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database_id", runtime.ParamLocationPath, databaseId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/database/%s/async/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}



// NewOrderDatabaseTablesRequest calls the generic OrderDatabaseTables builder with application/json body
func NewOrderDatabaseTablesRequest(server string, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewOrderDatabaseTablesRequestWithBody(server, databaseId, params, "application/json", bodyReader)
}

// NewOrderDatabaseTablesRequestWithFormdataBody calls the generic OrderDatabaseTables builder with application/x-www-form-urlencoded body
func NewOrderDatabaseTablesRequestWithFormdataBody(server string, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewOrderDatabaseTablesRequestWithBody(server, databaseId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewOrderDatabaseTablesRequestWithBody generates requests for OrderDatabaseTables with any type of body
func NewOrderDatabaseTablesRequestWithBody(server string, databaseId int, params *OrderDatabaseTablesParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database_id", runtime.ParamLocationPath, databaseId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/database/%s/order/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDeleteDatabaseTableRequest generates requests for DeleteDatabaseTable
func NewDeleteDatabaseTableRequest(server string, tableId int, params *DeleteDatabaseTableParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableRequest generates requests for GetDatabaseTable
func NewGetDatabaseTableRequest(server string, tableId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableRequest calls the generic UpdateDatabaseTable builder with application/json body
func NewUpdateDatabaseTableRequest(server string, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableRequestWithFormdataBody calls the generic UpdateDatabaseTable builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableRequestWithFormdataBody(server string, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableRequestWithBody generates requests for UpdateDatabaseTable with any type of body
func NewUpdateDatabaseTableRequestWithBody(server string, tableId int, params *UpdateDatabaseTableParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDuplicateDatabaseTableAsyncRequest generates requests for DuplicateDatabaseTableAsync
func NewDuplicateDatabaseTableAsyncRequest(server string, tableId int, params *DuplicateDatabaseTableAsyncParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/%s/duplicate/async/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewImportDataDatabaseTableAsyncRequest calls the generic ImportDataDatabaseTableAsync builder with application/json body
func NewImportDataDatabaseTableAsyncRequest(server string, tableId int, body ImportDataDatabaseTableAsyncJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewImportDataDatabaseTableAsyncRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewImportDataDatabaseTableAsyncRequestWithFormdataBody calls the generic ImportDataDatabaseTableAsync builder with application/x-www-form-urlencoded body
func NewImportDataDatabaseTableAsyncRequestWithFormdataBody(server string, tableId int, body ImportDataDatabaseTableAsyncFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewImportDataDatabaseTableAsyncRequestWithBody(server, tableId, "application/x-www-form-urlencoded", bodyReader)
}



// NewImportDataDatabaseTableAsyncRequestWithBody generates requests for ImportDataDatabaseTableAsync with any type of body
func NewImportDataDatabaseTableAsyncRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tables/%s/import/async/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewListDatabaseTokensRequest generates requests for ListDatabaseTokens
func NewListDatabaseTokensRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTokenRequest calls the generic CreateDatabaseToken builder with application/json body
func NewCreateDatabaseTokenRequest(server string, body CreateDatabaseTokenJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDatabaseTokenRequestWithFormdataBody calls the generic CreateDatabaseToken builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTokenRequestWithFormdataBody(server string, body CreateDatabaseTokenFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTokenRequestWithBody generates requests for CreateDatabaseToken with any type of body
func NewCreateDatabaseTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewCheckDatabaseTokenRequest generates requests for CheckDatabaseToken
func NewCheckDatabaseTokenRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/check/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteDatabaseTokenRequest generates requests for DeleteDatabaseToken
func NewDeleteDatabaseTokenRequest(server string, tokenId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDatabaseTokenRequest generates requests for GetDatabaseToken
func NewGetDatabaseTokenRequest(server string, tokenId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTokenRequest calls the generic UpdateDatabaseToken builder with application/json body
func NewUpdateDatabaseTokenRequest(server string, tokenId int, body UpdateDatabaseTokenJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTokenRequestWithBody(server, tokenId, "application/json", bodyReader)
}

// NewUpdateDatabaseTokenRequestWithFormdataBody calls the generic UpdateDatabaseToken builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTokenRequestWithFormdataBody(server string, tokenId int, body UpdateDatabaseTokenFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTokenRequestWithBody(server, tokenId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTokenRequestWithBody generates requests for UpdateDatabaseToken with any type of body
func NewUpdateDatabaseTokenRequestWithBody(server string, tokenId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/tokens/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPremiumViewAttributesUpdateRequest calls the generic PremiumViewAttributesUpdate builder with application/json body
func NewPremiumViewAttributesUpdateRequest(server string, viewId int, body PremiumViewAttributesUpdateJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPremiumViewAttributesUpdateRequestWithBody(server, viewId, "application/json", bodyReader)
}

// NewPremiumViewAttributesUpdateRequestWithFormdataBody calls the generic PremiumViewAttributesUpdate builder with application/x-www-form-urlencoded body
func NewPremiumViewAttributesUpdateRequestWithFormdataBody(server string, viewId int, body PremiumViewAttributesUpdateFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewPremiumViewAttributesUpdateRequestWithBody(server, viewId, "application/x-www-form-urlencoded", bodyReader)
}



// NewPremiumViewAttributesUpdateRequestWithBody generates requests for PremiumViewAttributesUpdate with any type of body
func NewPremiumViewAttributesUpdateRequestWithBody(server string, viewId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/view/%s/premium", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPublicListDatabaseTableCalendarViewRowsRequest generates requests for PublicListDatabaseTableCalendarViewRows
func NewPublicListDatabaseTableCalendarViewRowsRequest(server string, slug string, params *PublicListDatabaseTableCalendarViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/calendar/%s/public/rows/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_timestamp", runtime.ParamLocationQuery, params.FromTimestamp); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_timestamp", runtime.ParamLocationQuery, params.ToTimestamp); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.UserTimezone != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_timezone", runtime.ParamLocationQuery, *params.UserTimezone); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableCalendarViewRowsRequest generates requests for ListDatabaseTableCalendarViewRows
func NewListDatabaseTableCalendarViewRowsRequest(server string, viewId int, params *ListDatabaseTableCalendarViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/calendar/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_timestamp", runtime.ParamLocationQuery, params.FromTimestamp); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_timestamp", runtime.ParamLocationQuery, params.ToTimestamp); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.UserTimezone != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_timezone", runtime.ParamLocationQuery, *params.UserTimezone); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteDatabaseTableViewDecorationRequest generates requests for DeleteDatabaseTableViewDecoration
func NewDeleteDatabaseTableViewDecorationRequest(server string, viewDecorationId int, params *DeleteDatabaseTableViewDecorationParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_decoration_id", runtime.ParamLocationPath, viewDecorationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/decoration/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableViewDecorationRequest generates requests for GetDatabaseTableViewDecoration
func NewGetDatabaseTableViewDecorationRequest(server string, viewDecorationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_decoration_id", runtime.ParamLocationPath, viewDecorationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/decoration/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableViewDecorationRequest calls the generic UpdateDatabaseTableViewDecoration builder with application/json body
func NewUpdateDatabaseTableViewDecorationRequest(server string, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableViewDecorationRequestWithBody(server, viewDecorationId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableViewDecorationRequestWithFormdataBody calls the generic UpdateDatabaseTableViewDecoration builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableViewDecorationRequestWithFormdataBody(server string, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableViewDecorationRequestWithBody(server, viewDecorationId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableViewDecorationRequestWithBody generates requests for UpdateDatabaseTableViewDecoration with any type of body
func NewUpdateDatabaseTableViewDecorationRequestWithBody(server string, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_decoration_id", runtime.ParamLocationPath, viewDecorationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/decoration/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDeleteDatabaseTableViewFilterRequest generates requests for DeleteDatabaseTableViewFilter
func NewDeleteDatabaseTableViewFilterRequest(server string, viewFilterId int, params *DeleteDatabaseTableViewFilterParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_filter_id", runtime.ParamLocationPath, viewFilterId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/filter/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableViewFilterRequest generates requests for GetDatabaseTableViewFilter
func NewGetDatabaseTableViewFilterRequest(server string, viewFilterId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_filter_id", runtime.ParamLocationPath, viewFilterId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/filter/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableViewFilterRequest calls the generic UpdateDatabaseTableViewFilter builder with application/json body
func NewUpdateDatabaseTableViewFilterRequest(server string, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableViewFilterRequestWithBody(server, viewFilterId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableViewFilterRequestWithFormdataBody calls the generic UpdateDatabaseTableViewFilter builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableViewFilterRequestWithFormdataBody(server string, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableViewFilterRequestWithBody(server, viewFilterId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableViewFilterRequestWithBody generates requests for UpdateDatabaseTableViewFilter with any type of body
func NewUpdateDatabaseTableViewFilterRequestWithBody(server string, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_filter_id", runtime.ParamLocationPath, viewFilterId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/filter/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetMetaDatabaseTableFormViewRequest generates requests for GetMetaDatabaseTableFormView
func NewGetMetaDatabaseTableFormViewRequest(server string, slug string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/form/%s/submit/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewSubmitDatabaseTableFormViewRequest calls the generic SubmitDatabaseTableFormView builder with application/json body
func NewSubmitDatabaseTableFormViewRequest(server string, slug string, body SubmitDatabaseTableFormViewJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewSubmitDatabaseTableFormViewRequestWithBody(server, slug, "application/json", bodyReader)
}

// NewSubmitDatabaseTableFormViewRequestWithFormdataBody calls the generic SubmitDatabaseTableFormView builder with application/x-www-form-urlencoded body
func NewSubmitDatabaseTableFormViewRequestWithFormdataBody(server string, slug string, body SubmitDatabaseTableFormViewFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewSubmitDatabaseTableFormViewRequestWithBody(server, slug, "application/x-www-form-urlencoded", bodyReader)
}



// NewSubmitDatabaseTableFormViewRequestWithBody generates requests for SubmitDatabaseTableFormView with any type of body
func NewSubmitDatabaseTableFormViewRequestWithBody(server string, slug string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/form/%s/submit/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewUploadFileFormViewRequest generates requests for UploadFileFormView
func NewUploadFileFormViewRequest(server string, slug string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/form/%s/upload-file/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPublicListDatabaseTableGalleryViewRowsRequest generates requests for PublicListDatabaseTableGalleryViewRows
func NewPublicListDatabaseTableGalleryViewRowsRequest(server string, slug string, params *PublicListDatabaseTableGalleryViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/gallery/%s/public/rows/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Count != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ExcludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterFieldFilter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter__{field}__{filter}", runtime.ParamLocationQuery, *params.FilterFieldFilter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterType != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter_type", runtime.ParamLocationQuery, *params.FilterType); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.IncludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fields", runtime.ParamLocationQuery, *params.IncludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.OrderBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableGalleryViewRowsRequest generates requests for ListDatabaseTableGalleryViewRows
func NewListDatabaseTableGalleryViewRowsRequest(server string, viewId int, params *ListDatabaseTableGalleryViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/gallery/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Count != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPublicListDatabaseTableGridViewRowsRequest generates requests for PublicListDatabaseTableGridViewRows
func NewPublicListDatabaseTableGridViewRowsRequest(server string, slug string, params *PublicListDatabaseTableGridViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/grid/%s/public/rows/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Count != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ExcludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterFieldFilter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter__{field}__{filter}", runtime.ParamLocationQuery, *params.FilterFieldFilter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FilterType != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter_type", runtime.ParamLocationQuery, *params.FilterType); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.IncludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fields", runtime.ParamLocationQuery, *params.IncludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.OrderBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableGridViewRowsRequest generates requests for ListDatabaseTableGridViewRows
func NewListDatabaseTableGridViewRowsRequest(server string, viewId int, params *ListDatabaseTableGridViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/grid/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Count != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ExcludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.IncludeFields != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_fields", runtime.ParamLocationQuery, *params.IncludeFields); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewFilterDatabaseTableGridViewRowsRequest calls the generic FilterDatabaseTableGridViewRows builder with application/json body
func NewFilterDatabaseTableGridViewRowsRequest(server string, viewId int, body FilterDatabaseTableGridViewRowsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewFilterDatabaseTableGridViewRowsRequestWithBody(server, viewId, "application/json", bodyReader)
}

// NewFilterDatabaseTableGridViewRowsRequestWithFormdataBody calls the generic FilterDatabaseTableGridViewRows builder with application/x-www-form-urlencoded body
func NewFilterDatabaseTableGridViewRowsRequestWithFormdataBody(server string, viewId int, body FilterDatabaseTableGridViewRowsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewFilterDatabaseTableGridViewRowsRequestWithBody(server, viewId, "application/x-www-form-urlencoded", bodyReader)
}



// NewFilterDatabaseTableGridViewRowsRequestWithBody generates requests for FilterDatabaseTableGridViewRows with any type of body
func NewFilterDatabaseTableGridViewRowsRequestWithBody(server string, viewId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/grid/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetDatabaseTableGridViewFieldAggregationRequest generates requests for GetDatabaseTableGridViewFieldAggregation
func NewGetDatabaseTableGridViewFieldAggregationRequest(server string, viewId int, fieldId int, params *GetDatabaseTableGridViewFieldAggregationParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/grid/%s/aggregation/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Type != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDatabaseTableGridViewFieldAggregationsRequest generates requests for GetDatabaseTableGridViewFieldAggregations
func NewGetDatabaseTableGridViewFieldAggregationsRequest(server string, viewId int, params *GetDatabaseTableGridViewFieldAggregationsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/grid/%s/aggregations/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPublicListDatabaseTableKanbanViewRowsRequest generates requests for PublicListDatabaseTableKanbanViewRows
func NewPublicListDatabaseTableKanbanViewRowsRequest(server string, slug string, params *PublicListDatabaseTableKanbanViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/kanban/%s/public/rows/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.SelectOption != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select_option", runtime.ParamLocationQuery, *params.SelectOption); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListDatabaseTableKanbanViewRowsRequest generates requests for ListDatabaseTableKanbanViewRows
func NewListDatabaseTableKanbanViewRowsRequest(server string, viewId int, params *ListDatabaseTableKanbanViewRowsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/kanban/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.SelectOption != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select_option", runtime.ParamLocationQuery, *params.SelectOption); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteDatabaseTableViewSortRequest generates requests for DeleteDatabaseTableViewSort
func NewDeleteDatabaseTableViewSortRequest(server string, viewSortId int, params *DeleteDatabaseTableViewSortParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_sort_id", runtime.ParamLocationPath, viewSortId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/sort/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableViewSortRequest generates requests for GetDatabaseTableViewSort
func NewGetDatabaseTableViewSortRequest(server string, viewSortId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_sort_id", runtime.ParamLocationPath, viewSortId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/sort/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableViewSortRequest calls the generic UpdateDatabaseTableViewSort builder with application/json body
func NewUpdateDatabaseTableViewSortRequest(server string, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableViewSortRequestWithBody(server, viewSortId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableViewSortRequestWithFormdataBody calls the generic UpdateDatabaseTableViewSort builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableViewSortRequestWithFormdataBody(server string, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableViewSortRequestWithBody(server, viewSortId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableViewSortRequestWithBody generates requests for UpdateDatabaseTableViewSort with any type of body
func NewUpdateDatabaseTableViewSortRequestWithBody(server string, viewSortId int, params *UpdateDatabaseTableViewSortParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_sort_id", runtime.ParamLocationPath, viewSortId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/sort/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTableViewsRequest generates requests for ListDatabaseTableViews
func NewListDatabaseTableViewsRequest(server string, tableId int, params *ListDatabaseTableViewsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Type != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableViewRequest calls the generic CreateDatabaseTableView builder with application/json body
func NewCreateDatabaseTableViewRequest(server string, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableViewRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableViewRequestWithFormdataBody calls the generic CreateDatabaseTableView builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableViewRequestWithFormdataBody(server string, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableViewRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableViewRequestWithBody generates requests for CreateDatabaseTableView with any type of body
func NewCreateDatabaseTableViewRequestWithBody(server string, tableId int, params *CreateDatabaseTableViewParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewOrderDatabaseTableViewsRequest calls the generic OrderDatabaseTableViews builder with application/json body
func NewOrderDatabaseTableViewsRequest(server string, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewOrderDatabaseTableViewsRequestWithBody(server, tableId, params, "application/json", bodyReader)
}

// NewOrderDatabaseTableViewsRequestWithFormdataBody calls the generic OrderDatabaseTableViews builder with application/x-www-form-urlencoded body
func NewOrderDatabaseTableViewsRequestWithFormdataBody(server string, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewOrderDatabaseTableViewsRequestWithBody(server, tableId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewOrderDatabaseTableViewsRequestWithBody generates requests for OrderDatabaseTableViews with any type of body
func NewOrderDatabaseTableViewsRequestWithBody(server string, tableId int, params *OrderDatabaseTableViewsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/table/%s/order/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDatabaseTablePublicViewLinkRowFieldLookupRequest generates requests for DatabaseTablePublicViewLinkRowFieldLookup
func NewDatabaseTablePublicViewLinkRowFieldLookupRequest(server string, slug string, fieldId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/link-row-field-lookup/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPublicViewTokenAuthRequest calls the generic PublicViewTokenAuth builder with application/json body
func NewPublicViewTokenAuthRequest(server string, slug string, body PublicViewTokenAuthJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPublicViewTokenAuthRequestWithBody(server, slug, "application/json", bodyReader)
}

// NewPublicViewTokenAuthRequestWithFormdataBody calls the generic PublicViewTokenAuth builder with application/x-www-form-urlencoded body
func NewPublicViewTokenAuthRequestWithFormdataBody(server string, slug string, body PublicViewTokenAuthFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewPublicViewTokenAuthRequestWithBody(server, slug, "application/x-www-form-urlencoded", bodyReader)
}



// NewPublicViewTokenAuthRequestWithBody generates requests for PublicViewTokenAuth with any type of body
func NewPublicViewTokenAuthRequestWithBody(server string, slug string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/public/auth/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetPublicViewInfoRequest generates requests for GetPublicViewInfo
func NewGetPublicViewInfoRequest(server string, slug string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/public/info/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteDatabaseTableViewRequest generates requests for DeleteDatabaseTableView
func NewDeleteDatabaseTableViewRequest(server string, viewId int, params *DeleteDatabaseTableViewParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableViewRequest generates requests for GetDatabaseTableView
func NewGetDatabaseTableViewRequest(server string, viewId int, params *GetDatabaseTableViewParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableViewRequest calls the generic UpdateDatabaseTableView builder with application/json body
func NewUpdateDatabaseTableViewRequest(server string, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableViewRequestWithBody(server, viewId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableViewRequestWithFormdataBody calls the generic UpdateDatabaseTableView builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableViewRequestWithFormdataBody(server string, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableViewRequestWithBody(server, viewId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableViewRequestWithBody generates requests for UpdateDatabaseTableView with any type of body
func NewUpdateDatabaseTableViewRequestWithBody(server string, viewId int, params *UpdateDatabaseTableViewParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Include != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTableViewDecorationsRequest generates requests for ListDatabaseTableViewDecorations
func NewListDatabaseTableViewDecorationsRequest(server string, viewId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/decorations/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableViewDecorationRequest calls the generic CreateDatabaseTableViewDecoration builder with application/json body
func NewCreateDatabaseTableViewDecorationRequest(server string, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableViewDecorationRequestWithBody(server, viewId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableViewDecorationRequestWithFormdataBody calls the generic CreateDatabaseTableViewDecoration builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableViewDecorationRequestWithFormdataBody(server string, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableViewDecorationRequestWithBody(server, viewId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableViewDecorationRequestWithBody generates requests for CreateDatabaseTableViewDecoration with any type of body
func NewCreateDatabaseTableViewDecorationRequestWithBody(server string, viewId int, params *CreateDatabaseTableViewDecorationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/decorations/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewDuplicateDatabaseTableViewRequest generates requests for DuplicateDatabaseTableView
func NewDuplicateDatabaseTableViewRequest(server string, viewId int, params *DuplicateDatabaseTableViewParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/duplicate/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetDatabaseTableViewFieldOptionsRequest generates requests for GetDatabaseTableViewFieldOptions
func NewGetDatabaseTableViewFieldOptionsRequest(server string, viewId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/field-options/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableViewFieldOptionsRequest calls the generic UpdateDatabaseTableViewFieldOptions builder with application/json body
func NewUpdateDatabaseTableViewFieldOptionsRequest(server string, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableViewFieldOptionsRequestWithBody(server, viewId, params, "application/json", bodyReader)
}

// NewUpdateDatabaseTableViewFieldOptionsRequestWithFormdataBody calls the generic UpdateDatabaseTableViewFieldOptions builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableViewFieldOptionsRequestWithFormdataBody(server string, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableViewFieldOptionsRequestWithBody(server, viewId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableViewFieldOptionsRequestWithBody generates requests for UpdateDatabaseTableViewFieldOptions with any type of body
func NewUpdateDatabaseTableViewFieldOptionsRequestWithBody(server string, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/field-options/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTableViewFiltersRequest generates requests for ListDatabaseTableViewFilters
func NewListDatabaseTableViewFiltersRequest(server string, viewId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/filters/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableViewFilterRequest calls the generic CreateDatabaseTableViewFilter builder with application/json body
func NewCreateDatabaseTableViewFilterRequest(server string, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableViewFilterRequestWithBody(server, viewId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableViewFilterRequestWithFormdataBody calls the generic CreateDatabaseTableViewFilter builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableViewFilterRequestWithFormdataBody(server string, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableViewFilterRequestWithBody(server, viewId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableViewFilterRequestWithBody generates requests for CreateDatabaseTableViewFilter with any type of body
func NewCreateDatabaseTableViewFilterRequestWithBody(server string, viewId int, params *CreateDatabaseTableViewFilterParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/filters/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewRotateDatabaseViewSlugRequest generates requests for RotateDatabaseViewSlug
func NewRotateDatabaseViewSlugRequest(server string, viewId int, params *RotateDatabaseViewSlugParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/rotate-slug/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTableViewSortingsRequest generates requests for ListDatabaseTableViewSortings
func NewListDatabaseTableViewSortingsRequest(server string, viewId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/sortings/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableViewSortRequest calls the generic CreateDatabaseTableViewSort builder with application/json body
func NewCreateDatabaseTableViewSortRequest(server string, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableViewSortRequestWithBody(server, viewId, params, "application/json", bodyReader)
}

// NewCreateDatabaseTableViewSortRequestWithFormdataBody calls the generic CreateDatabaseTableViewSort builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableViewSortRequestWithFormdataBody(server string, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableViewSortRequestWithBody(server, viewId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableViewSortRequestWithBody generates requests for CreateDatabaseTableViewSort with any type of body
func NewCreateDatabaseTableViewSortRequestWithBody(server string, viewId int, params *CreateDatabaseTableViewSortParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view_id", runtime.ParamLocationPath, viewId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/views/%s/sortings/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListDatabaseTableWebhooksRequest generates requests for ListDatabaseTableWebhooks
func NewListDatabaseTableWebhooksRequest(server string, tableId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateDatabaseTableWebhookRequest calls the generic CreateDatabaseTableWebhook builder with application/json body
func NewCreateDatabaseTableWebhookRequest(server string, tableId int, body CreateDatabaseTableWebhookJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateDatabaseTableWebhookRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewCreateDatabaseTableWebhookRequestWithFormdataBody calls the generic CreateDatabaseTableWebhook builder with application/x-www-form-urlencoded body
func NewCreateDatabaseTableWebhookRequestWithFormdataBody(server string, tableId int, body CreateDatabaseTableWebhookFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateDatabaseTableWebhookRequestWithBody(server, tableId, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateDatabaseTableWebhookRequestWithBody generates requests for CreateDatabaseTableWebhook with any type of body
func NewCreateDatabaseTableWebhookRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/table/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewTestCallDatabaseTableWebhookRequest calls the generic TestCallDatabaseTableWebhook builder with application/json body
func NewTestCallDatabaseTableWebhookRequest(server string, tableId int, body TestCallDatabaseTableWebhookJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewTestCallDatabaseTableWebhookRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewTestCallDatabaseTableWebhookRequestWithFormdataBody calls the generic TestCallDatabaseTableWebhook builder with application/x-www-form-urlencoded body
func NewTestCallDatabaseTableWebhookRequestWithFormdataBody(server string, tableId int, body TestCallDatabaseTableWebhookFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewTestCallDatabaseTableWebhookRequestWithBody(server, tableId, "application/x-www-form-urlencoded", bodyReader)
}



// NewTestCallDatabaseTableWebhookRequestWithBody generates requests for TestCallDatabaseTableWebhook with any type of body
func NewTestCallDatabaseTableWebhookRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/table/%s/test-call/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteDatabaseTableWebhookRequest generates requests for DeleteDatabaseTableWebhook
func NewDeleteDatabaseTableWebhookRequest(server string, webhookId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhook_id", runtime.ParamLocationPath, webhookId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDatabaseTableWebhookRequest generates requests for GetDatabaseTableWebhook
func NewGetDatabaseTableWebhookRequest(server string, webhookId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhook_id", runtime.ParamLocationPath, webhookId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateDatabaseTableWebhookRequest calls the generic UpdateDatabaseTableWebhook builder with application/json body
func NewUpdateDatabaseTableWebhookRequest(server string, webhookId int, body UpdateDatabaseTableWebhookJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateDatabaseTableWebhookRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewUpdateDatabaseTableWebhookRequestWithFormdataBody calls the generic UpdateDatabaseTableWebhook builder with application/x-www-form-urlencoded body
func NewUpdateDatabaseTableWebhookRequestWithFormdataBody(server string, webhookId int, body UpdateDatabaseTableWebhookFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateDatabaseTableWebhookRequestWithBody(server, webhookId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateDatabaseTableWebhookRequestWithBody generates requests for UpdateDatabaseTableWebhook with any type of body
func NewUpdateDatabaseTableWebhookRequestWithBody(server string, webhookId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhook_id", runtime.ParamLocationPath, webhookId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/database/webhooks/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewListGroupsRequest generates requests for ListGroups
func NewListGroupsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateGroupRequest calls the generic CreateGroup builder with application/json body
func NewCreateGroupRequest(server string, params *CreateGroupParams, body CreateGroupJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateGroupRequestWithFormdataBody calls the generic CreateGroup builder with application/x-www-form-urlencoded body
func NewCreateGroupRequestWithFormdataBody(server string, params *CreateGroupParams, body CreateGroupFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateGroupRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateGroupRequestWithBody generates requests for CreateGroup with any type of body
func NewCreateGroupRequestWithBody(server string, params *CreateGroupParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewListGroupInvitationsRequest generates requests for ListGroupInvitations
func NewListGroupInvitationsRequest(server string, groupId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateGroupInvitationRequest calls the generic CreateGroupInvitation builder with application/json body
func NewCreateGroupInvitationRequest(server string, groupId int, body CreateGroupInvitationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateGroupInvitationRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewCreateGroupInvitationRequestWithFormdataBody calls the generic CreateGroupInvitation builder with application/x-www-form-urlencoded body
func NewCreateGroupInvitationRequestWithFormdataBody(server string, groupId int, body CreateGroupInvitationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateGroupInvitationRequestWithBody(server, groupId, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateGroupInvitationRequestWithBody generates requests for CreateGroupInvitation with any type of body
func NewCreateGroupInvitationRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetGroupInvitationByTokenRequest generates requests for GetGroupInvitationByToken
func NewGetGroupInvitationByTokenRequest(server string, token string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/token/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteGroupInvitationRequest generates requests for DeleteGroupInvitation
func NewDeleteGroupInvitationRequest(server string, groupInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_invitation_id", runtime.ParamLocationPath, groupInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetGroupInvitationRequest generates requests for GetGroupInvitation
func NewGetGroupInvitationRequest(server string, groupInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_invitation_id", runtime.ParamLocationPath, groupInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateGroupInvitationRequest calls the generic UpdateGroupInvitation builder with application/json body
func NewUpdateGroupInvitationRequest(server string, groupInvitationId int, body UpdateGroupInvitationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateGroupInvitationRequestWithBody(server, groupInvitationId, "application/json", bodyReader)
}

// NewUpdateGroupInvitationRequestWithFormdataBody calls the generic UpdateGroupInvitation builder with application/x-www-form-urlencoded body
func NewUpdateGroupInvitationRequestWithFormdataBody(server string, groupInvitationId int, body UpdateGroupInvitationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateGroupInvitationRequestWithBody(server, groupInvitationId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateGroupInvitationRequestWithBody generates requests for UpdateGroupInvitation with any type of body
func NewUpdateGroupInvitationRequestWithBody(server string, groupInvitationId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_invitation_id", runtime.ParamLocationPath, groupInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAcceptGroupInvitationRequest generates requests for AcceptGroupInvitation
func NewAcceptGroupInvitationRequest(server string, groupInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_invitation_id", runtime.ParamLocationPath, groupInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/%s/accept/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewRejectGroupInvitationRequest generates requests for RejectGroupInvitation
func NewRejectGroupInvitationRequest(server string, groupInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_invitation_id", runtime.ParamLocationPath, groupInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/invitations/%s/reject/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewOrderGroupsRequest calls the generic OrderGroups builder with application/json body
func NewOrderGroupsRequest(server string, params *OrderGroupsParams, body OrderGroupsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewOrderGroupsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewOrderGroupsRequestWithFormdataBody calls the generic OrderGroups builder with application/x-www-form-urlencoded body
func NewOrderGroupsRequestWithFormdataBody(server string, params *OrderGroupsParams, body OrderGroupsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewOrderGroupsRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewOrderGroupsRequestWithBody generates requests for OrderGroups with any type of body
func NewOrderGroupsRequestWithBody(server string, params *OrderGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/order/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListGroupUsersRequest generates requests for ListGroupUsers
func NewListGroupUsersRequest(server string, groupId int, params *ListGroupUsersParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/users/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteGroupUserRequest generates requests for DeleteGroupUser
func NewDeleteGroupUserRequest(server string, groupUserId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_user_id", runtime.ParamLocationPath, groupUserId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateGroupUserRequest calls the generic UpdateGroupUser builder with application/json body
func NewUpdateGroupUserRequest(server string, groupUserId int, body UpdateGroupUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateGroupUserRequestWithBody(server, groupUserId, "application/json", bodyReader)
}

// NewUpdateGroupUserRequestWithFormdataBody calls the generic UpdateGroupUser builder with application/x-www-form-urlencoded body
func NewUpdateGroupUserRequestWithFormdataBody(server string, groupUserId int, body UpdateGroupUserFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateGroupUserRequestWithBody(server, groupUserId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateGroupUserRequestWithBody generates requests for UpdateGroupUser with any type of body
func NewUpdateGroupUserRequestWithBody(server string, groupUserId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_user_id", runtime.ParamLocationPath, groupUserId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteGroupRequest generates requests for DeleteGroup
func NewDeleteGroupRequest(server string, groupId int, params *DeleteGroupParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewUpdateGroupRequest calls the generic UpdateGroup builder with application/json body
func NewUpdateGroupRequest(server string, groupId int, params *UpdateGroupParams, body UpdateGroupJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateGroupRequestWithBody(server, groupId, params, "application/json", bodyReader)
}

// NewUpdateGroupRequestWithFormdataBody calls the generic UpdateGroup builder with application/x-www-form-urlencoded body
func NewUpdateGroupRequestWithFormdataBody(server string, groupId int, params *UpdateGroupParams, body UpdateGroupFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateGroupRequestWithBody(server, groupId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateGroupRequestWithBody generates requests for UpdateGroup with any type of body
func NewUpdateGroupRequestWithBody(server string, groupId int, params *UpdateGroupParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewLeaveGroupRequest generates requests for LeaveGroup
func NewLeaveGroupRequest(server string, groupId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/%s/leave/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupPermissionsRequest generates requests for GroupPermissions
func NewGroupPermissionsRequest(server string, groupId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/groups/%s/permissions/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteApplicationIntegrationRequest generates requests for DeleteApplicationIntegration
func NewDeleteApplicationIntegrationRequest(server string, integrationId int, params *DeleteApplicationIntegrationParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/integration/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}



// NewUpdateApplicationIntegrationRequest calls the generic UpdateApplicationIntegration builder with application/json body
func NewUpdateApplicationIntegrationRequest(server string, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateApplicationIntegrationRequestWithBody(server, integrationId, params, "application/json", bodyReader)
}

// NewUpdateApplicationIntegrationRequestWithFormdataBody calls the generic UpdateApplicationIntegration builder with application/x-www-form-urlencoded body
func NewUpdateApplicationIntegrationRequestWithFormdataBody(server string, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateApplicationIntegrationRequestWithBody(server, integrationId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateApplicationIntegrationRequestWithBody generates requests for UpdateApplicationIntegration with any type of body
func NewUpdateApplicationIntegrationRequestWithBody(server string, integrationId int, params *UpdateApplicationIntegrationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/integration/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}



// NewMoveApplicationIntegrationRequest calls the generic MoveApplicationIntegration builder with application/json body
func NewMoveApplicationIntegrationRequest(server string, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewMoveApplicationIntegrationRequestWithBody(server, integrationId, params, "application/json", bodyReader)
}

// NewMoveApplicationIntegrationRequestWithFormdataBody calls the generic MoveApplicationIntegration builder with application/x-www-form-urlencoded body
func NewMoveApplicationIntegrationRequestWithFormdataBody(server string, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewMoveApplicationIntegrationRequestWithBody(server, integrationId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewMoveApplicationIntegrationRequestWithBody generates requests for MoveApplicationIntegration with any type of body
func NewMoveApplicationIntegrationRequestWithBody(server string, integrationId int, params *MoveApplicationIntegrationParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integration_id", runtime.ParamLocationPath, integrationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/integration/%s/move/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewListJobRequest generates requests for ListJob
func NewListJobRequest(server string, params *ListJobParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/jobs/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.JobIds != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_ids", runtime.ParamLocationQuery, *params.JobIds); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.States != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateJobRequest calls the generic CreateJob builder with application/json body
func NewCreateJobRequest(server string, body CreateJobJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJobRequestWithFormdataBody calls the generic CreateJob builder with application/x-www-form-urlencoded body
func NewCreateJobRequestWithFormdataBody(server string, body CreateJobFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateJobRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateJobRequestWithBody generates requests for CreateJob with any type of body
func NewCreateJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/jobs/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, jobId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/jobs/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminLicensesRequest generates requests for AdminLicenses
func NewAdminLicensesRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewAdminRegisterLicenseRequest calls the generic AdminRegisterLicense builder with application/json body
func NewAdminRegisterLicenseRequest(server string, body AdminRegisterLicenseJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewAdminRegisterLicenseRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminRegisterLicenseRequestWithFormdataBody calls the generic AdminRegisterLicense builder with application/x-www-form-urlencoded body
func NewAdminRegisterLicenseRequestWithFormdataBody(server string, body AdminRegisterLicenseFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewAdminRegisterLicenseRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewAdminRegisterLicenseRequestWithBody generates requests for AdminRegisterLicense with any type of body
func NewAdminRegisterLicenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAdminRemoveLicenseRequest generates requests for AdminRemoveLicense
func NewAdminRemoveLicenseRequest(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminGetLicenseRequest generates requests for AdminGetLicense
func NewAdminGetLicenseRequest(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminLicenseCheckRequest generates requests for AdminLicenseCheck
func NewAdminLicenseCheckRequest(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/check/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminFillRemainingSeatsOfLicenseRequest generates requests for AdminFillRemainingSeatsOfLicense
func NewAdminFillRemainingSeatsOfLicenseRequest(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/fill-seats/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminLicenseLookupUsersRequest generates requests for AdminLicenseLookupUsers
func NewAdminLicenseLookupUsersRequest(server string, id int, params *AdminLicenseLookupUsersParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/lookup-users/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminRemoveAllUsersFromLicenseRequest generates requests for AdminRemoveAllUsersFromLicense
func NewAdminRemoveAllUsersFromLicenseRequest(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/remove-all-users/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminRemoveUserFromLicenseRequest generates requests for AdminRemoveUserFromLicense
func NewAdminRemoveUserFromLicenseRequest(server string, id int, userId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAdminAddUserToLicenseRequest generates requests for AdminAddUserToLicense
func NewAdminAddUserToLicenseRequest(server string, id int, userId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/licenses/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupListRoleAssignmentsRequest generates requests for GroupListRoleAssignments
func NewGroupListRoleAssignmentsRequest(server string, groupId int, params *GroupListRoleAssignmentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ScopeId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id", runtime.ParamLocationQuery, *params.ScopeId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ScopeType != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_type", runtime.ParamLocationQuery, *params.ScopeType); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewGroupAssignRoleRequest calls the generic GroupAssignRole builder with application/json body
func NewGroupAssignRoleRequest(server string, groupId int, body GroupAssignRoleJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewGroupAssignRoleRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewGroupAssignRoleRequestWithFormdataBody calls the generic GroupAssignRole builder with application/x-www-form-urlencoded body
func NewGroupAssignRoleRequestWithFormdataBody(server string, groupId int, body GroupAssignRoleFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewGroupAssignRoleRequestWithBody(server, groupId, "application/x-www-form-urlencoded", bodyReader)
}



// NewGroupAssignRoleRequestWithBody generates requests for GroupAssignRole with any type of body
func NewGroupAssignRoleRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewGroupBatchAssignRoleRequest calls the generic GroupBatchAssignRole builder with application/json body
func NewGroupBatchAssignRoleRequest(server string, groupId int, body GroupBatchAssignRoleJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewGroupBatchAssignRoleRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewGroupBatchAssignRoleRequestWithFormdataBody calls the generic GroupBatchAssignRole builder with application/x-www-form-urlencoded body
func NewGroupBatchAssignRoleRequestWithFormdataBody(server string, groupId int, body GroupBatchAssignRoleFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewGroupBatchAssignRoleRequestWithBody(server, groupId, "application/x-www-form-urlencoded", bodyReader)
}



// NewGroupBatchAssignRoleRequestWithBody generates requests for GroupBatchAssignRole with any type of body
func NewGroupBatchAssignRoleRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/batch/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewListRoleAssignmentsRequest generates requests for ListRoleAssignments
func NewListRoleAssignmentsRequest(server string, workspaceId int, params *ListRoleAssignmentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ScopeId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id", runtime.ParamLocationQuery, *params.ScopeId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.ScopeType != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_type", runtime.ParamLocationQuery, *params.ScopeType); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewAssignRoleRequest calls the generic AssignRole builder with application/json body
func NewAssignRoleRequest(server string, workspaceId int, body AssignRoleJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewAssignRoleRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewAssignRoleRequestWithFormdataBody calls the generic AssignRole builder with application/x-www-form-urlencoded body
func NewAssignRoleRequestWithFormdataBody(server string, workspaceId int, body AssignRoleFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewAssignRoleRequestWithBody(server, workspaceId, "application/x-www-form-urlencoded", bodyReader)
}



// NewAssignRoleRequestWithBody generates requests for AssignRole with any type of body
func NewAssignRoleRequestWithBody(server string, workspaceId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewBatchAssignRoleRequest calls the generic BatchAssignRole builder with application/json body
func NewBatchAssignRoleRequest(server string, workspaceId int, body BatchAssignRoleJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewBatchAssignRoleRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewBatchAssignRoleRequestWithFormdataBody calls the generic BatchAssignRole builder with application/x-www-form-urlencoded body
func NewBatchAssignRoleRequestWithFormdataBody(server string, workspaceId int, body BatchAssignRoleFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewBatchAssignRoleRequestWithBody(server, workspaceId, "application/x-www-form-urlencoded", bodyReader)
}



// NewBatchAssignRoleRequestWithBody generates requests for BatchAssignRole with any type of body
func NewBatchAssignRoleRequestWithBody(server string, workspaceId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/role/%s/batch/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteRowCommentRequest generates requests for DeleteRowComment
func NewDeleteRowCommentRequest(server string, tableId int, commentId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/row_comments/%s/comment/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewUpdateRowCommentRequest generates requests for UpdateRowComment
func NewUpdateRowCommentRequest(server string, tableId int, commentId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/row_comments/%s/comment/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetRowCommentsRequest generates requests for GetRowComments
func NewGetRowCommentsRequest(server string, tableId int, rowId int, params *GetRowCommentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/row_comments/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Limit != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Offset != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Size != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateRowCommentRequest calls the generic CreateRowComment builder with application/json body
func NewCreateRowCommentRequest(server string, tableId int, rowId int, body CreateRowCommentJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateRowCommentRequestWithBody(server, tableId, rowId, "application/json", bodyReader)
}

// NewCreateRowCommentRequestWithFormdataBody calls the generic CreateRowComment builder with application/x-www-form-urlencoded body
func NewCreateRowCommentRequestWithFormdataBody(server string, tableId int, rowId int, body CreateRowCommentFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateRowCommentRequestWithBody(server, tableId, rowId, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateRowCommentRequestWithBody generates requests for CreateRowComment with any type of body
func NewCreateRowCommentRequestWithBody(server string, tableId int, rowId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table_id", runtime.ParamLocationPath, tableId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/row_comments/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsRequest generates requests for GetSettings
func NewGetSettingsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/settings/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetInstanceIdRequest generates requests for GetInstanceId
func NewGetInstanceIdRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/settings/instance-id/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateSettingsRequest calls the generic UpdateSettings builder with application/json body
func NewUpdateSettingsRequest(server string, body UpdateSettingsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSettingsRequestWithFormdataBody calls the generic UpdateSettings builder with application/x-www-form-urlencoded body
func NewUpdateSettingsRequestWithFormdataBody(server string, body UpdateSettingsFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateSettingsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateSettingsRequestWithBody generates requests for UpdateSettings with any type of body
func NewUpdateSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/settings/update/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewListSnapshotsRequest generates requests for ListSnapshots
func NewListSnapshotsRequest(server string, applicationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/snapshots/application/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateSnapshotRequest calls the generic CreateSnapshot builder with application/json body
func NewCreateSnapshotRequest(server string, applicationId int, body CreateSnapshotJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateSnapshotRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewCreateSnapshotRequestWithFormdataBody calls the generic CreateSnapshot builder with application/x-www-form-urlencoded body
func NewCreateSnapshotRequestWithFormdataBody(server string, applicationId int, body CreateSnapshotFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateSnapshotRequestWithBody(server, applicationId, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateSnapshotRequestWithBody generates requests for CreateSnapshot with any type of body
func NewCreateSnapshotRequestWithBody(server string, applicationId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/snapshots/application/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteSnapshotRequest generates requests for DeleteSnapshot
func NewDeleteSnapshotRequest(server string, snapshotId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/snapshots/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewRestoreSnapshotRequest generates requests for RestoreSnapshot
func NewRestoreSnapshotRequest(server string, snapshotId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/snapshots/%s/restore/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewOauthProviderLoginCallbackRequest generates requests for OauthProviderLoginCallback
func NewOauthProviderLoginCallbackRequest(server string, providerId int, params *OauthProviderLoginCallbackParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/sso/oauth2/callback/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Code != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewOauthProviderLoginRedirectRequest generates requests for OauthProviderLoginRedirect
func NewOauthProviderLoginRedirectRequest(server string, providerId int, params *OauthProviderLoginRedirectParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/sso/oauth2/login/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.GroupInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_invitation_token", runtime.ParamLocationQuery, *params.GroupInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Original != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original", runtime.ParamLocationQuery, *params.Original); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WorkspaceInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace_invitation_token", runtime.ParamLocationQuery, *params.WorkspaceInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewAuthProviderSamlAcsUrlRequest calls the generic AuthProviderSamlAcsUrl builder with application/json body
func NewAuthProviderSamlAcsUrlRequest(server string, body AuthProviderSamlAcsUrlJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewAuthProviderSamlAcsUrlRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthProviderSamlAcsUrlRequestWithFormdataBody calls the generic AuthProviderSamlAcsUrl builder with application/x-www-form-urlencoded body
func NewAuthProviderSamlAcsUrlRequestWithFormdataBody(server string, body AuthProviderSamlAcsUrlFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewAuthProviderSamlAcsUrlRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewAuthProviderSamlAcsUrlRequestWithBody generates requests for AuthProviderSamlAcsUrl with any type of body
func NewAuthProviderSamlAcsUrlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/sso/saml/acs/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAuthProviderLoginUrlRequest generates requests for AuthProviderLoginUrl
func NewAuthProviderLoginUrlRequest(server string, params *AuthProviderLoginUrlParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/sso/saml/login-url/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Email != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.GroupInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_invitation_token", runtime.ParamLocationQuery, *params.GroupInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Original != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original", runtime.ParamLocationQuery, *params.Original); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WorkspaceInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace_invitation_token", runtime.ParamLocationQuery, *params.WorkspaceInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewAuthProviderSamlSpLoginRequest generates requests for AuthProviderSamlSpLogin
func NewAuthProviderSamlSpLoginRequest(server string, params *AuthProviderSamlSpLoginParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/sso/saml/login/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Email != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.GroupInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_invitation_token", runtime.ParamLocationQuery, *params.GroupInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Original != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "original", runtime.ParamLocationQuery, *params.Original); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WorkspaceInvitationToken != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace_invitation_token", runtime.ParamLocationQuery, *params.WorkspaceInvitationToken); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupListTeamsRequest generates requests for GroupListTeams
func NewGroupListTeamsRequest(server string, groupId int, params *GroupListTeamsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewGroupCreateTeamRequest calls the generic GroupCreateTeam builder with application/json body
func NewGroupCreateTeamRequest(server string, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewGroupCreateTeamRequestWithBody(server, groupId, params, "application/json", bodyReader)
}

// NewGroupCreateTeamRequestWithFormdataBody calls the generic GroupCreateTeam builder with application/x-www-form-urlencoded body
func NewGroupCreateTeamRequestWithFormdataBody(server string, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewGroupCreateTeamRequestWithBody(server, groupId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewGroupCreateTeamRequestWithBody generates requests for GroupCreateTeam with any type of body
func NewGroupCreateTeamRequestWithBody(server string, groupId string, params *GroupCreateTeamParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewWorkspaceListTeamsRequest generates requests for WorkspaceListTeams
func NewWorkspaceListTeamsRequest(server string, workspaceId int, params *WorkspaceListTeamsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewWorkspaceCreateTeamRequest calls the generic WorkspaceCreateTeam builder with application/json body
func NewWorkspaceCreateTeamRequest(server string, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewWorkspaceCreateTeamRequestWithBody(server, workspaceId, params, "application/json", bodyReader)
}

// NewWorkspaceCreateTeamRequestWithFormdataBody calls the generic WorkspaceCreateTeam builder with application/x-www-form-urlencoded body
func NewWorkspaceCreateTeamRequestWithFormdataBody(server string, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewWorkspaceCreateTeamRequestWithBody(server, workspaceId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewWorkspaceCreateTeamRequestWithBody generates requests for WorkspaceCreateTeam with any type of body
func NewWorkspaceCreateTeamRequestWithBody(server string, workspaceId string, params *WorkspaceCreateTeamParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, teamId int, params *DeleteTeamParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, teamId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, teamId string, params *UpdateTeamParams, body UpdateTeamJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateTeamRequestWithBody(server, teamId, params, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithFormdataBody calls the generic UpdateTeam builder with application/x-www-form-urlencoded body
func NewUpdateTeamRequestWithFormdataBody(server string, teamId string, params *UpdateTeamParams, body UpdateTeamFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateTeamRequestWithBody(server, teamId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, teamId string, params *UpdateTeamParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewListTeamSubjectsRequest generates requests for ListTeamSubjects
func NewListTeamSubjectsRequest(server string, teamId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/subjects/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateSubjectRequest calls the generic CreateSubject builder with application/json body
func NewCreateSubjectRequest(server string, teamId string, params *CreateSubjectParams, body CreateSubjectJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateSubjectRequestWithBody(server, teamId, params, "application/json", bodyReader)
}

// NewCreateSubjectRequestWithFormdataBody calls the generic CreateSubject builder with application/x-www-form-urlencoded body
func NewCreateSubjectRequestWithFormdataBody(server string, teamId string, params *CreateSubjectParams, body CreateSubjectFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateSubjectRequestWithBody(server, teamId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateSubjectRequestWithBody generates requests for CreateSubject with any type of body
func NewCreateSubjectRequestWithBody(server string, teamId string, params *CreateSubjectParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/subjects/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewDeleteSubjectRequest generates requests for DeleteSubject
func NewDeleteSubjectRequest(server string, teamId int, subjectId int, params *DeleteSubjectParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject_id", runtime.ParamLocationPath, subjectId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/subjects/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewGetSubjectRequest generates requests for GetSubject
func NewGetSubjectRequest(server string, teamId string, subjectId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject_id", runtime.ParamLocationPath, subjectId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/teams/%s/subjects/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListTemplatesRequest generates requests for ListTemplates
func NewListTemplatesRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/templates/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupInstallTemplateRequest generates requests for GroupInstallTemplate
func NewGroupInstallTemplateRequest(server string, groupId int, templateId int, params *GroupInstallTemplateParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "template_id", runtime.ParamLocationPath, templateId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/templates/install/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGroupInstallTemplateAsyncRequest generates requests for GroupInstallTemplateAsync
func NewGroupInstallTemplateAsyncRequest(server string, groupId int, templateId int, params *GroupInstallTemplateAsyncParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "template_id", runtime.ParamLocationPath, templateId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/templates/install/%s/%s/async/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewInstallTemplateRequest generates requests for InstallTemplate
func NewInstallTemplateRequest(server string, workspaceId int, templateId int, params *InstallTemplateParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "template_id", runtime.ParamLocationPath, templateId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/templates/install/%s/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewInstallTemplateAsyncRequest generates requests for InstallTemplateAsync
func NewInstallTemplateAsyncRequest(server string, workspaceId int, templateId int, params *InstallTemplateAsyncParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "template_id", runtime.ParamLocationPath, templateId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/templates/install/%s/%s/async/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewGetTrashStructureRequest generates requests for GetTrashStructure
func NewGetTrashStructureRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupEmptyContentsRequest generates requests for GroupEmptyContents
func NewGroupEmptyContentsRequest(server string, groupId int, params *GroupEmptyContentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ApplicationId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_id", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGroupGetContentsRequest generates requests for GroupGetContents
func NewGroupGetContentsRequest(server string, groupId int, params *GroupGetContentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/group/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ApplicationId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_id", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewRestoreRequest calls the generic Restore builder with application/json body
func NewRestoreRequest(server string, body RestoreJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewRestoreRequestWithFormdataBody calls the generic Restore builder with application/x-www-form-urlencoded body
func NewRestoreRequestWithFormdataBody(server string, body RestoreFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewRestoreRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewRestoreRequestWithBody generates requests for Restore with any type of body
func NewRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/restore/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewWorkspaceEmptyContentsRequest generates requests for WorkspaceEmptyContents
func NewWorkspaceEmptyContentsRequest(server string, workspaceId int, params *WorkspaceEmptyContentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ApplicationId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_id", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewWorkspaceGetContentsRequest generates requests for WorkspaceGetContents
func NewWorkspaceGetContentsRequest(server string, workspaceId int, params *WorkspaceGetContentsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/trash/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.ApplicationId != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application_id", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewUploadFileRequest generates requests for UploadFile
func NewUploadFileRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user-files/upload-file/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUploadViaUrlRequest calls the generic UploadViaUrl builder with application/json body
func NewUploadViaUrlRequest(server string, body UploadViaUrlJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUploadViaUrlRequestWithBody(server, "application/json", bodyReader)
}

// NewUploadViaUrlRequestWithFormdataBody calls the generic UploadViaUrl builder with application/x-www-form-urlencoded body
func NewUploadViaUrlRequestWithFormdataBody(server string, body UploadViaUrlFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUploadViaUrlRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewUploadViaUrlRequestWithBody generates requests for UploadViaUrl with any type of body
func NewUploadViaUrlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user-files/upload-via-url/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithFormdataBody calls the generic CreateUser builder with application/x-www-form-urlencoded body
func NewCreateUserRequestWithFormdataBody(server string, body CreateUserFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateUserRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewUpdateAccountRequest calls the generic UpdateAccount builder with application/json body
func NewUpdateAccountRequest(server string, body UpdateAccountJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAccountRequestWithFormdataBody calls the generic UpdateAccount builder with application/x-www-form-urlencoded body
func NewUpdateAccountRequestWithFormdataBody(server string, body UpdateAccountFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateAccountRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateAccountRequestWithBody generates requests for UpdateAccount with any type of body
func NewUpdateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/account/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewChangePasswordRequest calls the generic ChangePassword builder with application/json body
func NewChangePasswordRequest(server string, body ChangePasswordJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordRequestWithFormdataBody calls the generic ChangePassword builder with application/x-www-form-urlencoded body
func NewChangePasswordRequestWithFormdataBody(server string, body ChangePasswordFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewChangePasswordRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewChangePasswordRequestWithBody generates requests for ChangePassword with any type of body
func NewChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/change-password/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDashboardRequest generates requests for Dashboard
func NewDashboardRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/dashboard/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewRedoRequest calls the generic Redo builder with application/json body
func NewRedoRequest(server string, params *RedoParams, body RedoJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewRedoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRedoRequestWithFormdataBody calls the generic Redo builder with application/x-www-form-urlencoded body
func NewRedoRequestWithFormdataBody(server string, params *RedoParams, body RedoFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewRedoRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewRedoRequestWithBody generates requests for Redo with any type of body
func NewRedoRequestWithBody(server string, params *RedoParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/redo/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

    
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    



    return req, nil
}



// NewResetPasswordRequest calls the generic ResetPassword builder with application/json body
func NewResetPasswordRequest(server string, body ResetPasswordJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewResetPasswordRequestWithFormdataBody calls the generic ResetPassword builder with application/x-www-form-urlencoded body
func NewResetPasswordRequestWithFormdataBody(server string, body ResetPasswordFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewResetPasswordRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewResetPasswordRequestWithBody generates requests for ResetPassword with any type of body
func NewResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/reset-password/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewScheduleAccountDeletionRequest generates requests for ScheduleAccountDeletion
func NewScheduleAccountDeletionRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/schedule-account-deletion/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewSendPasswordResetEmailRequest calls the generic SendPasswordResetEmail builder with application/json body
func NewSendPasswordResetEmailRequest(server string, body SendPasswordResetEmailJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewSendPasswordResetEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewSendPasswordResetEmailRequestWithFormdataBody calls the generic SendPasswordResetEmail builder with application/x-www-form-urlencoded body
func NewSendPasswordResetEmailRequestWithFormdataBody(server string, body SendPasswordResetEmailFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewSendPasswordResetEmailRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewSendPasswordResetEmailRequestWithBody generates requests for SendPasswordResetEmail with any type of body
func NewSendPasswordResetEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/send-reset-password-email/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewTokenAuthRequest calls the generic TokenAuth builder with application/json body
func NewTokenAuthRequest(server string, body TokenAuthJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewTokenAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenAuthRequestWithFormdataBody calls the generic TokenAuth builder with application/x-www-form-urlencoded body
func NewTokenAuthRequestWithFormdataBody(server string, body TokenAuthFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewTokenAuthRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewTokenAuthRequestWithBody generates requests for TokenAuth with any type of body
func NewTokenAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/token-auth/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewTokenRefreshRequest calls the generic TokenRefresh builder with application/json body
func NewTokenRefreshRequest(server string, body TokenRefreshJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewTokenRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenRefreshRequestWithFormdataBody calls the generic TokenRefresh builder with application/x-www-form-urlencoded body
func NewTokenRefreshRequestWithFormdataBody(server string, body TokenRefreshFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewTokenRefreshRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewTokenRefreshRequestWithBody generates requests for TokenRefresh with any type of body
func NewTokenRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/token-refresh/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewTokenVerifyRequest calls the generic TokenVerify builder with application/json body
func NewTokenVerifyRequest(server string, body TokenVerifyJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewTokenVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenVerifyRequestWithFormdataBody calls the generic TokenVerify builder with application/x-www-form-urlencoded body
func NewTokenVerifyRequestWithFormdataBody(server string, body TokenVerifyFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewTokenVerifyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}



// NewTokenVerifyRequestWithBody generates requests for TokenVerify with any type of body
func NewTokenVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/token-verify/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewUndoRequest calls the generic Undo builder with application/json body
func NewUndoRequest(server string, params *UndoParams, body UndoJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUndoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUndoRequestWithFormdataBody calls the generic Undo builder with application/x-www-form-urlencoded body
func NewUndoRequestWithFormdataBody(server string, params *UndoParams, body UndoFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUndoRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUndoRequestWithBody generates requests for Undo with any type of body
func NewUndoRequestWithBody(server string, params *UndoParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/user/undo/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

    
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    



    return req, nil
}




// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateWorkspaceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithFormdataBody calls the generic CreateWorkspace builder with application/x-www-form-urlencoded body
func NewCreateWorkspaceRequestWithFormdataBody(server string, params *CreateWorkspaceParams, body CreateWorkspaceFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateWorkspaceRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, params *CreateWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }



    return req, nil
}




// NewGetWorkspaceInvitationByTokenRequest generates requests for GetWorkspaceInvitationByToken
func NewGetWorkspaceInvitationByTokenRequest(server string, token string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/token/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewListWorkspaceInvitationsRequest generates requests for ListWorkspaceInvitations
func NewListWorkspaceInvitationsRequest(server string, workspaceId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewCreateWorkspaceInvitationRequest calls the generic CreateWorkspaceInvitation builder with application/json body
func NewCreateWorkspaceInvitationRequest(server string, workspaceId int, body CreateWorkspaceInvitationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewCreateWorkspaceInvitationRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewCreateWorkspaceInvitationRequestWithFormdataBody calls the generic CreateWorkspaceInvitation builder with application/x-www-form-urlencoded body
func NewCreateWorkspaceInvitationRequestWithFormdataBody(server string, workspaceId int, body CreateWorkspaceInvitationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewCreateWorkspaceInvitationRequestWithBody(server, workspaceId, "application/x-www-form-urlencoded", bodyReader)
}



// NewCreateWorkspaceInvitationRequestWithBody generates requests for CreateWorkspaceInvitation with any type of body
func NewCreateWorkspaceInvitationRequestWithBody(server string, workspaceId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteWorkspaceInvitationRequest generates requests for DeleteWorkspaceInvitation
func NewDeleteWorkspaceInvitationRequest(server string, workspaceInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_invitation_id", runtime.ParamLocationPath, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetWorkspaceInvitationRequest generates requests for GetWorkspaceInvitation
func NewGetWorkspaceInvitationRequest(server string, workspaceInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_invitation_id", runtime.ParamLocationPath, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateWorkspaceInvitationRequest calls the generic UpdateWorkspaceInvitation builder with application/json body
func NewUpdateWorkspaceInvitationRequest(server string, workspaceInvitationId int, body UpdateWorkspaceInvitationJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateWorkspaceInvitationRequestWithBody(server, workspaceInvitationId, "application/json", bodyReader)
}

// NewUpdateWorkspaceInvitationRequestWithFormdataBody calls the generic UpdateWorkspaceInvitation builder with application/x-www-form-urlencoded body
func NewUpdateWorkspaceInvitationRequestWithFormdataBody(server string, workspaceInvitationId int, body UpdateWorkspaceInvitationFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateWorkspaceInvitationRequestWithBody(server, workspaceInvitationId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateWorkspaceInvitationRequestWithBody generates requests for UpdateWorkspaceInvitation with any type of body
func NewUpdateWorkspaceInvitationRequestWithBody(server string, workspaceInvitationId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_invitation_id", runtime.ParamLocationPath, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewAcceptWorkspaceInvitationRequest generates requests for AcceptWorkspaceInvitation
func NewAcceptWorkspaceInvitationRequest(server string, workspaceInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_invitation_id", runtime.ParamLocationPath, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/%s/accept/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewRejectWorkspaceInvitationRequest generates requests for RejectWorkspaceInvitation
func NewRejectWorkspaceInvitationRequest(server string, workspaceInvitationId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_invitation_id", runtime.ParamLocationPath, workspaceInvitationId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/invitations/%s/reject/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewOrderWorkspacesRequest calls the generic OrderWorkspaces builder with application/json body
func NewOrderWorkspacesRequest(server string, params *OrderWorkspacesParams, body OrderWorkspacesJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewOrderWorkspacesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewOrderWorkspacesRequestWithFormdataBody calls the generic OrderWorkspaces builder with application/x-www-form-urlencoded body
func NewOrderWorkspacesRequestWithFormdataBody(server string, params *OrderWorkspacesParams, body OrderWorkspacesFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewOrderWorkspacesRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewOrderWorkspacesRequestWithBody generates requests for OrderWorkspaces with any type of body
func NewOrderWorkspacesRequestWithBody(server string, params *OrderWorkspacesParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/order/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewListWorkspaceUsersRequest generates requests for ListWorkspaceUsers
func NewListWorkspaceUsersRequest(server string, workspaceId int, params *ListWorkspaceUsersParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/users/workspace/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sorts != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteWorkspaceUserRequest generates requests for DeleteWorkspaceUser
func NewDeleteWorkspaceUserRequest(server string, workspaceUserId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_user_id", runtime.ParamLocationPath, workspaceUserId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewUpdateWorkspaceUserRequest calls the generic UpdateWorkspaceUser builder with application/json body
func NewUpdateWorkspaceUserRequest(server string, workspaceUserId int, body UpdateWorkspaceUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateWorkspaceUserRequestWithBody(server, workspaceUserId, "application/json", bodyReader)
}

// NewUpdateWorkspaceUserRequestWithFormdataBody calls the generic UpdateWorkspaceUser builder with application/x-www-form-urlencoded body
func NewUpdateWorkspaceUserRequestWithFormdataBody(server string, workspaceUserId int, body UpdateWorkspaceUserFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateWorkspaceUserRequestWithBody(server, workspaceUserId, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateWorkspaceUserRequestWithBody generates requests for UpdateWorkspaceUser with any type of body
func NewUpdateWorkspaceUserRequestWithBody(server string, workspaceUserId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_user_id", runtime.ParamLocationPath, workspaceUserId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/users/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, workspaceId int, params *DeleteWorkspaceParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}



// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewUpdateWorkspaceRequestWithBody(server, workspaceId, params, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithFormdataBody calls the generic UpdateWorkspace builder with application/x-www-form-urlencoded body
func NewUpdateWorkspaceRequestWithFormdataBody(server string, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceFormdataRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    bodyStr, err := runtime.MarshalForm(body, nil)
        if err != nil {
            return nil, err
        }
        bodyReader = strings.NewReader(bodyStr.Encode())
    return NewUpdateWorkspaceRequestWithBody(server, workspaceId, params, "application/x-www-form-urlencoded", bodyReader)
}



// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceId int, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PATCH", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)

     if params.ClientSessionId != nil { 
    var headerParam0 string
    
    
    
    headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ClientSessionId", runtime.ParamLocationHeader, *params.ClientSessionId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientSessionId", headerParam0)
    }

     if params.ClientUndoRedoActionGroupId != nil { 
    var headerParam1 string
    
    
    
    headerParam1, err = runtime.StyleParamWithLocation("simple", false, "ClientUndoRedoActionGroupId", runtime.ParamLocationHeader, *params.ClientUndoRedoActionGroupId)
    if err != nil {
        return nil, err
    }
    
    req.Header.Set("ClientUndoRedoActionGroupId", headerParam1)
    }



    return req, nil
}




// NewLeaveWorkspaceRequest generates requests for LeaveWorkspace
func NewLeaveWorkspaceRequest(server string, workspaceId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/%s/leave/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewWorkspacePermissionsRequest generates requests for WorkspacePermissions
func NewWorkspacePermissionsRequest(server string, workspaceId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace_id", runtime.ParamLocationPath, workspaceId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/api/workspaces/%s/permissions/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewCmsApiPagesRetrieveRequest generates requests for CmsApiPagesRetrieve
func NewCmsApiPagesRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/cms-api/pages/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainDocumentsRetrieveRequest generates requests for ExcludeEachCmsApiMainDocumentsRetrieve
func NewExcludeEachCmsApiMainDocumentsRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/documents/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainDocumentsFindRetrieveRequest generates requests for ExcludeEachCmsApiMainDocumentsFindRetrieve
func NewExcludeEachCmsApiMainDocumentsFindRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/documents/find/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainDocumentsRetrieve2Request generates requests for ExcludeEachCmsApiMainDocumentsRetrieve2
func NewExcludeEachCmsApiMainDocumentsRetrieve2Request(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/documents/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainImagesRetrieveRequest generates requests for ExcludeEachCmsApiMainImagesRetrieve
func NewExcludeEachCmsApiMainImagesRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/images/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainImagesFindRetrieveRequest generates requests for ExcludeEachCmsApiMainImagesFindRetrieve
func NewExcludeEachCmsApiMainImagesFindRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/images/find/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainImagesRetrieve2Request generates requests for ExcludeEachCmsApiMainImagesRetrieve2
func NewExcludeEachCmsApiMainImagesRetrieve2Request(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/images/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainPagesRetrieveRequest generates requests for ExcludeEachCmsApiMainPagesRetrieve
func NewExcludeEachCmsApiMainPagesRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/pages/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainPagesFindRetrieveRequest generates requests for ExcludeEachCmsApiMainPagesFindRetrieve
func NewExcludeEachCmsApiMainPagesFindRetrieveRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/pages/find/")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainPagesRetrieve2Request generates requests for ExcludeEachCmsApiMainPagesRetrieve2
func NewExcludeEachCmsApiMainPagesRetrieve2Request(server string, id int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/pages/%s/", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewExcludeEachCmsApiMainPagesActionCreateRequest generates requests for ExcludeEachCmsApiMainPagesActionCreate
func NewExcludeEachCmsApiMainPagesActionCreateRequest(server string, id int, actionName string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "action_name", runtime.ParamLocationPath, actionName)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/exclude_each_cms/api/main/pages/%s/action/%s/", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
    for _, r := range c.RequestEditors {
        if err := r(ctx, req); err != nil {
            return err
        }
    }
    for _, r := range additionalEditors {
        if err := r(ctx, req); err != nil {
            return err
        }
    }
    return nil
}
// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
    ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
    client, err := NewClient(server, opts...)
    if err != nil {
        return nil, err
    }
    return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
// EmailTester request with any body
    EmailTesterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*EmailTesterResponse, error)

    EmailTesterWithResponse(ctx context.Context, body EmailTesterJSONRequestBody, reqEditors... RequestEditorFn) (*EmailTesterResponse, error)
    
    EmailTesterWithFormdataBodyWithResponse(ctx context.Context, body EmailTesterFormdataRequestBody, reqEditors... RequestEditorFn) (*EmailTesterResponse, error)
    
    
// FullHealthCheck request
    FullHealthCheckWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*FullHealthCheckResponse, error)

// AdminAuditLog request
    AdminAuditLogWithResponse(ctx context.Context, params *AdminAuditLogParams, reqEditors... RequestEditorFn) (*AdminAuditLogResponse, error)

// AdminAuditLogTypes request
    AdminAuditLogTypesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminAuditLogTypesResponse, error)

// ExportAuditLog request with any body
    ExportAuditLogWithBodyWithResponse(ctx context.Context, params *ExportAuditLogParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error)

    ExportAuditLogWithResponse(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogJSONRequestBody, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error)
    
    ExportAuditLogWithFormdataBodyWithResponse(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogFormdataRequestBody, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error)
    
    
// AdminAuditLogUsers request
    AdminAuditLogUsersWithResponse(ctx context.Context, params *AdminAuditLogUsersParams, reqEditors... RequestEditorFn) (*AdminAuditLogUsersResponse, error)

// AdminAuditLogWorkspaces request
    AdminAuditLogWorkspacesWithResponse(ctx context.Context, params *AdminAuditLogWorkspacesParams, reqEditors... RequestEditorFn) (*AdminAuditLogWorkspacesResponse, error)

// ListAuthProviders request
    ListAuthProvidersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAuthProvidersResponse, error)

// CreateAuthProvider request
    CreateAuthProviderWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CreateAuthProviderResponse, error)

// DeleteAuthProvider request
    DeleteAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*DeleteAuthProviderResponse, error)

// GetAuthProvider request
    GetAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*GetAuthProviderResponse, error)

// UpdateAuthProvider request
    UpdateAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*UpdateAuthProviderResponse, error)

// AdminDashboard request
    AdminDashboardWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminDashboardResponse, error)

// AdminListGroups request
    AdminListGroupsWithResponse(ctx context.Context, params *AdminListGroupsParams, reqEditors... RequestEditorFn) (*AdminListGroupsResponse, error)

// AdminDeleteGroup request
    AdminDeleteGroupWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*AdminDeleteGroupResponse, error)

// AdminListUsers request
    AdminListUsersWithResponse(ctx context.Context, params *AdminListUsersParams, reqEditors... RequestEditorFn) (*AdminListUsersResponse, error)

// AdminImpersonateUser request with any body
    AdminImpersonateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error)

    AdminImpersonateUserWithResponse(ctx context.Context, body AdminImpersonateUserJSONRequestBody, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error)
    
    AdminImpersonateUserWithFormdataBodyWithResponse(ctx context.Context, body AdminImpersonateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error)
    
    
// AdminDeleteUser request
    AdminDeleteUserWithResponse(ctx context.Context, userId int, reqEditors... RequestEditorFn) (*AdminDeleteUserResponse, error)

// AdminEditUser request with any body
    AdminEditUserWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error)

    AdminEditUserWithResponse(ctx context.Context, userId int, body AdminEditUserJSONRequestBody, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error)
    
    AdminEditUserWithFormdataBodyWithResponse(ctx context.Context, userId int, body AdminEditUserFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error)
    
    
// AdminListWorkspaces request
    AdminListWorkspacesWithResponse(ctx context.Context, params *AdminListWorkspacesParams, reqEditors... RequestEditorFn) (*AdminListWorkspacesResponse, error)

// AdminDeleteWorkspace request
    AdminDeleteWorkspaceWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*AdminDeleteWorkspaceResponse, error)

// ListApplicationIntegrations request
    ListApplicationIntegrationsWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*ListApplicationIntegrationsResponse, error)

// CreateApplicationIntegration request with any body
    CreateApplicationIntegrationWithBodyWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error)

    CreateApplicationIntegrationWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error)
    
    CreateApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error)
    
    
// ListAllApplications request
    ListAllApplicationsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAllApplicationsResponse, error)

// GroupListApplications request
    GroupListApplicationsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*GroupListApplicationsResponse, error)

// GroupCreateApplication request with any body
    GroupCreateApplicationWithBodyWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error)

    GroupCreateApplicationWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error)
    
    GroupCreateApplicationWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error)
    
    
// GroupOrderApplications request with any body
    GroupOrderApplicationsWithBodyWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error)

    GroupOrderApplicationsWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error)
    
    GroupOrderApplicationsWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error)
    
    
// WorkspaceListApplications request
    WorkspaceListApplicationsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*WorkspaceListApplicationsResponse, error)

// WorkspaceCreateApplication request with any body
    WorkspaceCreateApplicationWithBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error)

    WorkspaceCreateApplicationWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error)
    
    WorkspaceCreateApplicationWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error)
    
    
// WorkspaceOrderApplications request with any body
    WorkspaceOrderApplicationsWithBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error)

    WorkspaceOrderApplicationsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error)
    
    WorkspaceOrderApplicationsWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error)
    
    
// DeleteApplication request
    DeleteApplicationWithResponse(ctx context.Context, applicationId int, params *DeleteApplicationParams, reqEditors... RequestEditorFn) (*DeleteApplicationResponse, error)

// WorkspaceGetApplication request
    WorkspaceGetApplicationWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*WorkspaceGetApplicationResponse, error)

// UpdateApplication request with any body
    UpdateApplicationWithBodyWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error)

    UpdateApplicationWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error)
    
    UpdateApplicationWithFormdataBodyWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error)
    
    
// DuplicateApplicationAsync request
    DuplicateApplicationAsyncWithResponse(ctx context.Context, applicationId int, params *DuplicateApplicationAsyncParams, reqEditors... RequestEditorFn) (*DuplicateApplicationAsyncResponse, error)

// ListAuthProvidersLoginOptions request
    ListAuthProvidersLoginOptionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAuthProvidersLoginOptionsResponse, error)

// ExportTable request with any body
    ExportTableWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ExportTableResponse, error)

    ExportTableWithResponse(ctx context.Context, tableId int, body ExportTableJSONRequestBody, reqEditors... RequestEditorFn) (*ExportTableResponse, error)
    
    ExportTableWithFormdataBodyWithResponse(ctx context.Context, tableId int, body ExportTableFormdataRequestBody, reqEditors... RequestEditorFn) (*ExportTableResponse, error)
    
    
// GetExportJob request
    GetExportJobWithResponse(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*GetExportJobResponse, error)

// ListDatabaseTableFields request
    ListDatabaseTableFieldsWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*ListDatabaseTableFieldsResponse, error)

// CreateDatabaseTableField request with any body
    CreateDatabaseTableFieldWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error)

    CreateDatabaseTableFieldWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error)
    
    CreateDatabaseTableFieldWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error)
    
    
// DeleteDatabaseTableField request
    DeleteDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, params *DeleteDatabaseTableFieldParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableFieldResponse, error)

// GetDatabaseTableField request
    GetDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, reqEditors... RequestEditorFn) (*GetDatabaseTableFieldResponse, error)

// UpdateDatabaseTableField request with any body
    UpdateDatabaseTableFieldWithBodyWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error)

    UpdateDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error)
    
    UpdateDatabaseTableFieldWithFormdataBodyWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error)
    
    
// DuplicateTableField request
    DuplicateTableFieldWithResponse(ctx context.Context, fieldId int, params *DuplicateTableFieldParams, reqEditors... RequestEditorFn) (*DuplicateTableFieldResponse, error)

// GetDatabaseFieldUniqueRowValues request
    GetDatabaseFieldUniqueRowValuesWithResponse(ctx context.Context, fieldId int, params *GetDatabaseFieldUniqueRowValuesParams, reqEditors... RequestEditorFn) (*GetDatabaseFieldUniqueRowValuesResponse, error)

// TypeFormulaField request with any body
    TypeFormulaFieldWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error)

    TypeFormulaFieldWithResponse(ctx context.Context, tableId int, body TypeFormulaFieldJSONRequestBody, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error)
    
    TypeFormulaFieldWithFormdataBodyWithResponse(ctx context.Context, tableId int, body TypeFormulaFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error)
    
    
// ListDatabaseTableRowNames request
    ListDatabaseTableRowNamesWithResponse(ctx context.Context, params *ListDatabaseTableRowNamesParams, reqEditors... RequestEditorFn) (*ListDatabaseTableRowNamesResponse, error)

// ListDatabaseTableRows request
    ListDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *ListDatabaseTableRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableRowsResponse, error)

// CreateDatabaseTableRow request with any body
    CreateDatabaseTableRowWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error)

    CreateDatabaseTableRowWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error)
    
    CreateDatabaseTableRowWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error)
    
    
// BatchDeleteDatabaseTableRows request with any body
    BatchDeleteDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error)

    BatchDeleteDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error)
    
    BatchDeleteDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error)
    
    
// BatchUpdateDatabaseTableRows request with any body
    BatchUpdateDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error)

    BatchUpdateDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error)
    
    BatchUpdateDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error)
    
    
// BatchCreateDatabaseTableRows request with any body
    BatchCreateDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error)

    BatchCreateDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error)
    
    BatchCreateDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error)
    
    
// DeleteDatabaseTableRow request
    DeleteDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *DeleteDatabaseTableRowParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableRowResponse, error)

// GetDatabaseTableRow request
    GetDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *GetDatabaseTableRowParams, reqEditors... RequestEditorFn) (*GetDatabaseTableRowResponse, error)

// UpdateDatabaseTableRow request with any body
    UpdateDatabaseTableRowWithBodyWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error)

    UpdateDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error)
    
    UpdateDatabaseTableRowWithFormdataBodyWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error)
    
    
// GetAdjacentDatabaseTableRow request
    GetAdjacentDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *GetAdjacentDatabaseTableRowParams, reqEditors... RequestEditorFn) (*GetAdjacentDatabaseTableRowResponse, error)

// MoveDatabaseTableRow request
    MoveDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *MoveDatabaseTableRowParams, reqEditors... RequestEditorFn) (*MoveDatabaseTableRowResponse, error)

// ListDatabaseTables request
    ListDatabaseTablesWithResponse(ctx context.Context, databaseId int, reqEditors... RequestEditorFn) (*ListDatabaseTablesResponse, error)

// CreateDatabaseTable request with any body
    CreateDatabaseTableWithBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error)

    CreateDatabaseTableWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error)
    
    CreateDatabaseTableWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error)
    
    
// CreateDatabaseTableAsync request with any body
    CreateDatabaseTableAsyncWithBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error)

    CreateDatabaseTableAsyncWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error)
    
    CreateDatabaseTableAsyncWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error)
    
    
// OrderDatabaseTables request with any body
    OrderDatabaseTablesWithBodyWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error)

    OrderDatabaseTablesWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesJSONRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error)
    
    OrderDatabaseTablesWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error)
    
    
// DeleteDatabaseTable request
    DeleteDatabaseTableWithResponse(ctx context.Context, tableId int, params *DeleteDatabaseTableParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableResponse, error)

// GetDatabaseTable request
    GetDatabaseTableWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*GetDatabaseTableResponse, error)

// UpdateDatabaseTable request with any body
    UpdateDatabaseTableWithBodyWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error)

    UpdateDatabaseTableWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error)
    
    UpdateDatabaseTableWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error)
    
    
// DuplicateDatabaseTableAsync request
    DuplicateDatabaseTableAsyncWithResponse(ctx context.Context, tableId int, params *DuplicateDatabaseTableAsyncParams, reqEditors... RequestEditorFn) (*DuplicateDatabaseTableAsyncResponse, error)

// ImportDataDatabaseTableAsync request with any body
    ImportDataDatabaseTableAsyncWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error)

    ImportDataDatabaseTableAsyncWithResponse(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error)
    
    ImportDataDatabaseTableAsyncWithFormdataBodyWithResponse(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error)
    
    
// ListDatabaseTokens request
    ListDatabaseTokensWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListDatabaseTokensResponse, error)

// CreateDatabaseToken request with any body
    CreateDatabaseTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error)

    CreateDatabaseTokenWithResponse(ctx context.Context, body CreateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error)
    
    CreateDatabaseTokenWithFormdataBodyWithResponse(ctx context.Context, body CreateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error)
    
    
// CheckDatabaseToken request
    CheckDatabaseTokenWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CheckDatabaseTokenResponse, error)

// DeleteDatabaseToken request
    DeleteDatabaseTokenWithResponse(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*DeleteDatabaseTokenResponse, error)

// GetDatabaseToken request
    GetDatabaseTokenWithResponse(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*GetDatabaseTokenResponse, error)

// UpdateDatabaseToken request with any body
    UpdateDatabaseTokenWithBodyWithResponse(ctx context.Context, tokenId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error)

    UpdateDatabaseTokenWithResponse(ctx context.Context, tokenId int, body UpdateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error)
    
    UpdateDatabaseTokenWithFormdataBodyWithResponse(ctx context.Context, tokenId int, body UpdateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error)
    
    
// PremiumViewAttributesUpdate request with any body
    PremiumViewAttributesUpdateWithBodyWithResponse(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error)

    PremiumViewAttributesUpdateWithResponse(ctx context.Context, viewId int, body PremiumViewAttributesUpdateJSONRequestBody, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error)
    
    PremiumViewAttributesUpdateWithFormdataBodyWithResponse(ctx context.Context, viewId int, body PremiumViewAttributesUpdateFormdataRequestBody, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error)
    
    
// PublicListDatabaseTableCalendarViewRows request
    PublicListDatabaseTableCalendarViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableCalendarViewRowsResponse, error)

// ListDatabaseTableCalendarViewRows request
    ListDatabaseTableCalendarViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableCalendarViewRowsResponse, error)

// DeleteDatabaseTableViewDecoration request
    DeleteDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, params *DeleteDatabaseTableViewDecorationParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewDecorationResponse, error)

// GetDatabaseTableViewDecoration request
    GetDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewDecorationResponse, error)

// UpdateDatabaseTableViewDecoration request with any body
    UpdateDatabaseTableViewDecorationWithBodyWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error)

    UpdateDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error)
    
    UpdateDatabaseTableViewDecorationWithFormdataBodyWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error)
    
    
// DeleteDatabaseTableViewFilter request
    DeleteDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, params *DeleteDatabaseTableViewFilterParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewFilterResponse, error)

// GetDatabaseTableViewFilter request
    GetDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewFilterResponse, error)

// UpdateDatabaseTableViewFilter request with any body
    UpdateDatabaseTableViewFilterWithBodyWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error)

    UpdateDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error)
    
    UpdateDatabaseTableViewFilterWithFormdataBodyWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error)
    
    
// GetMetaDatabaseTableFormView request
    GetMetaDatabaseTableFormViewWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*GetMetaDatabaseTableFormViewResponse, error)

// SubmitDatabaseTableFormView request with any body
    SubmitDatabaseTableFormViewWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error)

    SubmitDatabaseTableFormViewWithResponse(ctx context.Context, slug string, body SubmitDatabaseTableFormViewJSONRequestBody, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error)
    
    SubmitDatabaseTableFormViewWithFormdataBodyWithResponse(ctx context.Context, slug string, body SubmitDatabaseTableFormViewFormdataRequestBody, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error)
    
    
// UploadFileFormView request
    UploadFileFormViewWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*UploadFileFormViewResponse, error)

// PublicListDatabaseTableGalleryViewRows request
    PublicListDatabaseTableGalleryViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableGalleryViewRowsResponse, error)

// ListDatabaseTableGalleryViewRows request
    ListDatabaseTableGalleryViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableGalleryViewRowsResponse, error)

// PublicListDatabaseTableGridViewRows request
    PublicListDatabaseTableGridViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableGridViewRowsResponse, error)

// ListDatabaseTableGridViewRows request
    ListDatabaseTableGridViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableGridViewRowsResponse, error)

// FilterDatabaseTableGridViewRows request with any body
    FilterDatabaseTableGridViewRowsWithBodyWithResponse(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error)

    FilterDatabaseTableGridViewRowsWithResponse(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsJSONRequestBody, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error)
    
    FilterDatabaseTableGridViewRowsWithFormdataBodyWithResponse(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error)
    
    
// GetDatabaseTableGridViewFieldAggregation request
    GetDatabaseTableGridViewFieldAggregationWithResponse(ctx context.Context, viewId int, fieldId int, params *GetDatabaseTableGridViewFieldAggregationParams, reqEditors... RequestEditorFn) (*GetDatabaseTableGridViewFieldAggregationResponse, error)

// GetDatabaseTableGridViewFieldAggregations request
    GetDatabaseTableGridViewFieldAggregationsWithResponse(ctx context.Context, viewId int, params *GetDatabaseTableGridViewFieldAggregationsParams, reqEditors... RequestEditorFn) (*GetDatabaseTableGridViewFieldAggregationsResponse, error)

// PublicListDatabaseTableKanbanViewRows request
    PublicListDatabaseTableKanbanViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableKanbanViewRowsResponse, error)

// ListDatabaseTableKanbanViewRows request
    ListDatabaseTableKanbanViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableKanbanViewRowsResponse, error)

// DeleteDatabaseTableViewSort request
    DeleteDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, params *DeleteDatabaseTableViewSortParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewSortResponse, error)

// GetDatabaseTableViewSort request
    GetDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewSortResponse, error)

// UpdateDatabaseTableViewSort request with any body
    UpdateDatabaseTableViewSortWithBodyWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error)

    UpdateDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error)
    
    UpdateDatabaseTableViewSortWithFormdataBodyWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error)
    
    
// ListDatabaseTableViews request
    ListDatabaseTableViewsWithResponse(ctx context.Context, tableId int, params *ListDatabaseTableViewsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableViewsResponse, error)

// CreateDatabaseTableView request with any body
    CreateDatabaseTableViewWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error)

    CreateDatabaseTableViewWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error)
    
    CreateDatabaseTableViewWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error)
    
    
// OrderDatabaseTableViews request with any body
    OrderDatabaseTableViewsWithBodyWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error)

    OrderDatabaseTableViewsWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsJSONRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error)
    
    OrderDatabaseTableViewsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error)
    
    
// DatabaseTablePublicViewLinkRowFieldLookup request
    DatabaseTablePublicViewLinkRowFieldLookupWithResponse(ctx context.Context, slug string, fieldId int, reqEditors... RequestEditorFn) (*DatabaseTablePublicViewLinkRowFieldLookupResponse, error)

// PublicViewTokenAuth request with any body
    PublicViewTokenAuthWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error)

    PublicViewTokenAuthWithResponse(ctx context.Context, slug string, body PublicViewTokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error)
    
    PublicViewTokenAuthWithFormdataBodyWithResponse(ctx context.Context, slug string, body PublicViewTokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error)
    
    
// GetPublicViewInfo request
    GetPublicViewInfoWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*GetPublicViewInfoResponse, error)

// DeleteDatabaseTableView request
    DeleteDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *DeleteDatabaseTableViewParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewResponse, error)

// GetDatabaseTableView request
    GetDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *GetDatabaseTableViewParams, reqEditors... RequestEditorFn) (*GetDatabaseTableViewResponse, error)

// UpdateDatabaseTableView request with any body
    UpdateDatabaseTableViewWithBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error)

    UpdateDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error)
    
    UpdateDatabaseTableViewWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error)
    
    
// ListDatabaseTableViewDecorations request
    ListDatabaseTableViewDecorationsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewDecorationsResponse, error)

// CreateDatabaseTableViewDecoration request with any body
    CreateDatabaseTableViewDecorationWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error)

    CreateDatabaseTableViewDecorationWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error)
    
    CreateDatabaseTableViewDecorationWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error)
    
    
// DuplicateDatabaseTableView request
    DuplicateDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *DuplicateDatabaseTableViewParams, reqEditors... RequestEditorFn) (*DuplicateDatabaseTableViewResponse, error)

// GetDatabaseTableViewFieldOptions request
    GetDatabaseTableViewFieldOptionsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewFieldOptionsResponse, error)

// UpdateDatabaseTableViewFieldOptions request with any body
    UpdateDatabaseTableViewFieldOptionsWithBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error)

    UpdateDatabaseTableViewFieldOptionsWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error)
    
    UpdateDatabaseTableViewFieldOptionsWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error)
    
    
// ListDatabaseTableViewFilters request
    ListDatabaseTableViewFiltersWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewFiltersResponse, error)

// CreateDatabaseTableViewFilter request with any body
    CreateDatabaseTableViewFilterWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error)

    CreateDatabaseTableViewFilterWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error)
    
    CreateDatabaseTableViewFilterWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error)
    
    
// RotateDatabaseViewSlug request
    RotateDatabaseViewSlugWithResponse(ctx context.Context, viewId int, params *RotateDatabaseViewSlugParams, reqEditors... RequestEditorFn) (*RotateDatabaseViewSlugResponse, error)

// ListDatabaseTableViewSortings request
    ListDatabaseTableViewSortingsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewSortingsResponse, error)

// CreateDatabaseTableViewSort request with any body
    CreateDatabaseTableViewSortWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error)

    CreateDatabaseTableViewSortWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error)
    
    CreateDatabaseTableViewSortWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error)
    
    
// ListDatabaseTableWebhooks request
    ListDatabaseTableWebhooksWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*ListDatabaseTableWebhooksResponse, error)

// CreateDatabaseTableWebhook request with any body
    CreateDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error)

    CreateDatabaseTableWebhookWithResponse(ctx context.Context, tableId int, body CreateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error)
    
    CreateDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, tableId int, body CreateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error)
    
    
// TestCallDatabaseTableWebhook request with any body
    TestCallDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error)

    TestCallDatabaseTableWebhookWithResponse(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error)
    
    TestCallDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error)
    
    
// DeleteDatabaseTableWebhook request
    DeleteDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*DeleteDatabaseTableWebhookResponse, error)

// GetDatabaseTableWebhook request
    GetDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*GetDatabaseTableWebhookResponse, error)

// UpdateDatabaseTableWebhook request with any body
    UpdateDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, webhookId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error)

    UpdateDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error)
    
    UpdateDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error)
    
    
// ListGroups request
    ListGroupsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListGroupsResponse, error)

// CreateGroup request with any body
    CreateGroupWithBodyWithResponse(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateGroupResponse, error)

    CreateGroupWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*CreateGroupResponse, error)
    
    CreateGroupWithFormdataBodyWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateGroupResponse, error)
    
    
// ListGroupInvitations request
    ListGroupInvitationsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*ListGroupInvitationsResponse, error)

// CreateGroupInvitation request with any body
    CreateGroupInvitationWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error)

    CreateGroupInvitationWithResponse(ctx context.Context, groupId int, body CreateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error)
    
    CreateGroupInvitationWithFormdataBodyWithResponse(ctx context.Context, groupId int, body CreateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error)
    
    
// GetGroupInvitationByToken request
    GetGroupInvitationByTokenWithResponse(ctx context.Context, token string, reqEditors... RequestEditorFn) (*GetGroupInvitationByTokenResponse, error)

// DeleteGroupInvitation request
    DeleteGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*DeleteGroupInvitationResponse, error)

// GetGroupInvitation request
    GetGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*GetGroupInvitationResponse, error)

// UpdateGroupInvitation request with any body
    UpdateGroupInvitationWithBodyWithResponse(ctx context.Context, groupInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error)

    UpdateGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error)
    
    UpdateGroupInvitationWithFormdataBodyWithResponse(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error)
    
    
// AcceptGroupInvitation request
    AcceptGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*AcceptGroupInvitationResponse, error)

// RejectGroupInvitation request
    RejectGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*RejectGroupInvitationResponse, error)

// OrderGroups request with any body
    OrderGroupsWithBodyWithResponse(ctx context.Context, params *OrderGroupsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error)

    OrderGroupsWithResponse(ctx context.Context, params *OrderGroupsParams, body OrderGroupsJSONRequestBody, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error)
    
    OrderGroupsWithFormdataBodyWithResponse(ctx context.Context, params *OrderGroupsParams, body OrderGroupsFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error)
    
    
// ListGroupUsers request
    ListGroupUsersWithResponse(ctx context.Context, groupId int, params *ListGroupUsersParams, reqEditors... RequestEditorFn) (*ListGroupUsersResponse, error)

// DeleteGroupUser request
    DeleteGroupUserWithResponse(ctx context.Context, groupUserId int, reqEditors... RequestEditorFn) (*DeleteGroupUserResponse, error)

// UpdateGroupUser request with any body
    UpdateGroupUserWithBodyWithResponse(ctx context.Context, groupUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error)

    UpdateGroupUserWithResponse(ctx context.Context, groupUserId int, body UpdateGroupUserJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error)
    
    UpdateGroupUserWithFormdataBodyWithResponse(ctx context.Context, groupUserId int, body UpdateGroupUserFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error)
    
    
// DeleteGroup request
    DeleteGroupWithResponse(ctx context.Context, groupId int, params *DeleteGroupParams, reqEditors... RequestEditorFn) (*DeleteGroupResponse, error)

// UpdateGroup request with any body
    UpdateGroupWithBodyWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error)

    UpdateGroupWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error)
    
    UpdateGroupWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error)
    
    
// LeaveGroup request
    LeaveGroupWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*LeaveGroupResponse, error)

// GroupPermissions request
    GroupPermissionsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*GroupPermissionsResponse, error)

// DeleteApplicationIntegration request
    DeleteApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *DeleteApplicationIntegrationParams, reqEditors... RequestEditorFn) (*DeleteApplicationIntegrationResponse, error)

// UpdateApplicationIntegration request with any body
    UpdateApplicationIntegrationWithBodyWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error)

    UpdateApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error)
    
    UpdateApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error)
    
    
// MoveApplicationIntegration request with any body
    MoveApplicationIntegrationWithBodyWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error)

    MoveApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error)
    
    MoveApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error)
    
    
// ListJob request
    ListJobWithResponse(ctx context.Context, params *ListJobParams, reqEditors... RequestEditorFn) (*ListJobResponse, error)

// CreateJob request with any body
    CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateJobResponse, error)

    CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors... RequestEditorFn) (*CreateJobResponse, error)
    
    CreateJobWithFormdataBodyWithResponse(ctx context.Context, body CreateJobFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateJobResponse, error)
    
    
// GetJob request
    GetJobWithResponse(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*GetJobResponse, error)

// AdminLicenses request
    AdminLicensesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminLicensesResponse, error)

// AdminRegisterLicense request with any body
    AdminRegisterLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error)

    AdminRegisterLicenseWithResponse(ctx context.Context, body AdminRegisterLicenseJSONRequestBody, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error)
    
    AdminRegisterLicenseWithFormdataBodyWithResponse(ctx context.Context, body AdminRegisterLicenseFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error)
    
    
// AdminRemoveLicense request
    AdminRemoveLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminRemoveLicenseResponse, error)

// AdminGetLicense request
    AdminGetLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminGetLicenseResponse, error)

// AdminLicenseCheck request
    AdminLicenseCheckWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminLicenseCheckResponse, error)

// AdminFillRemainingSeatsOfLicense request
    AdminFillRemainingSeatsOfLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminFillRemainingSeatsOfLicenseResponse, error)

// AdminLicenseLookupUsers request
    AdminLicenseLookupUsersWithResponse(ctx context.Context, id int, params *AdminLicenseLookupUsersParams, reqEditors... RequestEditorFn) (*AdminLicenseLookupUsersResponse, error)

// AdminRemoveAllUsersFromLicense request
    AdminRemoveAllUsersFromLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminRemoveAllUsersFromLicenseResponse, error)

// AdminRemoveUserFromLicense request
    AdminRemoveUserFromLicenseWithResponse(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*AdminRemoveUserFromLicenseResponse, error)

// AdminAddUserToLicense request
    AdminAddUserToLicenseWithResponse(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*AdminAddUserToLicenseResponse, error)

// GroupListRoleAssignments request
    GroupListRoleAssignmentsWithResponse(ctx context.Context, groupId int, params *GroupListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*GroupListRoleAssignmentsResponse, error)

// GroupAssignRole request with any body
    GroupAssignRoleWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error)

    GroupAssignRoleWithResponse(ctx context.Context, groupId int, body GroupAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error)
    
    GroupAssignRoleWithFormdataBodyWithResponse(ctx context.Context, groupId int, body GroupAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error)
    
    
// GroupBatchAssignRole request with any body
    GroupBatchAssignRoleWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error)

    GroupBatchAssignRoleWithResponse(ctx context.Context, groupId int, body GroupBatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error)
    
    GroupBatchAssignRoleWithFormdataBodyWithResponse(ctx context.Context, groupId int, body GroupBatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error)
    
    
// ListRoleAssignments request
    ListRoleAssignmentsWithResponse(ctx context.Context, workspaceId int, params *ListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*ListRoleAssignmentsResponse, error)

// AssignRole request with any body
    AssignRoleWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AssignRoleResponse, error)

    AssignRoleWithResponse(ctx context.Context, workspaceId int, body AssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*AssignRoleResponse, error)
    
    AssignRoleWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body AssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*AssignRoleResponse, error)
    
    
// BatchAssignRole request with any body
    BatchAssignRoleWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error)

    BatchAssignRoleWithResponse(ctx context.Context, workspaceId int, body BatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error)
    
    BatchAssignRoleWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body BatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error)
    
    
// DeleteRowComment request
    DeleteRowCommentWithResponse(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*DeleteRowCommentResponse, error)

// UpdateRowComment request
    UpdateRowCommentWithResponse(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*UpdateRowCommentResponse, error)

// GetRowComments request
    GetRowCommentsWithResponse(ctx context.Context, tableId int, rowId int, params *GetRowCommentsParams, reqEditors... RequestEditorFn) (*GetRowCommentsResponse, error)

// CreateRowComment request with any body
    CreateRowCommentWithBodyWithResponse(ctx context.Context, tableId int, rowId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error)

    CreateRowCommentWithResponse(ctx context.Context, tableId int, rowId int, body CreateRowCommentJSONRequestBody, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error)
    
    CreateRowCommentWithFormdataBodyWithResponse(ctx context.Context, tableId int, rowId int, body CreateRowCommentFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error)
    
    
// GetSettings request
    GetSettingsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsResponse, error)

// GetInstanceId request
    GetInstanceIdWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetInstanceIdResponse, error)

// UpdateSettings request with any body
    UpdateSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error)

    UpdateSettingsWithResponse(ctx context.Context, body UpdateSettingsJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error)
    
    UpdateSettingsWithFormdataBodyWithResponse(ctx context.Context, body UpdateSettingsFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error)
    
    
// ListSnapshots request
    ListSnapshotsWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*ListSnapshotsResponse, error)

// CreateSnapshot request with any body
    CreateSnapshotWithBodyWithResponse(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error)

    CreateSnapshotWithResponse(ctx context.Context, applicationId int, body CreateSnapshotJSONRequestBody, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error)
    
    CreateSnapshotWithFormdataBodyWithResponse(ctx context.Context, applicationId int, body CreateSnapshotFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error)
    
    
// DeleteSnapshot request
    DeleteSnapshotWithResponse(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*DeleteSnapshotResponse, error)

// RestoreSnapshot request
    RestoreSnapshotWithResponse(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*RestoreSnapshotResponse, error)

// OauthProviderLoginCallback request
    OauthProviderLoginCallbackWithResponse(ctx context.Context, providerId int, params *OauthProviderLoginCallbackParams, reqEditors... RequestEditorFn) (*OauthProviderLoginCallbackResponse, error)

// OauthProviderLoginRedirect request
    OauthProviderLoginRedirectWithResponse(ctx context.Context, providerId int, params *OauthProviderLoginRedirectParams, reqEditors... RequestEditorFn) (*OauthProviderLoginRedirectResponse, error)

// AuthProviderSamlAcsUrl request with any body
    AuthProviderSamlAcsUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error)

    AuthProviderSamlAcsUrlWithResponse(ctx context.Context, body AuthProviderSamlAcsUrlJSONRequestBody, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error)
    
    AuthProviderSamlAcsUrlWithFormdataBodyWithResponse(ctx context.Context, body AuthProviderSamlAcsUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error)
    
    
// AuthProviderLoginUrl request
    AuthProviderLoginUrlWithResponse(ctx context.Context, params *AuthProviderLoginUrlParams, reqEditors... RequestEditorFn) (*AuthProviderLoginUrlResponse, error)

// AuthProviderSamlSpLogin request
    AuthProviderSamlSpLoginWithResponse(ctx context.Context, params *AuthProviderSamlSpLoginParams, reqEditors... RequestEditorFn) (*AuthProviderSamlSpLoginResponse, error)

// GroupListTeams request
    GroupListTeamsWithResponse(ctx context.Context, groupId int, params *GroupListTeamsParams, reqEditors... RequestEditorFn) (*GroupListTeamsResponse, error)

// GroupCreateTeam request with any body
    GroupCreateTeamWithBodyWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error)

    GroupCreateTeamWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error)
    
    GroupCreateTeamWithFormdataBodyWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error)
    
    
// WorkspaceListTeams request
    WorkspaceListTeamsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceListTeamsParams, reqEditors... RequestEditorFn) (*WorkspaceListTeamsResponse, error)

// WorkspaceCreateTeam request with any body
    WorkspaceCreateTeamWithBodyWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error)

    WorkspaceCreateTeamWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error)
    
    WorkspaceCreateTeamWithFormdataBodyWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error)
    
    
// DeleteTeam request
    DeleteTeamWithResponse(ctx context.Context, teamId int, params *DeleteTeamParams, reqEditors... RequestEditorFn) (*DeleteTeamResponse, error)

// GetTeam request
    GetTeamWithResponse(ctx context.Context, teamId int, reqEditors... RequestEditorFn) (*GetTeamResponse, error)

// UpdateTeam request with any body
    UpdateTeamWithBodyWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error)

    UpdateTeamWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error)
    
    UpdateTeamWithFormdataBodyWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error)
    
    
// ListTeamSubjects request
    ListTeamSubjectsWithResponse(ctx context.Context, teamId string, reqEditors... RequestEditorFn) (*ListTeamSubjectsResponse, error)

// CreateSubject request with any body
    CreateSubjectWithBodyWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error)

    CreateSubjectWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectJSONRequestBody, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error)
    
    CreateSubjectWithFormdataBodyWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error)
    
    
// DeleteSubject request
    DeleteSubjectWithResponse(ctx context.Context, teamId int, subjectId int, params *DeleteSubjectParams, reqEditors... RequestEditorFn) (*DeleteSubjectResponse, error)

// GetSubject request
    GetSubjectWithResponse(ctx context.Context, teamId string, subjectId int, reqEditors... RequestEditorFn) (*GetSubjectResponse, error)

// ListTemplates request
    ListTemplatesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListTemplatesResponse, error)

// GroupInstallTemplate request
    GroupInstallTemplateWithResponse(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateParams, reqEditors... RequestEditorFn) (*GroupInstallTemplateResponse, error)

// GroupInstallTemplateAsync request
    GroupInstallTemplateAsyncWithResponse(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*GroupInstallTemplateAsyncResponse, error)

// InstallTemplate request
    InstallTemplateWithResponse(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateParams, reqEditors... RequestEditorFn) (*InstallTemplateResponse, error)

// InstallTemplateAsync request
    InstallTemplateAsyncWithResponse(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*InstallTemplateAsyncResponse, error)

// GetTrashStructure request
    GetTrashStructureWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetTrashStructureResponse, error)

// GroupEmptyContents request
    GroupEmptyContentsWithResponse(ctx context.Context, groupId int, params *GroupEmptyContentsParams, reqEditors... RequestEditorFn) (*GroupEmptyContentsResponse, error)

// GroupGetContents request
    GroupGetContentsWithResponse(ctx context.Context, groupId int, params *GroupGetContentsParams, reqEditors... RequestEditorFn) (*GroupGetContentsResponse, error)

// Restore request with any body
    RestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*RestoreResponse, error)

    RestoreWithResponse(ctx context.Context, body RestoreJSONRequestBody, reqEditors... RequestEditorFn) (*RestoreResponse, error)
    
    RestoreWithFormdataBodyWithResponse(ctx context.Context, body RestoreFormdataRequestBody, reqEditors... RequestEditorFn) (*RestoreResponse, error)
    
    
// WorkspaceEmptyContents request
    WorkspaceEmptyContentsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceEmptyContentsParams, reqEditors... RequestEditorFn) (*WorkspaceEmptyContentsResponse, error)

// WorkspaceGetContents request
    WorkspaceGetContentsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceGetContentsParams, reqEditors... RequestEditorFn) (*WorkspaceGetContentsResponse, error)

// UploadFile request
    UploadFileWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*UploadFileResponse, error)

// UploadViaUrl request with any body
    UploadViaUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error)

    UploadViaUrlWithResponse(ctx context.Context, body UploadViaUrlJSONRequestBody, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error)
    
    UploadViaUrlWithFormdataBodyWithResponse(ctx context.Context, body UploadViaUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error)
    
    
// CreateUser request with any body
    CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateUserResponse, error)

    CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors... RequestEditorFn) (*CreateUserResponse, error)
    
    CreateUserWithFormdataBodyWithResponse(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateUserResponse, error)
    
    
// UpdateAccount request with any body
    UpdateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error)

    UpdateAccountWithResponse(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error)
    
    UpdateAccountWithFormdataBodyWithResponse(ctx context.Context, body UpdateAccountFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error)
    
    
// ChangePassword request with any body
    ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error)

    ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error)
    
    ChangePasswordWithFormdataBodyWithResponse(ctx context.Context, body ChangePasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error)
    
    
// Dashboard request
    DashboardWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*DashboardResponse, error)

// Redo request with any body
    RedoWithBodyWithResponse(ctx context.Context, params *RedoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*RedoResponse, error)

    RedoWithResponse(ctx context.Context, params *RedoParams, body RedoJSONRequestBody, reqEditors... RequestEditorFn) (*RedoResponse, error)
    
    RedoWithFormdataBodyWithResponse(ctx context.Context, params *RedoParams, body RedoFormdataRequestBody, reqEditors... RequestEditorFn) (*RedoResponse, error)
    
    
// ResetPassword request with any body
    ResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error)

    ResetPasswordWithResponse(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error)
    
    ResetPasswordWithFormdataBodyWithResponse(ctx context.Context, body ResetPasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error)
    
    
// ScheduleAccountDeletion request
    ScheduleAccountDeletionWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ScheduleAccountDeletionResponse, error)

// SendPasswordResetEmail request with any body
    SendPasswordResetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error)

    SendPasswordResetEmailWithResponse(ctx context.Context, body SendPasswordResetEmailJSONRequestBody, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error)
    
    SendPasswordResetEmailWithFormdataBodyWithResponse(ctx context.Context, body SendPasswordResetEmailFormdataRequestBody, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error)
    
    
// TokenAuth request with any body
    TokenAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenAuthResponse, error)

    TokenAuthWithResponse(ctx context.Context, body TokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*TokenAuthResponse, error)
    
    TokenAuthWithFormdataBodyWithResponse(ctx context.Context, body TokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenAuthResponse, error)
    
    
// TokenRefresh request with any body
    TokenRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error)

    TokenRefreshWithResponse(ctx context.Context, body TokenRefreshJSONRequestBody, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error)
    
    TokenRefreshWithFormdataBodyWithResponse(ctx context.Context, body TokenRefreshFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error)
    
    
// TokenVerify request with any body
    TokenVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error)

    TokenVerifyWithResponse(ctx context.Context, body TokenVerifyJSONRequestBody, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error)
    
    TokenVerifyWithFormdataBodyWithResponse(ctx context.Context, body TokenVerifyFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error)
    
    
// Undo request with any body
    UndoWithBodyWithResponse(ctx context.Context, params *UndoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UndoResponse, error)

    UndoWithResponse(ctx context.Context, params *UndoParams, body UndoJSONRequestBody, reqEditors... RequestEditorFn) (*UndoResponse, error)
    
    UndoWithFormdataBodyWithResponse(ctx context.Context, params *UndoParams, body UndoFormdataRequestBody, reqEditors... RequestEditorFn) (*UndoResponse, error)
    
    
// ListWorkspaces request
    ListWorkspacesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListWorkspacesResponse, error)

// CreateWorkspace request with any body
    CreateWorkspaceWithBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error)

    CreateWorkspaceWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error)
    
    CreateWorkspaceWithFormdataBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error)
    
    
// GetWorkspaceInvitationByToken request
    GetWorkspaceInvitationByTokenWithResponse(ctx context.Context, token string, reqEditors... RequestEditorFn) (*GetWorkspaceInvitationByTokenResponse, error)

// ListWorkspaceInvitations request
    ListWorkspaceInvitationsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*ListWorkspaceInvitationsResponse, error)

// CreateWorkspaceInvitation request with any body
    CreateWorkspaceInvitationWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error)

    CreateWorkspaceInvitationWithResponse(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error)
    
    CreateWorkspaceInvitationWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error)
    
    
// DeleteWorkspaceInvitation request
    DeleteWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*DeleteWorkspaceInvitationResponse, error)

// GetWorkspaceInvitation request
    GetWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*GetWorkspaceInvitationResponse, error)

// UpdateWorkspaceInvitation request with any body
    UpdateWorkspaceInvitationWithBodyWithResponse(ctx context.Context, workspaceInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error)

    UpdateWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error)
    
    UpdateWorkspaceInvitationWithFormdataBodyWithResponse(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error)
    
    
// AcceptWorkspaceInvitation request
    AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error)

// RejectWorkspaceInvitation request
    RejectWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*RejectWorkspaceInvitationResponse, error)

// OrderWorkspaces request with any body
    OrderWorkspacesWithBodyWithResponse(ctx context.Context, params *OrderWorkspacesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error)

    OrderWorkspacesWithResponse(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesJSONRequestBody, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error)
    
    OrderWorkspacesWithFormdataBodyWithResponse(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error)
    
    
// ListWorkspaceUsers request
    ListWorkspaceUsersWithResponse(ctx context.Context, workspaceId int, params *ListWorkspaceUsersParams, reqEditors... RequestEditorFn) (*ListWorkspaceUsersResponse, error)

// DeleteWorkspaceUser request
    DeleteWorkspaceUserWithResponse(ctx context.Context, workspaceUserId int, reqEditors... RequestEditorFn) (*DeleteWorkspaceUserResponse, error)

// UpdateWorkspaceUser request with any body
    UpdateWorkspaceUserWithBodyWithResponse(ctx context.Context, workspaceUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error)

    UpdateWorkspaceUserWithResponse(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error)
    
    UpdateWorkspaceUserWithFormdataBodyWithResponse(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error)
    
    
// DeleteWorkspace request
    DeleteWorkspaceWithResponse(ctx context.Context, workspaceId int, params *DeleteWorkspaceParams, reqEditors... RequestEditorFn) (*DeleteWorkspaceResponse, error)

// UpdateWorkspace request with any body
    UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error)

    UpdateWorkspaceWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error)
    
    UpdateWorkspaceWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error)
    
    
// LeaveWorkspace request
    LeaveWorkspaceWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*LeaveWorkspaceResponse, error)

// WorkspacePermissions request
    WorkspacePermissionsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*WorkspacePermissionsResponse, error)

// CmsApiPagesRetrieve request
    CmsApiPagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CmsApiPagesRetrieveResponse, error)

// ExcludeEachCmsApiMainDocumentsRetrieve request
    ExcludeEachCmsApiMainDocumentsRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsRetrieveResponse, error)

// ExcludeEachCmsApiMainDocumentsFindRetrieve request
    ExcludeEachCmsApiMainDocumentsFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsFindRetrieveResponse, error)

// ExcludeEachCmsApiMainDocumentsRetrieve2 request
    ExcludeEachCmsApiMainDocumentsRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsRetrieve2Response, error)

// ExcludeEachCmsApiMainImagesRetrieve request
    ExcludeEachCmsApiMainImagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesRetrieveResponse, error)

// ExcludeEachCmsApiMainImagesFindRetrieve request
    ExcludeEachCmsApiMainImagesFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesFindRetrieveResponse, error)

// ExcludeEachCmsApiMainImagesRetrieve2 request
    ExcludeEachCmsApiMainImagesRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesRetrieve2Response, error)

// ExcludeEachCmsApiMainPagesRetrieve request
    ExcludeEachCmsApiMainPagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesRetrieveResponse, error)

// ExcludeEachCmsApiMainPagesFindRetrieve request
    ExcludeEachCmsApiMainPagesFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesFindRetrieveResponse, error)

// ExcludeEachCmsApiMainPagesRetrieve2 request
    ExcludeEachCmsApiMainPagesRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesRetrieve2Response, error)

// ExcludeEachCmsApiMainPagesActionCreate request
    ExcludeEachCmsApiMainPagesActionCreateWithResponse(ctx context.Context, id int, actionName string, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesActionCreateResponse, error)


}


type EmailTesterResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *EmailTesterResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r EmailTesterResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTesterResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type FullHealthCheckResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *FullHealthCheck
}

// Status returns HTTPResponse.Status
func (r FullHealthCheckResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FullHealthCheckResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminAuditLogResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]AuditLog
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminAuditLogResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAuditLogResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminAuditLogTypesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *AuditLogActionType
}

// Status returns HTTPResponse.Status
func (r AdminAuditLogTypesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAuditLogTypesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExportAuditLogResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleAuditLogExportJobResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ExportAuditLogResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportAuditLogResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminAuditLogUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]AuditLogUser
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminAuditLogUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAuditLogUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminAuditLogWorkspacesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]AuditLogWorkspace
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminAuditLogWorkspacesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAuditLogWorkspacesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListAuthProvidersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]AuthenticationProviderAuthProvider
}

// Status returns HTTPResponse.Status
func (r ListAuthProvidersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthProvidersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateAuthProviderResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *AuthenticationProviderAuthProvider
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateAuthProviderResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthProviderResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteAuthProviderResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteAuthProviderResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthProviderResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetAuthProviderResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *AuthenticationProviderAuthProvider
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetAuthProviderResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProviderResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateAuthProviderResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *AuthenticationProviderAuthProvider
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateAuthProviderResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthProviderResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminDashboardResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *AdminDashboard
}

// Status returns HTTPResponse.Status
func (r AdminDashboardResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDashboardResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminListGroupsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspacesAdminResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminListGroupsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListGroupsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminDeleteGroupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteGroupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteGroupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminListUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]UserAdminResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminListUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminImpersonateUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminImpersonateUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminImpersonateUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminDeleteUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminEditUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserAdminResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminEditUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminEditUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminListWorkspacesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspacesAdminResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminListWorkspacesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListWorkspacesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminDeleteWorkspaceResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteWorkspaceResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteWorkspaceResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListApplicationIntegrationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]IntegrationIntegration
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListApplicationIntegrationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationIntegrationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateApplicationIntegrationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *IntegrationIntegration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateApplicationIntegrationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationIntegrationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListAllApplicationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListAllApplicationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllApplicationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupListApplicationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupListApplicationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupListApplicationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupCreateApplicationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupCreateApplicationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupCreateApplicationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupOrderApplicationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupOrderApplicationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupOrderApplicationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceListApplicationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceListApplicationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceListApplicationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceCreateApplicationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceCreateApplicationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceCreateApplicationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceOrderApplicationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceOrderApplicationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceOrderApplicationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteApplicationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceGetApplicationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceGetApplicationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceGetApplicationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateApplicationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DuplicateApplicationAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleDuplicateApplicationJobType
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DuplicateApplicationAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateApplicationAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListAuthProvidersLoginOptionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ListAuthProvidersLoginOptionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthProvidersLoginOptionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExportTableResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExportJob
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ExportTableResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportTableResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetExportJobResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExportJob
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetExportJobResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExportJobResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableFieldsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]FieldField
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableFieldsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableFieldsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *FieldFieldSerializerWithRelatedFields
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RelatedFields
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *FieldField
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *FieldFieldSerializerWithRelatedFields
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DuplicateTableFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleDuplicateFieldJobType
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DuplicateTableFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateTableFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseFieldUniqueRowValuesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UniqueRowValues
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseFieldUniqueRowValuesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseFieldUniqueRowValuesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type TypeFormulaFieldResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TypeFormulaResult
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r TypeFormulaFieldResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TypeFormulaFieldResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableRowNamesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// TableId An object containing the row names of table `table_id`.
    TableId *struct {
// RowId the name of the row with id `row_id` from table with id `table_id`.
    RowId *string`json:"{row_id}*,omitempty"`
}`json:"{table_id}*,omitempty"`
}
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableRowNamesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableRowNamesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type BatchDeleteDatabaseTableRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r BatchDeleteDatabaseTableRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchDeleteDatabaseTableRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type BatchUpdateDatabaseTableRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleBatchRowsResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r BatchUpdateDatabaseTableRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchUpdateDatabaseTableRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type BatchCreateDatabaseTableRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleBatchRowsResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r BatchCreateDatabaseTableRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchCreateDatabaseTableRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetAdjacentDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetAdjacentDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdjacentDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type MoveDatabaseTableRowResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ExampleRowResponseSerializerWithUserFieldNames
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r MoveDatabaseTableRowResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveDatabaseTableRowResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTablesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Table
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTablesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTablesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Table
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleFileImportJobSerializerClass
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OrderDatabaseTablesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r OrderDatabaseTablesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderDatabaseTablesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Table
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Table
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DuplicateDatabaseTableAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleDuplicateTableJobType
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DuplicateDatabaseTableAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDatabaseTableAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ImportDataDatabaseTableAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleFileImportJobSerializerClass
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ImportDataDatabaseTableAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportDataDatabaseTableAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTokensResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Token
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTokensResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTokensResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Token
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CheckDatabaseTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON403 *struct {
    Detail *403_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N403Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CheckDatabaseTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDatabaseTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Token
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Token
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PremiumViewAttributesUpdateResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *View
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PremiumViewAttributesUpdateResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PremiumViewAttributesUpdateResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PublicListDatabaseTableCalendarViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *CalendarViewExampleResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PublicListDatabaseTableCalendarViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicListDatabaseTableCalendarViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableCalendarViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *CalendarViewExampleResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableCalendarViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableCalendarViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableViewDecorationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableViewDecorationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableViewDecorationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableViewDecorationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DecoratorValueProviderTypeViewDecoration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableViewDecorationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableViewDecorationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableViewDecorationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DecoratorValueProviderTypeViewDecoration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableViewDecorationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableViewDecorationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableViewFilterResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableViewFilterResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableViewFilterResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableViewFilterResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewFilter
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableViewFilterResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableViewFilterResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableViewFilterResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewFilter
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableViewFilterResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableViewFilterResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMetaDatabaseTableFormViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicFormView
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMetaDatabaseTableFormViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetaDatabaseTableFormViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type SubmitDatabaseTableFormViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *FormViewSubmitted
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r SubmitDatabaseTableFormViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitDatabaseTableFormViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UploadFileFormViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserFile
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UploadFileFormViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileFormViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PublicListDatabaseTableGalleryViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PublicListDatabaseTableGalleryViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicListDatabaseTableGalleryViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableGalleryViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableGalleryViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableGalleryViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PublicListDatabaseTableGridViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PublicListDatabaseTableGridViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicListDatabaseTableGridViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableGridViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableGridViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableGridViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type FilterDatabaseTableGridViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ExampleRowResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r FilterDatabaseTableGridViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilterDatabaseTableGridViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableGridViewFieldAggregationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// Total The total value count. Only returned if `include=total` is specified as GET parameter.
    Total *int`json:"total,omitempty"`
    Value 200_Value`json:"value"`
}
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableGridViewFieldAggregationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableGridViewFieldAggregationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableGridViewFieldAggregationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    FieldId *200_FieldId`json:"field_{id},omitempty"`

// Total The total value count. Only returned if `include=total` is specified as GET parameter.
    Total *int`json:"total,omitempty"`
}
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableGridViewFieldAggregationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableGridViewFieldAggregationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PublicListDatabaseTableKanbanViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *KanbanViewExampleResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PublicListDatabaseTableKanbanViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicListDatabaseTableKanbanViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableKanbanViewRowsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *KanbanViewExampleResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableKanbanViewRowsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableKanbanViewRowsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableViewSortResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableViewSortResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableViewSortResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableViewSortResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewSort
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableViewSortResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableViewSortResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableViewSortResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewSort
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableViewSortResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableViewSortResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableViewsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableViewsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableViewsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OrderDatabaseTableViewsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r OrderDatabaseTableViewsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderDatabaseTableViewsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DatabaseTablePublicViewLinkRowFieldLookupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerLinkRowValue
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DatabaseTablePublicViewLinkRowFieldLookupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DatabaseTablePublicViewLinkRowFieldLookupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PublicViewTokenAuthResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicViewAuthResponse
    JSON401 *interface{}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PublicViewTokenAuthResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicViewTokenAuthResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetPublicViewInfoResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicViewInfo
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetPublicViewInfoResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicViewInfoResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableViewDecorationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]DecoratorValueProviderTypeViewDecoration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableViewDecorationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableViewDecorationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableViewDecorationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DecoratorValueProviderTypeViewDecoration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableViewDecorationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableViewDecorationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DuplicateDatabaseTableViewResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DuplicateDatabaseTableViewResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateDatabaseTableViewResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableViewFieldOptionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewFieldOptions
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableViewFieldOptionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableViewFieldOptionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableViewFieldOptionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewFieldOptions
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableViewFieldOptionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableViewFieldOptionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableViewFiltersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ViewFilter
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableViewFiltersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableViewFiltersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableViewFilterResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewFilter
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableViewFilterResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableViewFilterResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RotateDatabaseViewSlugResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewView
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r RotateDatabaseViewSlugResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateDatabaseViewSlugResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableViewSortingsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ViewSort
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableViewSortingsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableViewSortingsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableViewSortResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ViewSort
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableViewSortResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableViewSortResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListDatabaseTableWebhooksResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]TableWebhook
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListDatabaseTableWebhooksResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabaseTableWebhooksResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateDatabaseTableWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TableWebhook
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseTableWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseTableWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type TestCallDatabaseTableWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TableWebhookTestCallResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r TestCallDatabaseTableWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestCallDatabaseTableWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteDatabaseTableWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseTableWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseTableWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDatabaseTableWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TableWebhook
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseTableWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseTableWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateDatabaseTableWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TableWebhook
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseTableWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseTableWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListGroupsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspaceUserWorkspace
}

// Status returns HTTPResponse.Status
func (r ListGroupsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateGroupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUserWorkspace
}

// Status returns HTTPResponse.Status
func (r CreateGroupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListGroupInvitationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListGroupInvitationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupInvitationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetGroupInvitationByTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserWorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetGroupInvitationByTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupInvitationByTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AcceptGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUserWorkspace
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AcceptGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RejectGroupInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r RejectGroupInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectGroupInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OrderGroupsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrderGroupsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGroupsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListGroupUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ListWorkspaceUsersWithMemberData
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListGroupUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteGroupUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteGroupUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateGroupUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUser
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateGroupUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteGroupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteGroupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateGroupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Workspace
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateGroupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type LeaveGroupResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r LeaveGroupResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveGroupResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupPermissionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]PermissionObject
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupPermissionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupPermissionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteApplicationIntegrationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationIntegrationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationIntegrationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateApplicationIntegrationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *IntegrationIntegration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationIntegrationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationIntegrationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type MoveApplicationIntegrationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *IntegrationIntegration
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r MoveApplicationIntegrationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveApplicationIntegrationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListJobResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]JobTypeJob
}

// Status returns HTTPResponse.Status
func (r ListJobResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateJobResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *JobTypeJob
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateJobResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetJobResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *JobTypeJob
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminLicensesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]License
}

// Status returns HTTPResponse.Status
func (r AdminLicensesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminLicensesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminRegisterLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *License
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminRegisterLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRegisterLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminRemoveLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminRemoveLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRemoveLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminGetLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *LicenseWithUsers
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminGetLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminLicenseCheckResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *LicenseWithUsers
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminLicenseCheckResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminLicenseCheckResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminFillRemainingSeatsOfLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]LicenseUser
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminFillRemainingSeatsOfLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminFillRemainingSeatsOfLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminLicenseLookupUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerLicenseUserLookup
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminLicenseLookupUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminLicenseLookupUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminRemoveAllUsersFromLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminRemoveAllUsersFromLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRemoveAllUsersFromLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminRemoveUserFromLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminRemoveUserFromLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRemoveUserFromLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AdminAddUserToLicenseResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *LicenseUser
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AdminAddUserToLicenseResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAddUserToLicenseResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupListRoleAssignmentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupListRoleAssignmentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupListRoleAssignmentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupAssignRoleResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupAssignRoleResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupAssignRoleResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupBatchAssignRoleResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupBatchAssignRoleResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupBatchAssignRoleResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListRoleAssignmentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListRoleAssignmentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleAssignmentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AssignRoleResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AssignRoleResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignRoleResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type BatchAssignRoleResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]OpenApiRoleAssignment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r BatchAssignRoleResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchAssignRoleResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteRowCommentResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RowComment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteRowCommentResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRowCommentResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateRowCommentResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RowComment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON401 *struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateRowCommentResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRowCommentResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetRowCommentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerRowComment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetRowCommentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRowCommentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateRowCommentResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RowComment
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateRowCommentResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRowCommentResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Settings
}

// Status returns HTTPResponse.Status
func (r GetSettingsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetInstanceIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *InstanceId
}

// Status returns HTTPResponse.Status
func (r GetInstanceIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateSettingsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Settings
}

// Status returns HTTPResponse.Status
func (r UpdateSettingsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSettingsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListSnapshotsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Snapshot
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListSnapshotsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSnapshotsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateSnapshotResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *Job
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateSnapshotResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnapshotResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteSnapshotResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RestoreSnapshotResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Job
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r RestoreSnapshotResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreSnapshotResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OauthProviderLoginCallbackResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthProviderLoginCallbackResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthProviderLoginCallbackResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OauthProviderLoginRedirectResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthProviderLoginRedirectResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthProviderLoginRedirectResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AuthProviderSamlAcsUrlResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AuthProviderSamlAcsUrlResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderSamlAcsUrlResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AuthProviderLoginUrlResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *map[string]interface{}
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AuthProviderLoginUrlResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderLoginUrlResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AuthProviderSamlSpLoginResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AuthProviderSamlSpLoginResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthProviderSamlSpLoginResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupListTeamsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]TeamResponse
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupListTeamsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupListTeamsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupCreateTeamResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupCreateTeamResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupCreateTeamResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceListTeamsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]TeamResponse
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceListTeamsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceListTeamsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceCreateTeamResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceCreateTeamResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceCreateTeamResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteTeamResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTeamResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamResponse
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateTeamResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListTeamSubjectsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]TeamSubjectResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListTeamSubjectsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamSubjectsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateSubjectResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamSubjectResponse
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateSubjectResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubjectResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteSubjectResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteSubjectResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubjectResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSubjectResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TeamSubjectResponse
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSubjectResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubjectResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListTemplatesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]TemplateCategories
}

// Status returns HTTPResponse.Status
func (r ListTemplatesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTemplatesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupInstallTemplateResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupInstallTemplateResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupInstallTemplateResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupInstallTemplateAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleInstallTemplateJobType
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupInstallTemplateAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupInstallTemplateAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type InstallTemplateResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Applications
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r InstallTemplateResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallTemplateResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type InstallTemplateAsyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON202 *SingleInstallTemplateJobType
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r InstallTemplateAsyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallTemplateAsyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTrashStructureResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TrashStructure
}

// Status returns HTTPResponse.Status
func (r GetTrashStructureResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrashStructureResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupEmptyContentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupEmptyContentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupEmptyContentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GroupGetContentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerTrashContents
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GroupGetContentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupGetContentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RestoreResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r RestoreResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceEmptyContentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceEmptyContentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceEmptyContentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspaceGetContentsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PaginationSerializerTrashContents
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspaceGetContentsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceGetContentsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UploadFileResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserFile
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UploadFileResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UploadViaUrlResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserFile
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UploadViaUrlResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadViaUrlResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// RefreshToken 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours.
    RefreshToken *string`json:"refresh_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateAccountResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Account
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateAccountResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ChangePasswordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ChangePasswordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DashboardResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Dashboard
}

// Status returns HTTPResponse.Status
func (r DashboardResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RedoResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UndoRedoResponse
}

// Status returns HTTPResponse.Status
func (r RedoResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedoResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ResetPasswordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ResetPasswordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPasswordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ScheduleAccountDeletionResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ScheduleAccountDeletionResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleAccountDeletionResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type SendPasswordResetEmailResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r SendPasswordResetEmailResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendPasswordResetEmailResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type TokenAuthResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// RefreshToken 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours.
    RefreshToken *string`json:"refresh_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
    JSON401 *interface{}
}

// Status returns HTTPResponse.Status
func (r TokenAuthResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenAuthResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type TokenRefreshResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
    JSON401 *interface{}
}

// Status returns HTTPResponse.Status
func (r TokenRefreshResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenRefreshResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type TokenVerifyResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
    JSON401 *interface{}
}

// Status returns HTTPResponse.Status
func (r TokenVerifyResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenVerifyResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UndoResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UndoRedoResponse
}

// Status returns HTTPResponse.Status
func (r UndoResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UndoResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListWorkspacesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspaceUserWorkspace
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateWorkspaceResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUserWorkspace
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetWorkspaceInvitationByTokenResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserWorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceInvitationByTokenResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceInvitationByTokenResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListWorkspaceInvitationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceInvitationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceInvitationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CreateWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceInvitation
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type AcceptWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUserWorkspace
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r AcceptWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type RejectWorkspaceInvitationResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r RejectWorkspaceInvitationResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectWorkspaceInvitationResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type OrderWorkspacesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrderWorkspacesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderWorkspacesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ListWorkspaceUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ListWorkspaceUsersWithMemberData
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteWorkspaceUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateWorkspaceUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WorkspaceUser
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteWorkspaceResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type UpdateWorkspaceResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Workspace
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type LeaveWorkspaceResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON400 *struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r LeaveWorkspaceResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveWorkspaceResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type WorkspacePermissionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]PermissionObject
    JSON404 *struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r WorkspacePermissionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspacePermissionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type CmsApiPagesRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CmsApiPagesRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CmsApiPagesRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainDocumentsRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainDocumentsRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainDocumentsRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainDocumentsFindRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainDocumentsFindRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainDocumentsFindRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainDocumentsRetrieve2Response struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainDocumentsRetrieve2Response) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainDocumentsRetrieve2Response) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainImagesRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainImagesRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainImagesRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainImagesFindRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainImagesFindRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainImagesFindRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainImagesRetrieve2Response struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainImagesRetrieve2Response) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainImagesRetrieve2Response) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainPagesRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainPagesRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainPagesRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainPagesFindRetrieveResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainPagesFindRetrieveResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainPagesFindRetrieveResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainPagesRetrieve2Response struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainPagesRetrieve2Response) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainPagesRetrieve2Response) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type ExcludeEachCmsApiMainPagesActionCreateResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExcludeEachCmsApiMainPagesActionCreateResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExcludeEachCmsApiMainPagesActionCreateResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}






// EmailTesterWithBodyWithResponse request with arbitrary body returning *EmailTesterResponse
func (c *ClientWithResponses) EmailTesterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*EmailTesterResponse, error){
    rsp, err := c.EmailTesterWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseEmailTesterResponse(rsp)
}


func (c *ClientWithResponses) EmailTesterWithResponse(ctx context.Context, body EmailTesterJSONRequestBody, reqEditors... RequestEditorFn) (*EmailTesterResponse, error) {
    rsp, err := c.EmailTester(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseEmailTesterResponse(rsp)
}


func (c *ClientWithResponses) EmailTesterWithFormdataBodyWithResponse(ctx context.Context, body EmailTesterFormdataRequestBody, reqEditors... RequestEditorFn) (*EmailTesterResponse, error) {
    rsp, err := c.EmailTesterWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseEmailTesterResponse(rsp)
}








// FullHealthCheckWithResponse request returning *FullHealthCheckResponse
func (c *ClientWithResponses) FullHealthCheckWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*FullHealthCheckResponse, error){
    rsp, err := c.FullHealthCheck(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseFullHealthCheckResponse(rsp)
}






// AdminAuditLogWithResponse request returning *AdminAuditLogResponse
func (c *ClientWithResponses) AdminAuditLogWithResponse(ctx context.Context, params *AdminAuditLogParams, reqEditors... RequestEditorFn) (*AdminAuditLogResponse, error){
    rsp, err := c.AdminAuditLog(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminAuditLogResponse(rsp)
}






// AdminAuditLogTypesWithResponse request returning *AdminAuditLogTypesResponse
func (c *ClientWithResponses) AdminAuditLogTypesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminAuditLogTypesResponse, error){
    rsp, err := c.AdminAuditLogTypes(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminAuditLogTypesResponse(rsp)
}






// ExportAuditLogWithBodyWithResponse request with arbitrary body returning *ExportAuditLogResponse
func (c *ClientWithResponses) ExportAuditLogWithBodyWithResponse(ctx context.Context, params *ExportAuditLogParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error){
    rsp, err := c.ExportAuditLogWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportAuditLogResponse(rsp)
}


func (c *ClientWithResponses) ExportAuditLogWithResponse(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogJSONRequestBody, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error) {
    rsp, err := c.ExportAuditLog(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportAuditLogResponse(rsp)
}


func (c *ClientWithResponses) ExportAuditLogWithFormdataBodyWithResponse(ctx context.Context, params *ExportAuditLogParams, body ExportAuditLogFormdataRequestBody, reqEditors... RequestEditorFn) (*ExportAuditLogResponse, error) {
    rsp, err := c.ExportAuditLogWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportAuditLogResponse(rsp)
}








// AdminAuditLogUsersWithResponse request returning *AdminAuditLogUsersResponse
func (c *ClientWithResponses) AdminAuditLogUsersWithResponse(ctx context.Context, params *AdminAuditLogUsersParams, reqEditors... RequestEditorFn) (*AdminAuditLogUsersResponse, error){
    rsp, err := c.AdminAuditLogUsers(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminAuditLogUsersResponse(rsp)
}






// AdminAuditLogWorkspacesWithResponse request returning *AdminAuditLogWorkspacesResponse
func (c *ClientWithResponses) AdminAuditLogWorkspacesWithResponse(ctx context.Context, params *AdminAuditLogWorkspacesParams, reqEditors... RequestEditorFn) (*AdminAuditLogWorkspacesResponse, error){
    rsp, err := c.AdminAuditLogWorkspaces(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminAuditLogWorkspacesResponse(rsp)
}






// ListAuthProvidersWithResponse request returning *ListAuthProvidersResponse
func (c *ClientWithResponses) ListAuthProvidersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAuthProvidersResponse, error){
    rsp, err := c.ListAuthProviders(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListAuthProvidersResponse(rsp)
}






// CreateAuthProviderWithResponse request returning *CreateAuthProviderResponse
func (c *ClientWithResponses) CreateAuthProviderWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CreateAuthProviderResponse, error){
    rsp, err := c.CreateAuthProvider(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateAuthProviderResponse(rsp)
}






// DeleteAuthProviderWithResponse request returning *DeleteAuthProviderResponse
func (c *ClientWithResponses) DeleteAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*DeleteAuthProviderResponse, error){
    rsp, err := c.DeleteAuthProvider(ctx, authProviderId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteAuthProviderResponse(rsp)
}






// GetAuthProviderWithResponse request returning *GetAuthProviderResponse
func (c *ClientWithResponses) GetAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*GetAuthProviderResponse, error){
    rsp, err := c.GetAuthProvider(ctx, authProviderId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetAuthProviderResponse(rsp)
}






// UpdateAuthProviderWithResponse request returning *UpdateAuthProviderResponse
func (c *ClientWithResponses) UpdateAuthProviderWithResponse(ctx context.Context, authProviderId int, reqEditors... RequestEditorFn) (*UpdateAuthProviderResponse, error){
    rsp, err := c.UpdateAuthProvider(ctx, authProviderId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateAuthProviderResponse(rsp)
}






// AdminDashboardWithResponse request returning *AdminDashboardResponse
func (c *ClientWithResponses) AdminDashboardWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminDashboardResponse, error){
    rsp, err := c.AdminDashboard(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminDashboardResponse(rsp)
}






// AdminListGroupsWithResponse request returning *AdminListGroupsResponse
func (c *ClientWithResponses) AdminListGroupsWithResponse(ctx context.Context, params *AdminListGroupsParams, reqEditors... RequestEditorFn) (*AdminListGroupsResponse, error){
    rsp, err := c.AdminListGroups(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminListGroupsResponse(rsp)
}






// AdminDeleteGroupWithResponse request returning *AdminDeleteGroupResponse
func (c *ClientWithResponses) AdminDeleteGroupWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*AdminDeleteGroupResponse, error){
    rsp, err := c.AdminDeleteGroup(ctx, groupId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminDeleteGroupResponse(rsp)
}






// AdminListUsersWithResponse request returning *AdminListUsersResponse
func (c *ClientWithResponses) AdminListUsersWithResponse(ctx context.Context, params *AdminListUsersParams, reqEditors... RequestEditorFn) (*AdminListUsersResponse, error){
    rsp, err := c.AdminListUsers(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminListUsersResponse(rsp)
}






// AdminImpersonateUserWithBodyWithResponse request with arbitrary body returning *AdminImpersonateUserResponse
func (c *ClientWithResponses) AdminImpersonateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error){
    rsp, err := c.AdminImpersonateUserWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminImpersonateUserResponse(rsp)
}


func (c *ClientWithResponses) AdminImpersonateUserWithResponse(ctx context.Context, body AdminImpersonateUserJSONRequestBody, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error) {
    rsp, err := c.AdminImpersonateUser(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminImpersonateUserResponse(rsp)
}


func (c *ClientWithResponses) AdminImpersonateUserWithFormdataBodyWithResponse(ctx context.Context, body AdminImpersonateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminImpersonateUserResponse, error) {
    rsp, err := c.AdminImpersonateUserWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminImpersonateUserResponse(rsp)
}








// AdminDeleteUserWithResponse request returning *AdminDeleteUserResponse
func (c *ClientWithResponses) AdminDeleteUserWithResponse(ctx context.Context, userId int, reqEditors... RequestEditorFn) (*AdminDeleteUserResponse, error){
    rsp, err := c.AdminDeleteUser(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminDeleteUserResponse(rsp)
}






// AdminEditUserWithBodyWithResponse request with arbitrary body returning *AdminEditUserResponse
func (c *ClientWithResponses) AdminEditUserWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error){
    rsp, err := c.AdminEditUserWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminEditUserResponse(rsp)
}


func (c *ClientWithResponses) AdminEditUserWithResponse(ctx context.Context, userId int, body AdminEditUserJSONRequestBody, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error) {
    rsp, err := c.AdminEditUser(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminEditUserResponse(rsp)
}


func (c *ClientWithResponses) AdminEditUserWithFormdataBodyWithResponse(ctx context.Context, userId int, body AdminEditUserFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminEditUserResponse, error) {
    rsp, err := c.AdminEditUserWithFormdataBody(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminEditUserResponse(rsp)
}








// AdminListWorkspacesWithResponse request returning *AdminListWorkspacesResponse
func (c *ClientWithResponses) AdminListWorkspacesWithResponse(ctx context.Context, params *AdminListWorkspacesParams, reqEditors... RequestEditorFn) (*AdminListWorkspacesResponse, error){
    rsp, err := c.AdminListWorkspaces(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminListWorkspacesResponse(rsp)
}






// AdminDeleteWorkspaceWithResponse request returning *AdminDeleteWorkspaceResponse
func (c *ClientWithResponses) AdminDeleteWorkspaceWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*AdminDeleteWorkspaceResponse, error){
    rsp, err := c.AdminDeleteWorkspace(ctx, workspaceId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminDeleteWorkspaceResponse(rsp)
}






// ListApplicationIntegrationsWithResponse request returning *ListApplicationIntegrationsResponse
func (c *ClientWithResponses) ListApplicationIntegrationsWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*ListApplicationIntegrationsResponse, error){
    rsp, err := c.ListApplicationIntegrations(ctx, applicationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListApplicationIntegrationsResponse(rsp)
}






// CreateApplicationIntegrationWithBodyWithResponse request with arbitrary body returning *CreateApplicationIntegrationResponse
func (c *ClientWithResponses) CreateApplicationIntegrationWithBodyWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error){
    rsp, err := c.CreateApplicationIntegrationWithBody(ctx, applicationId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) CreateApplicationIntegrationWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error) {
    rsp, err := c.CreateApplicationIntegration(ctx, applicationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) CreateApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, applicationId int, params *CreateApplicationIntegrationParams, body CreateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateApplicationIntegrationResponse, error) {
    rsp, err := c.CreateApplicationIntegrationWithFormdataBody(ctx, applicationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateApplicationIntegrationResponse(rsp)
}








// ListAllApplicationsWithResponse request returning *ListAllApplicationsResponse
func (c *ClientWithResponses) ListAllApplicationsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAllApplicationsResponse, error){
    rsp, err := c.ListAllApplications(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListAllApplicationsResponse(rsp)
}






// GroupListApplicationsWithResponse request returning *GroupListApplicationsResponse
func (c *ClientWithResponses) GroupListApplicationsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*GroupListApplicationsResponse, error){
    rsp, err := c.GroupListApplications(ctx, groupId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupListApplicationsResponse(rsp)
}






// GroupCreateApplicationWithBodyWithResponse request with arbitrary body returning *GroupCreateApplicationResponse
func (c *ClientWithResponses) GroupCreateApplicationWithBodyWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error){
    rsp, err := c.GroupCreateApplicationWithBody(ctx, groupId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateApplicationResponse(rsp)
}


func (c *ClientWithResponses) GroupCreateApplicationWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error) {
    rsp, err := c.GroupCreateApplication(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateApplicationResponse(rsp)
}


func (c *ClientWithResponses) GroupCreateApplicationWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *GroupCreateApplicationParams, body GroupCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupCreateApplicationResponse, error) {
    rsp, err := c.GroupCreateApplicationWithFormdataBody(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateApplicationResponse(rsp)
}








// GroupOrderApplicationsWithBodyWithResponse request with arbitrary body returning *GroupOrderApplicationsResponse
func (c *ClientWithResponses) GroupOrderApplicationsWithBodyWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error){
    rsp, err := c.GroupOrderApplicationsWithBody(ctx, groupId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupOrderApplicationsResponse(rsp)
}


func (c *ClientWithResponses) GroupOrderApplicationsWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error) {
    rsp, err := c.GroupOrderApplications(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupOrderApplicationsResponse(rsp)
}


func (c *ClientWithResponses) GroupOrderApplicationsWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *GroupOrderApplicationsParams, body GroupOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupOrderApplicationsResponse, error) {
    rsp, err := c.GroupOrderApplicationsWithFormdataBody(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupOrderApplicationsResponse(rsp)
}








// WorkspaceListApplicationsWithResponse request returning *WorkspaceListApplicationsResponse
func (c *ClientWithResponses) WorkspaceListApplicationsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*WorkspaceListApplicationsResponse, error){
    rsp, err := c.WorkspaceListApplications(ctx, workspaceId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceListApplicationsResponse(rsp)
}






// WorkspaceCreateApplicationWithBodyWithResponse request with arbitrary body returning *WorkspaceCreateApplicationResponse
func (c *ClientWithResponses) WorkspaceCreateApplicationWithBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error){
    rsp, err := c.WorkspaceCreateApplicationWithBody(ctx, workspaceId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateApplicationResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceCreateApplicationWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error) {
    rsp, err := c.WorkspaceCreateApplication(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateApplicationResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceCreateApplicationWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceCreateApplicationParams, body WorkspaceCreateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateApplicationResponse, error) {
    rsp, err := c.WorkspaceCreateApplicationWithFormdataBody(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateApplicationResponse(rsp)
}








// WorkspaceOrderApplicationsWithBodyWithResponse request with arbitrary body returning *WorkspaceOrderApplicationsResponse
func (c *ClientWithResponses) WorkspaceOrderApplicationsWithBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error){
    rsp, err := c.WorkspaceOrderApplicationsWithBody(ctx, workspaceId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceOrderApplicationsResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceOrderApplicationsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error) {
    rsp, err := c.WorkspaceOrderApplications(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceOrderApplicationsResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceOrderApplicationsWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *WorkspaceOrderApplicationsParams, body WorkspaceOrderApplicationsFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceOrderApplicationsResponse, error) {
    rsp, err := c.WorkspaceOrderApplicationsWithFormdataBody(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceOrderApplicationsResponse(rsp)
}








// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, applicationId int, params *DeleteApplicationParams, reqEditors... RequestEditorFn) (*DeleteApplicationResponse, error){
    rsp, err := c.DeleteApplication(ctx, applicationId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteApplicationResponse(rsp)
}






// WorkspaceGetApplicationWithResponse request returning *WorkspaceGetApplicationResponse
func (c *ClientWithResponses) WorkspaceGetApplicationWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*WorkspaceGetApplicationResponse, error){
    rsp, err := c.WorkspaceGetApplication(ctx, applicationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceGetApplicationResponse(rsp)
}






// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error){
    rsp, err := c.UpdateApplicationWithBody(ctx, applicationId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationResponse(rsp)
}


func (c *ClientWithResponses) UpdateApplicationWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error) {
    rsp, err := c.UpdateApplication(ctx, applicationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationResponse(rsp)
}


func (c *ClientWithResponses) UpdateApplicationWithFormdataBodyWithResponse(ctx context.Context, applicationId int, params *UpdateApplicationParams, body UpdateApplicationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationResponse, error) {
    rsp, err := c.UpdateApplicationWithFormdataBody(ctx, applicationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationResponse(rsp)
}








// DuplicateApplicationAsyncWithResponse request returning *DuplicateApplicationAsyncResponse
func (c *ClientWithResponses) DuplicateApplicationAsyncWithResponse(ctx context.Context, applicationId int, params *DuplicateApplicationAsyncParams, reqEditors... RequestEditorFn) (*DuplicateApplicationAsyncResponse, error){
    rsp, err := c.DuplicateApplicationAsync(ctx, applicationId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDuplicateApplicationAsyncResponse(rsp)
}






// ListAuthProvidersLoginOptionsWithResponse request returning *ListAuthProvidersLoginOptionsResponse
func (c *ClientWithResponses) ListAuthProvidersLoginOptionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListAuthProvidersLoginOptionsResponse, error){
    rsp, err := c.ListAuthProvidersLoginOptions(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListAuthProvidersLoginOptionsResponse(rsp)
}






// ExportTableWithBodyWithResponse request with arbitrary body returning *ExportTableResponse
func (c *ClientWithResponses) ExportTableWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ExportTableResponse, error){
    rsp, err := c.ExportTableWithBody(ctx, tableId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportTableResponse(rsp)
}


func (c *ClientWithResponses) ExportTableWithResponse(ctx context.Context, tableId int, body ExportTableJSONRequestBody, reqEditors... RequestEditorFn) (*ExportTableResponse, error) {
    rsp, err := c.ExportTable(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportTableResponse(rsp)
}


func (c *ClientWithResponses) ExportTableWithFormdataBodyWithResponse(ctx context.Context, tableId int, body ExportTableFormdataRequestBody, reqEditors... RequestEditorFn) (*ExportTableResponse, error) {
    rsp, err := c.ExportTableWithFormdataBody(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExportTableResponse(rsp)
}








// GetExportJobWithResponse request returning *GetExportJobResponse
func (c *ClientWithResponses) GetExportJobWithResponse(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*GetExportJobResponse, error){
    rsp, err := c.GetExportJob(ctx, jobId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetExportJobResponse(rsp)
}






// ListDatabaseTableFieldsWithResponse request returning *ListDatabaseTableFieldsResponse
func (c *ClientWithResponses) ListDatabaseTableFieldsWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*ListDatabaseTableFieldsResponse, error){
    rsp, err := c.ListDatabaseTableFields(ctx, tableId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableFieldsResponse(rsp)
}






// CreateDatabaseTableFieldWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableFieldResponse
func (c *ClientWithResponses) CreateDatabaseTableFieldWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error){
    rsp, err := c.CreateDatabaseTableFieldWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableFieldResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableFieldWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error) {
    rsp, err := c.CreateDatabaseTableField(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableFieldResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableFieldWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableFieldParams, body CreateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableFieldResponse, error) {
    rsp, err := c.CreateDatabaseTableFieldWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableFieldResponse(rsp)
}








// DeleteDatabaseTableFieldWithResponse request returning *DeleteDatabaseTableFieldResponse
func (c *ClientWithResponses) DeleteDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, params *DeleteDatabaseTableFieldParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableFieldResponse, error){
    rsp, err := c.DeleteDatabaseTableField(ctx, fieldId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableFieldResponse(rsp)
}






// GetDatabaseTableFieldWithResponse request returning *GetDatabaseTableFieldResponse
func (c *ClientWithResponses) GetDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, reqEditors... RequestEditorFn) (*GetDatabaseTableFieldResponse, error){
    rsp, err := c.GetDatabaseTableField(ctx, fieldId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableFieldResponse(rsp)
}






// UpdateDatabaseTableFieldWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableFieldResponse
func (c *ClientWithResponses) UpdateDatabaseTableFieldWithBodyWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error){
    rsp, err := c.UpdateDatabaseTableFieldWithBody(ctx, fieldId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableFieldResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableFieldWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error) {
    rsp, err := c.UpdateDatabaseTableField(ctx, fieldId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableFieldResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableFieldWithFormdataBodyWithResponse(ctx context.Context, fieldId int, params *UpdateDatabaseTableFieldParams, body UpdateDatabaseTableFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableFieldResponse, error) {
    rsp, err := c.UpdateDatabaseTableFieldWithFormdataBody(ctx, fieldId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableFieldResponse(rsp)
}








// DuplicateTableFieldWithResponse request returning *DuplicateTableFieldResponse
func (c *ClientWithResponses) DuplicateTableFieldWithResponse(ctx context.Context, fieldId int, params *DuplicateTableFieldParams, reqEditors... RequestEditorFn) (*DuplicateTableFieldResponse, error){
    rsp, err := c.DuplicateTableField(ctx, fieldId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDuplicateTableFieldResponse(rsp)
}






// GetDatabaseFieldUniqueRowValuesWithResponse request returning *GetDatabaseFieldUniqueRowValuesResponse
func (c *ClientWithResponses) GetDatabaseFieldUniqueRowValuesWithResponse(ctx context.Context, fieldId int, params *GetDatabaseFieldUniqueRowValuesParams, reqEditors... RequestEditorFn) (*GetDatabaseFieldUniqueRowValuesResponse, error){
    rsp, err := c.GetDatabaseFieldUniqueRowValues(ctx, fieldId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseFieldUniqueRowValuesResponse(rsp)
}






// TypeFormulaFieldWithBodyWithResponse request with arbitrary body returning *TypeFormulaFieldResponse
func (c *ClientWithResponses) TypeFormulaFieldWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error){
    rsp, err := c.TypeFormulaFieldWithBody(ctx, tableId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTypeFormulaFieldResponse(rsp)
}


func (c *ClientWithResponses) TypeFormulaFieldWithResponse(ctx context.Context, tableId int, body TypeFormulaFieldJSONRequestBody, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error) {
    rsp, err := c.TypeFormulaField(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTypeFormulaFieldResponse(rsp)
}


func (c *ClientWithResponses) TypeFormulaFieldWithFormdataBodyWithResponse(ctx context.Context, tableId int, body TypeFormulaFieldFormdataRequestBody, reqEditors... RequestEditorFn) (*TypeFormulaFieldResponse, error) {
    rsp, err := c.TypeFormulaFieldWithFormdataBody(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTypeFormulaFieldResponse(rsp)
}








// ListDatabaseTableRowNamesWithResponse request returning *ListDatabaseTableRowNamesResponse
func (c *ClientWithResponses) ListDatabaseTableRowNamesWithResponse(ctx context.Context, params *ListDatabaseTableRowNamesParams, reqEditors... RequestEditorFn) (*ListDatabaseTableRowNamesResponse, error){
    rsp, err := c.ListDatabaseTableRowNames(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableRowNamesResponse(rsp)
}






// ListDatabaseTableRowsWithResponse request returning *ListDatabaseTableRowsResponse
func (c *ClientWithResponses) ListDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *ListDatabaseTableRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableRowsResponse, error){
    rsp, err := c.ListDatabaseTableRows(ctx, tableId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableRowsResponse(rsp)
}






// CreateDatabaseTableRowWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableRowResponse
func (c *ClientWithResponses) CreateDatabaseTableRowWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error){
    rsp, err := c.CreateDatabaseTableRowWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableRowResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableRowWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error) {
    rsp, err := c.CreateDatabaseTableRow(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableRowResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableRowWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableRowParams, body CreateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableRowResponse, error) {
    rsp, err := c.CreateDatabaseTableRowWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableRowResponse(rsp)
}








// BatchDeleteDatabaseTableRowsWithBodyWithResponse request with arbitrary body returning *BatchDeleteDatabaseTableRowsResponse
func (c *ClientWithResponses) BatchDeleteDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error){
    rsp, err := c.BatchDeleteDatabaseTableRowsWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchDeleteDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchDeleteDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchDeleteDatabaseTableRows(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchDeleteDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchDeleteDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchDeleteDatabaseTableRowsParams, body BatchDeleteDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchDeleteDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchDeleteDatabaseTableRowsWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchDeleteDatabaseTableRowsResponse(rsp)
}








// BatchUpdateDatabaseTableRowsWithBodyWithResponse request with arbitrary body returning *BatchUpdateDatabaseTableRowsResponse
func (c *ClientWithResponses) BatchUpdateDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error){
    rsp, err := c.BatchUpdateDatabaseTableRowsWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchUpdateDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchUpdateDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchUpdateDatabaseTableRows(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchUpdateDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchUpdateDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchUpdateDatabaseTableRowsParams, body BatchUpdateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchUpdateDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchUpdateDatabaseTableRowsWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchUpdateDatabaseTableRowsResponse(rsp)
}








// BatchCreateDatabaseTableRowsWithBodyWithResponse request with arbitrary body returning *BatchCreateDatabaseTableRowsResponse
func (c *ClientWithResponses) BatchCreateDatabaseTableRowsWithBodyWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error){
    rsp, err := c.BatchCreateDatabaseTableRowsWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchCreateDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchCreateDatabaseTableRowsWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsJSONRequestBody, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchCreateDatabaseTableRows(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchCreateDatabaseTableRowsResponse(rsp)
}


func (c *ClientWithResponses) BatchCreateDatabaseTableRowsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *BatchCreateDatabaseTableRowsParams, body BatchCreateDatabaseTableRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchCreateDatabaseTableRowsResponse, error) {
    rsp, err := c.BatchCreateDatabaseTableRowsWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchCreateDatabaseTableRowsResponse(rsp)
}








// DeleteDatabaseTableRowWithResponse request returning *DeleteDatabaseTableRowResponse
func (c *ClientWithResponses) DeleteDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *DeleteDatabaseTableRowParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableRowResponse, error){
    rsp, err := c.DeleteDatabaseTableRow(ctx, tableId, rowId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableRowResponse(rsp)
}






// GetDatabaseTableRowWithResponse request returning *GetDatabaseTableRowResponse
func (c *ClientWithResponses) GetDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *GetDatabaseTableRowParams, reqEditors... RequestEditorFn) (*GetDatabaseTableRowResponse, error){
    rsp, err := c.GetDatabaseTableRow(ctx, tableId, rowId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableRowResponse(rsp)
}






// UpdateDatabaseTableRowWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableRowResponse
func (c *ClientWithResponses) UpdateDatabaseTableRowWithBodyWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error){
    rsp, err := c.UpdateDatabaseTableRowWithBody(ctx, tableId, rowId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableRowResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error) {
    rsp, err := c.UpdateDatabaseTableRow(ctx, tableId, rowId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableRowResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableRowWithFormdataBodyWithResponse(ctx context.Context, tableId int, rowId int, params *UpdateDatabaseTableRowParams, body UpdateDatabaseTableRowFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableRowResponse, error) {
    rsp, err := c.UpdateDatabaseTableRowWithFormdataBody(ctx, tableId, rowId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableRowResponse(rsp)
}








// GetAdjacentDatabaseTableRowWithResponse request returning *GetAdjacentDatabaseTableRowResponse
func (c *ClientWithResponses) GetAdjacentDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *GetAdjacentDatabaseTableRowParams, reqEditors... RequestEditorFn) (*GetAdjacentDatabaseTableRowResponse, error){
    rsp, err := c.GetAdjacentDatabaseTableRow(ctx, tableId, rowId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetAdjacentDatabaseTableRowResponse(rsp)
}






// MoveDatabaseTableRowWithResponse request returning *MoveDatabaseTableRowResponse
func (c *ClientWithResponses) MoveDatabaseTableRowWithResponse(ctx context.Context, tableId int, rowId int, params *MoveDatabaseTableRowParams, reqEditors... RequestEditorFn) (*MoveDatabaseTableRowResponse, error){
    rsp, err := c.MoveDatabaseTableRow(ctx, tableId, rowId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseMoveDatabaseTableRowResponse(rsp)
}






// ListDatabaseTablesWithResponse request returning *ListDatabaseTablesResponse
func (c *ClientWithResponses) ListDatabaseTablesWithResponse(ctx context.Context, databaseId int, reqEditors... RequestEditorFn) (*ListDatabaseTablesResponse, error){
    rsp, err := c.ListDatabaseTables(ctx, databaseId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTablesResponse(rsp)
}






// CreateDatabaseTableWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableResponse
func (c *ClientWithResponses) CreateDatabaseTableWithBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error){
    rsp, err := c.CreateDatabaseTableWithBody(ctx, databaseId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error) {
    rsp, err := c.CreateDatabaseTable(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableParams, body CreateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableResponse, error) {
    rsp, err := c.CreateDatabaseTableWithFormdataBody(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableResponse(rsp)
}








// CreateDatabaseTableAsyncWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableAsyncResponse
func (c *ClientWithResponses) CreateDatabaseTableAsyncWithBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error){
    rsp, err := c.CreateDatabaseTableAsyncWithBody(ctx, databaseId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableAsyncResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableAsyncWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error) {
    rsp, err := c.CreateDatabaseTableAsync(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableAsyncResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableAsyncWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *CreateDatabaseTableAsyncParams, body CreateDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableAsyncResponse, error) {
    rsp, err := c.CreateDatabaseTableAsyncWithFormdataBody(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableAsyncResponse(rsp)
}








// OrderDatabaseTablesWithBodyWithResponse request with arbitrary body returning *OrderDatabaseTablesResponse
func (c *ClientWithResponses) OrderDatabaseTablesWithBodyWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error){
    rsp, err := c.OrderDatabaseTablesWithBody(ctx, databaseId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTablesResponse(rsp)
}


func (c *ClientWithResponses) OrderDatabaseTablesWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesJSONRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error) {
    rsp, err := c.OrderDatabaseTables(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTablesResponse(rsp)
}


func (c *ClientWithResponses) OrderDatabaseTablesWithFormdataBodyWithResponse(ctx context.Context, databaseId int, params *OrderDatabaseTablesParams, body OrderDatabaseTablesFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTablesResponse, error) {
    rsp, err := c.OrderDatabaseTablesWithFormdataBody(ctx, databaseId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTablesResponse(rsp)
}








// DeleteDatabaseTableWithResponse request returning *DeleteDatabaseTableResponse
func (c *ClientWithResponses) DeleteDatabaseTableWithResponse(ctx context.Context, tableId int, params *DeleteDatabaseTableParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableResponse, error){
    rsp, err := c.DeleteDatabaseTable(ctx, tableId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableResponse(rsp)
}






// GetDatabaseTableWithResponse request returning *GetDatabaseTableResponse
func (c *ClientWithResponses) GetDatabaseTableWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*GetDatabaseTableResponse, error){
    rsp, err := c.GetDatabaseTable(ctx, tableId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableResponse(rsp)
}






// UpdateDatabaseTableWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableResponse
func (c *ClientWithResponses) UpdateDatabaseTableWithBodyWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error){
    rsp, err := c.UpdateDatabaseTableWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error) {
    rsp, err := c.UpdateDatabaseTable(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *UpdateDatabaseTableParams, body UpdateDatabaseTableFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableResponse, error) {
    rsp, err := c.UpdateDatabaseTableWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableResponse(rsp)
}








// DuplicateDatabaseTableAsyncWithResponse request returning *DuplicateDatabaseTableAsyncResponse
func (c *ClientWithResponses) DuplicateDatabaseTableAsyncWithResponse(ctx context.Context, tableId int, params *DuplicateDatabaseTableAsyncParams, reqEditors... RequestEditorFn) (*DuplicateDatabaseTableAsyncResponse, error){
    rsp, err := c.DuplicateDatabaseTableAsync(ctx, tableId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDuplicateDatabaseTableAsyncResponse(rsp)
}






// ImportDataDatabaseTableAsyncWithBodyWithResponse request with arbitrary body returning *ImportDataDatabaseTableAsyncResponse
func (c *ClientWithResponses) ImportDataDatabaseTableAsyncWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error){
    rsp, err := c.ImportDataDatabaseTableAsyncWithBody(ctx, tableId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseImportDataDatabaseTableAsyncResponse(rsp)
}


func (c *ClientWithResponses) ImportDataDatabaseTableAsyncWithResponse(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncJSONRequestBody, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error) {
    rsp, err := c.ImportDataDatabaseTableAsync(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseImportDataDatabaseTableAsyncResponse(rsp)
}


func (c *ClientWithResponses) ImportDataDatabaseTableAsyncWithFormdataBodyWithResponse(ctx context.Context, tableId int, body ImportDataDatabaseTableAsyncFormdataRequestBody, reqEditors... RequestEditorFn) (*ImportDataDatabaseTableAsyncResponse, error) {
    rsp, err := c.ImportDataDatabaseTableAsyncWithFormdataBody(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseImportDataDatabaseTableAsyncResponse(rsp)
}








// ListDatabaseTokensWithResponse request returning *ListDatabaseTokensResponse
func (c *ClientWithResponses) ListDatabaseTokensWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListDatabaseTokensResponse, error){
    rsp, err := c.ListDatabaseTokens(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTokensResponse(rsp)
}






// CreateDatabaseTokenWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTokenResponse
func (c *ClientWithResponses) CreateDatabaseTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error){
    rsp, err := c.CreateDatabaseTokenWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTokenResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTokenWithResponse(ctx context.Context, body CreateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error) {
    rsp, err := c.CreateDatabaseToken(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTokenResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTokenWithFormdataBodyWithResponse(ctx context.Context, body CreateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTokenResponse, error) {
    rsp, err := c.CreateDatabaseTokenWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTokenResponse(rsp)
}








// CheckDatabaseTokenWithResponse request returning *CheckDatabaseTokenResponse
func (c *ClientWithResponses) CheckDatabaseTokenWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CheckDatabaseTokenResponse, error){
    rsp, err := c.CheckDatabaseToken(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCheckDatabaseTokenResponse(rsp)
}






// DeleteDatabaseTokenWithResponse request returning *DeleteDatabaseTokenResponse
func (c *ClientWithResponses) DeleteDatabaseTokenWithResponse(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*DeleteDatabaseTokenResponse, error){
    rsp, err := c.DeleteDatabaseToken(ctx, tokenId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTokenResponse(rsp)
}






// GetDatabaseTokenWithResponse request returning *GetDatabaseTokenResponse
func (c *ClientWithResponses) GetDatabaseTokenWithResponse(ctx context.Context, tokenId int, reqEditors... RequestEditorFn) (*GetDatabaseTokenResponse, error){
    rsp, err := c.GetDatabaseToken(ctx, tokenId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTokenResponse(rsp)
}






// UpdateDatabaseTokenWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTokenResponse
func (c *ClientWithResponses) UpdateDatabaseTokenWithBodyWithResponse(ctx context.Context, tokenId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error){
    rsp, err := c.UpdateDatabaseTokenWithBody(ctx, tokenId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTokenResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTokenWithResponse(ctx context.Context, tokenId int, body UpdateDatabaseTokenJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error) {
    rsp, err := c.UpdateDatabaseToken(ctx, tokenId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTokenResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTokenWithFormdataBodyWithResponse(ctx context.Context, tokenId int, body UpdateDatabaseTokenFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTokenResponse, error) {
    rsp, err := c.UpdateDatabaseTokenWithFormdataBody(ctx, tokenId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTokenResponse(rsp)
}








// PremiumViewAttributesUpdateWithBodyWithResponse request with arbitrary body returning *PremiumViewAttributesUpdateResponse
func (c *ClientWithResponses) PremiumViewAttributesUpdateWithBodyWithResponse(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error){
    rsp, err := c.PremiumViewAttributesUpdateWithBody(ctx, viewId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePremiumViewAttributesUpdateResponse(rsp)
}


func (c *ClientWithResponses) PremiumViewAttributesUpdateWithResponse(ctx context.Context, viewId int, body PremiumViewAttributesUpdateJSONRequestBody, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error) {
    rsp, err := c.PremiumViewAttributesUpdate(ctx, viewId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePremiumViewAttributesUpdateResponse(rsp)
}


func (c *ClientWithResponses) PremiumViewAttributesUpdateWithFormdataBodyWithResponse(ctx context.Context, viewId int, body PremiumViewAttributesUpdateFormdataRequestBody, reqEditors... RequestEditorFn) (*PremiumViewAttributesUpdateResponse, error) {
    rsp, err := c.PremiumViewAttributesUpdateWithFormdataBody(ctx, viewId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePremiumViewAttributesUpdateResponse(rsp)
}








// PublicListDatabaseTableCalendarViewRowsWithResponse request returning *PublicListDatabaseTableCalendarViewRowsResponse
func (c *ClientWithResponses) PublicListDatabaseTableCalendarViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableCalendarViewRowsResponse, error){
    rsp, err := c.PublicListDatabaseTableCalendarViewRows(ctx, slug, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicListDatabaseTableCalendarViewRowsResponse(rsp)
}






// ListDatabaseTableCalendarViewRowsWithResponse request returning *ListDatabaseTableCalendarViewRowsResponse
func (c *ClientWithResponses) ListDatabaseTableCalendarViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableCalendarViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableCalendarViewRowsResponse, error){
    rsp, err := c.ListDatabaseTableCalendarViewRows(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableCalendarViewRowsResponse(rsp)
}






// DeleteDatabaseTableViewDecorationWithResponse request returning *DeleteDatabaseTableViewDecorationResponse
func (c *ClientWithResponses) DeleteDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, params *DeleteDatabaseTableViewDecorationParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewDecorationResponse, error){
    rsp, err := c.DeleteDatabaseTableViewDecoration(ctx, viewDecorationId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableViewDecorationResponse(rsp)
}






// GetDatabaseTableViewDecorationWithResponse request returning *GetDatabaseTableViewDecorationResponse
func (c *ClientWithResponses) GetDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewDecorationResponse, error){
    rsp, err := c.GetDatabaseTableViewDecoration(ctx, viewDecorationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableViewDecorationResponse(rsp)
}






// UpdateDatabaseTableViewDecorationWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableViewDecorationResponse
func (c *ClientWithResponses) UpdateDatabaseTableViewDecorationWithBodyWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error){
    rsp, err := c.UpdateDatabaseTableViewDecorationWithBody(ctx, viewDecorationId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewDecorationResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewDecorationWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewDecoration(ctx, viewDecorationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewDecorationResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewDecorationWithFormdataBodyWithResponse(ctx context.Context, viewDecorationId int, params *UpdateDatabaseTableViewDecorationParams, body UpdateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewDecorationResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewDecorationWithFormdataBody(ctx, viewDecorationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewDecorationResponse(rsp)
}








// DeleteDatabaseTableViewFilterWithResponse request returning *DeleteDatabaseTableViewFilterResponse
func (c *ClientWithResponses) DeleteDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, params *DeleteDatabaseTableViewFilterParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewFilterResponse, error){
    rsp, err := c.DeleteDatabaseTableViewFilter(ctx, viewFilterId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableViewFilterResponse(rsp)
}






// GetDatabaseTableViewFilterWithResponse request returning *GetDatabaseTableViewFilterResponse
func (c *ClientWithResponses) GetDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewFilterResponse, error){
    rsp, err := c.GetDatabaseTableViewFilter(ctx, viewFilterId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableViewFilterResponse(rsp)
}






// UpdateDatabaseTableViewFilterWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableViewFilterResponse
func (c *ClientWithResponses) UpdateDatabaseTableViewFilterWithBodyWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error){
    rsp, err := c.UpdateDatabaseTableViewFilterWithBody(ctx, viewFilterId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFilterResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewFilterWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewFilter(ctx, viewFilterId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFilterResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewFilterWithFormdataBodyWithResponse(ctx context.Context, viewFilterId int, params *UpdateDatabaseTableViewFilterParams, body UpdateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFilterResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewFilterWithFormdataBody(ctx, viewFilterId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFilterResponse(rsp)
}








// GetMetaDatabaseTableFormViewWithResponse request returning *GetMetaDatabaseTableFormViewResponse
func (c *ClientWithResponses) GetMetaDatabaseTableFormViewWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*GetMetaDatabaseTableFormViewResponse, error){
    rsp, err := c.GetMetaDatabaseTableFormView(ctx, slug, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMetaDatabaseTableFormViewResponse(rsp)
}






// SubmitDatabaseTableFormViewWithBodyWithResponse request with arbitrary body returning *SubmitDatabaseTableFormViewResponse
func (c *ClientWithResponses) SubmitDatabaseTableFormViewWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error){
    rsp, err := c.SubmitDatabaseTableFormViewWithBody(ctx, slug, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSubmitDatabaseTableFormViewResponse(rsp)
}


func (c *ClientWithResponses) SubmitDatabaseTableFormViewWithResponse(ctx context.Context, slug string, body SubmitDatabaseTableFormViewJSONRequestBody, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error) {
    rsp, err := c.SubmitDatabaseTableFormView(ctx, slug, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSubmitDatabaseTableFormViewResponse(rsp)
}


func (c *ClientWithResponses) SubmitDatabaseTableFormViewWithFormdataBodyWithResponse(ctx context.Context, slug string, body SubmitDatabaseTableFormViewFormdataRequestBody, reqEditors... RequestEditorFn) (*SubmitDatabaseTableFormViewResponse, error) {
    rsp, err := c.SubmitDatabaseTableFormViewWithFormdataBody(ctx, slug, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSubmitDatabaseTableFormViewResponse(rsp)
}








// UploadFileFormViewWithResponse request returning *UploadFileFormViewResponse
func (c *ClientWithResponses) UploadFileFormViewWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*UploadFileFormViewResponse, error){
    rsp, err := c.UploadFileFormView(ctx, slug, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUploadFileFormViewResponse(rsp)
}






// PublicListDatabaseTableGalleryViewRowsWithResponse request returning *PublicListDatabaseTableGalleryViewRowsResponse
func (c *ClientWithResponses) PublicListDatabaseTableGalleryViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableGalleryViewRowsResponse, error){
    rsp, err := c.PublicListDatabaseTableGalleryViewRows(ctx, slug, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicListDatabaseTableGalleryViewRowsResponse(rsp)
}






// ListDatabaseTableGalleryViewRowsWithResponse request returning *ListDatabaseTableGalleryViewRowsResponse
func (c *ClientWithResponses) ListDatabaseTableGalleryViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableGalleryViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableGalleryViewRowsResponse, error){
    rsp, err := c.ListDatabaseTableGalleryViewRows(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableGalleryViewRowsResponse(rsp)
}






// PublicListDatabaseTableGridViewRowsWithResponse request returning *PublicListDatabaseTableGridViewRowsResponse
func (c *ClientWithResponses) PublicListDatabaseTableGridViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableGridViewRowsResponse, error){
    rsp, err := c.PublicListDatabaseTableGridViewRows(ctx, slug, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicListDatabaseTableGridViewRowsResponse(rsp)
}






// ListDatabaseTableGridViewRowsWithResponse request returning *ListDatabaseTableGridViewRowsResponse
func (c *ClientWithResponses) ListDatabaseTableGridViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableGridViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableGridViewRowsResponse, error){
    rsp, err := c.ListDatabaseTableGridViewRows(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableGridViewRowsResponse(rsp)
}






// FilterDatabaseTableGridViewRowsWithBodyWithResponse request with arbitrary body returning *FilterDatabaseTableGridViewRowsResponse
func (c *ClientWithResponses) FilterDatabaseTableGridViewRowsWithBodyWithResponse(ctx context.Context, viewId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error){
    rsp, err := c.FilterDatabaseTableGridViewRowsWithBody(ctx, viewId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseFilterDatabaseTableGridViewRowsResponse(rsp)
}


func (c *ClientWithResponses) FilterDatabaseTableGridViewRowsWithResponse(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsJSONRequestBody, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error) {
    rsp, err := c.FilterDatabaseTableGridViewRows(ctx, viewId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseFilterDatabaseTableGridViewRowsResponse(rsp)
}


func (c *ClientWithResponses) FilterDatabaseTableGridViewRowsWithFormdataBodyWithResponse(ctx context.Context, viewId int, body FilterDatabaseTableGridViewRowsFormdataRequestBody, reqEditors... RequestEditorFn) (*FilterDatabaseTableGridViewRowsResponse, error) {
    rsp, err := c.FilterDatabaseTableGridViewRowsWithFormdataBody(ctx, viewId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseFilterDatabaseTableGridViewRowsResponse(rsp)
}








// GetDatabaseTableGridViewFieldAggregationWithResponse request returning *GetDatabaseTableGridViewFieldAggregationResponse
func (c *ClientWithResponses) GetDatabaseTableGridViewFieldAggregationWithResponse(ctx context.Context, viewId int, fieldId int, params *GetDatabaseTableGridViewFieldAggregationParams, reqEditors... RequestEditorFn) (*GetDatabaseTableGridViewFieldAggregationResponse, error){
    rsp, err := c.GetDatabaseTableGridViewFieldAggregation(ctx, viewId, fieldId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableGridViewFieldAggregationResponse(rsp)
}






// GetDatabaseTableGridViewFieldAggregationsWithResponse request returning *GetDatabaseTableGridViewFieldAggregationsResponse
func (c *ClientWithResponses) GetDatabaseTableGridViewFieldAggregationsWithResponse(ctx context.Context, viewId int, params *GetDatabaseTableGridViewFieldAggregationsParams, reqEditors... RequestEditorFn) (*GetDatabaseTableGridViewFieldAggregationsResponse, error){
    rsp, err := c.GetDatabaseTableGridViewFieldAggregations(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableGridViewFieldAggregationsResponse(rsp)
}






// PublicListDatabaseTableKanbanViewRowsWithResponse request returning *PublicListDatabaseTableKanbanViewRowsResponse
func (c *ClientWithResponses) PublicListDatabaseTableKanbanViewRowsWithResponse(ctx context.Context, slug string, params *PublicListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*PublicListDatabaseTableKanbanViewRowsResponse, error){
    rsp, err := c.PublicListDatabaseTableKanbanViewRows(ctx, slug, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicListDatabaseTableKanbanViewRowsResponse(rsp)
}






// ListDatabaseTableKanbanViewRowsWithResponse request returning *ListDatabaseTableKanbanViewRowsResponse
func (c *ClientWithResponses) ListDatabaseTableKanbanViewRowsWithResponse(ctx context.Context, viewId int, params *ListDatabaseTableKanbanViewRowsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableKanbanViewRowsResponse, error){
    rsp, err := c.ListDatabaseTableKanbanViewRows(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableKanbanViewRowsResponse(rsp)
}






// DeleteDatabaseTableViewSortWithResponse request returning *DeleteDatabaseTableViewSortResponse
func (c *ClientWithResponses) DeleteDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, params *DeleteDatabaseTableViewSortParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewSortResponse, error){
    rsp, err := c.DeleteDatabaseTableViewSort(ctx, viewSortId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableViewSortResponse(rsp)
}






// GetDatabaseTableViewSortWithResponse request returning *GetDatabaseTableViewSortResponse
func (c *ClientWithResponses) GetDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewSortResponse, error){
    rsp, err := c.GetDatabaseTableViewSort(ctx, viewSortId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableViewSortResponse(rsp)
}






// UpdateDatabaseTableViewSortWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableViewSortResponse
func (c *ClientWithResponses) UpdateDatabaseTableViewSortWithBodyWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error){
    rsp, err := c.UpdateDatabaseTableViewSortWithBody(ctx, viewSortId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewSortResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewSortWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewSort(ctx, viewSortId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewSortResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewSortWithFormdataBodyWithResponse(ctx context.Context, viewSortId int, params *UpdateDatabaseTableViewSortParams, body UpdateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewSortResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewSortWithFormdataBody(ctx, viewSortId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewSortResponse(rsp)
}








// ListDatabaseTableViewsWithResponse request returning *ListDatabaseTableViewsResponse
func (c *ClientWithResponses) ListDatabaseTableViewsWithResponse(ctx context.Context, tableId int, params *ListDatabaseTableViewsParams, reqEditors... RequestEditorFn) (*ListDatabaseTableViewsResponse, error){
    rsp, err := c.ListDatabaseTableViews(ctx, tableId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableViewsResponse(rsp)
}






// CreateDatabaseTableViewWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableViewResponse
func (c *ClientWithResponses) CreateDatabaseTableViewWithBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error){
    rsp, err := c.CreateDatabaseTableViewWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error) {
    rsp, err := c.CreateDatabaseTableView(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *CreateDatabaseTableViewParams, body CreateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewResponse, error) {
    rsp, err := c.CreateDatabaseTableViewWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewResponse(rsp)
}








// OrderDatabaseTableViewsWithBodyWithResponse request with arbitrary body returning *OrderDatabaseTableViewsResponse
func (c *ClientWithResponses) OrderDatabaseTableViewsWithBodyWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error){
    rsp, err := c.OrderDatabaseTableViewsWithBody(ctx, tableId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTableViewsResponse(rsp)
}


func (c *ClientWithResponses) OrderDatabaseTableViewsWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsJSONRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error) {
    rsp, err := c.OrderDatabaseTableViews(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTableViewsResponse(rsp)
}


func (c *ClientWithResponses) OrderDatabaseTableViewsWithFormdataBodyWithResponse(ctx context.Context, tableId int, params *OrderDatabaseTableViewsParams, body OrderDatabaseTableViewsFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderDatabaseTableViewsResponse, error) {
    rsp, err := c.OrderDatabaseTableViewsWithFormdataBody(ctx, tableId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderDatabaseTableViewsResponse(rsp)
}








// DatabaseTablePublicViewLinkRowFieldLookupWithResponse request returning *DatabaseTablePublicViewLinkRowFieldLookupResponse
func (c *ClientWithResponses) DatabaseTablePublicViewLinkRowFieldLookupWithResponse(ctx context.Context, slug string, fieldId int, reqEditors... RequestEditorFn) (*DatabaseTablePublicViewLinkRowFieldLookupResponse, error){
    rsp, err := c.DatabaseTablePublicViewLinkRowFieldLookup(ctx, slug, fieldId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDatabaseTablePublicViewLinkRowFieldLookupResponse(rsp)
}






// PublicViewTokenAuthWithBodyWithResponse request with arbitrary body returning *PublicViewTokenAuthResponse
func (c *ClientWithResponses) PublicViewTokenAuthWithBodyWithResponse(ctx context.Context, slug string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error){
    rsp, err := c.PublicViewTokenAuthWithBody(ctx, slug, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicViewTokenAuthResponse(rsp)
}


func (c *ClientWithResponses) PublicViewTokenAuthWithResponse(ctx context.Context, slug string, body PublicViewTokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error) {
    rsp, err := c.PublicViewTokenAuth(ctx, slug, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicViewTokenAuthResponse(rsp)
}


func (c *ClientWithResponses) PublicViewTokenAuthWithFormdataBodyWithResponse(ctx context.Context, slug string, body PublicViewTokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*PublicViewTokenAuthResponse, error) {
    rsp, err := c.PublicViewTokenAuthWithFormdataBody(ctx, slug, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePublicViewTokenAuthResponse(rsp)
}








// GetPublicViewInfoWithResponse request returning *GetPublicViewInfoResponse
func (c *ClientWithResponses) GetPublicViewInfoWithResponse(ctx context.Context, slug string, reqEditors... RequestEditorFn) (*GetPublicViewInfoResponse, error){
    rsp, err := c.GetPublicViewInfo(ctx, slug, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetPublicViewInfoResponse(rsp)
}






// DeleteDatabaseTableViewWithResponse request returning *DeleteDatabaseTableViewResponse
func (c *ClientWithResponses) DeleteDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *DeleteDatabaseTableViewParams, reqEditors... RequestEditorFn) (*DeleteDatabaseTableViewResponse, error){
    rsp, err := c.DeleteDatabaseTableView(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableViewResponse(rsp)
}






// GetDatabaseTableViewWithResponse request returning *GetDatabaseTableViewResponse
func (c *ClientWithResponses) GetDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *GetDatabaseTableViewParams, reqEditors... RequestEditorFn) (*GetDatabaseTableViewResponse, error){
    rsp, err := c.GetDatabaseTableView(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableViewResponse(rsp)
}






// UpdateDatabaseTableViewWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableViewResponse
func (c *ClientWithResponses) UpdateDatabaseTableViewWithBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error){
    rsp, err := c.UpdateDatabaseTableViewWithBody(ctx, viewId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error) {
    rsp, err := c.UpdateDatabaseTableView(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewParams, body UpdateDatabaseTableViewFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewWithFormdataBody(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewResponse(rsp)
}








// ListDatabaseTableViewDecorationsWithResponse request returning *ListDatabaseTableViewDecorationsResponse
func (c *ClientWithResponses) ListDatabaseTableViewDecorationsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewDecorationsResponse, error){
    rsp, err := c.ListDatabaseTableViewDecorations(ctx, viewId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableViewDecorationsResponse(rsp)
}






// CreateDatabaseTableViewDecorationWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableViewDecorationResponse
func (c *ClientWithResponses) CreateDatabaseTableViewDecorationWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error){
    rsp, err := c.CreateDatabaseTableViewDecorationWithBody(ctx, viewId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewDecorationResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewDecorationWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error) {
    rsp, err := c.CreateDatabaseTableViewDecoration(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewDecorationResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewDecorationWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewDecorationParams, body CreateDatabaseTableViewDecorationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewDecorationResponse, error) {
    rsp, err := c.CreateDatabaseTableViewDecorationWithFormdataBody(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewDecorationResponse(rsp)
}








// DuplicateDatabaseTableViewWithResponse request returning *DuplicateDatabaseTableViewResponse
func (c *ClientWithResponses) DuplicateDatabaseTableViewWithResponse(ctx context.Context, viewId int, params *DuplicateDatabaseTableViewParams, reqEditors... RequestEditorFn) (*DuplicateDatabaseTableViewResponse, error){
    rsp, err := c.DuplicateDatabaseTableView(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDuplicateDatabaseTableViewResponse(rsp)
}






// GetDatabaseTableViewFieldOptionsWithResponse request returning *GetDatabaseTableViewFieldOptionsResponse
func (c *ClientWithResponses) GetDatabaseTableViewFieldOptionsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*GetDatabaseTableViewFieldOptionsResponse, error){
    rsp, err := c.GetDatabaseTableViewFieldOptions(ctx, viewId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableViewFieldOptionsResponse(rsp)
}






// UpdateDatabaseTableViewFieldOptionsWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableViewFieldOptionsResponse
func (c *ClientWithResponses) UpdateDatabaseTableViewFieldOptionsWithBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error){
    rsp, err := c.UpdateDatabaseTableViewFieldOptionsWithBody(ctx, viewId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFieldOptionsResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewFieldOptionsWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewFieldOptions(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFieldOptionsResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableViewFieldOptionsWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *UpdateDatabaseTableViewFieldOptionsParams, body UpdateDatabaseTableViewFieldOptionsFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableViewFieldOptionsResponse, error) {
    rsp, err := c.UpdateDatabaseTableViewFieldOptionsWithFormdataBody(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableViewFieldOptionsResponse(rsp)
}








// ListDatabaseTableViewFiltersWithResponse request returning *ListDatabaseTableViewFiltersResponse
func (c *ClientWithResponses) ListDatabaseTableViewFiltersWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewFiltersResponse, error){
    rsp, err := c.ListDatabaseTableViewFilters(ctx, viewId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableViewFiltersResponse(rsp)
}






// CreateDatabaseTableViewFilterWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableViewFilterResponse
func (c *ClientWithResponses) CreateDatabaseTableViewFilterWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error){
    rsp, err := c.CreateDatabaseTableViewFilterWithBody(ctx, viewId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewFilterResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewFilterWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error) {
    rsp, err := c.CreateDatabaseTableViewFilter(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewFilterResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewFilterWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewFilterParams, body CreateDatabaseTableViewFilterFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewFilterResponse, error) {
    rsp, err := c.CreateDatabaseTableViewFilterWithFormdataBody(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewFilterResponse(rsp)
}








// RotateDatabaseViewSlugWithResponse request returning *RotateDatabaseViewSlugResponse
func (c *ClientWithResponses) RotateDatabaseViewSlugWithResponse(ctx context.Context, viewId int, params *RotateDatabaseViewSlugParams, reqEditors... RequestEditorFn) (*RotateDatabaseViewSlugResponse, error){
    rsp, err := c.RotateDatabaseViewSlug(ctx, viewId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRotateDatabaseViewSlugResponse(rsp)
}






// ListDatabaseTableViewSortingsWithResponse request returning *ListDatabaseTableViewSortingsResponse
func (c *ClientWithResponses) ListDatabaseTableViewSortingsWithResponse(ctx context.Context, viewId int, reqEditors... RequestEditorFn) (*ListDatabaseTableViewSortingsResponse, error){
    rsp, err := c.ListDatabaseTableViewSortings(ctx, viewId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableViewSortingsResponse(rsp)
}






// CreateDatabaseTableViewSortWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableViewSortResponse
func (c *ClientWithResponses) CreateDatabaseTableViewSortWithBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error){
    rsp, err := c.CreateDatabaseTableViewSortWithBody(ctx, viewId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewSortResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewSortWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error) {
    rsp, err := c.CreateDatabaseTableViewSort(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewSortResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableViewSortWithFormdataBodyWithResponse(ctx context.Context, viewId int, params *CreateDatabaseTableViewSortParams, body CreateDatabaseTableViewSortFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableViewSortResponse, error) {
    rsp, err := c.CreateDatabaseTableViewSortWithFormdataBody(ctx, viewId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableViewSortResponse(rsp)
}








// ListDatabaseTableWebhooksWithResponse request returning *ListDatabaseTableWebhooksResponse
func (c *ClientWithResponses) ListDatabaseTableWebhooksWithResponse(ctx context.Context, tableId int, reqEditors... RequestEditorFn) (*ListDatabaseTableWebhooksResponse, error){
    rsp, err := c.ListDatabaseTableWebhooks(ctx, tableId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListDatabaseTableWebhooksResponse(rsp)
}






// CreateDatabaseTableWebhookWithBodyWithResponse request with arbitrary body returning *CreateDatabaseTableWebhookResponse
func (c *ClientWithResponses) CreateDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error){
    rsp, err := c.CreateDatabaseTableWebhookWithBody(ctx, tableId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableWebhookWithResponse(ctx context.Context, tableId int, body CreateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error) {
    rsp, err := c.CreateDatabaseTableWebhook(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) CreateDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, tableId int, body CreateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateDatabaseTableWebhookResponse, error) {
    rsp, err := c.CreateDatabaseTableWebhookWithFormdataBody(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateDatabaseTableWebhookResponse(rsp)
}








// TestCallDatabaseTableWebhookWithBodyWithResponse request with arbitrary body returning *TestCallDatabaseTableWebhookResponse
func (c *ClientWithResponses) TestCallDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error){
    rsp, err := c.TestCallDatabaseTableWebhookWithBody(ctx, tableId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTestCallDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) TestCallDatabaseTableWebhookWithResponse(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error) {
    rsp, err := c.TestCallDatabaseTableWebhook(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTestCallDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) TestCallDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, tableId int, body TestCallDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*TestCallDatabaseTableWebhookResponse, error) {
    rsp, err := c.TestCallDatabaseTableWebhookWithFormdataBody(ctx, tableId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTestCallDatabaseTableWebhookResponse(rsp)
}








// DeleteDatabaseTableWebhookWithResponse request returning *DeleteDatabaseTableWebhookResponse
func (c *ClientWithResponses) DeleteDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*DeleteDatabaseTableWebhookResponse, error){
    rsp, err := c.DeleteDatabaseTableWebhook(ctx, webhookId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteDatabaseTableWebhookResponse(rsp)
}






// GetDatabaseTableWebhookWithResponse request returning *GetDatabaseTableWebhookResponse
func (c *ClientWithResponses) GetDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, reqEditors... RequestEditorFn) (*GetDatabaseTableWebhookResponse, error){
    rsp, err := c.GetDatabaseTableWebhook(ctx, webhookId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDatabaseTableWebhookResponse(rsp)
}






// UpdateDatabaseTableWebhookWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseTableWebhookResponse
func (c *ClientWithResponses) UpdateDatabaseTableWebhookWithBodyWithResponse(ctx context.Context, webhookId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error){
    rsp, err := c.UpdateDatabaseTableWebhookWithBody(ctx, webhookId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableWebhookWithResponse(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error) {
    rsp, err := c.UpdateDatabaseTableWebhook(ctx, webhookId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableWebhookResponse(rsp)
}


func (c *ClientWithResponses) UpdateDatabaseTableWebhookWithFormdataBodyWithResponse(ctx context.Context, webhookId int, body UpdateDatabaseTableWebhookFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateDatabaseTableWebhookResponse, error) {
    rsp, err := c.UpdateDatabaseTableWebhookWithFormdataBody(ctx, webhookId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateDatabaseTableWebhookResponse(rsp)
}








// ListGroupsWithResponse request returning *ListGroupsResponse
func (c *ClientWithResponses) ListGroupsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListGroupsResponse, error){
    rsp, err := c.ListGroups(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListGroupsResponse(rsp)
}






// CreateGroupWithBodyWithResponse request with arbitrary body returning *CreateGroupResponse
func (c *ClientWithResponses) CreateGroupWithBodyWithResponse(ctx context.Context, params *CreateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateGroupResponse, error){
    rsp, err := c.CreateGroupWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupResponse(rsp)
}


func (c *ClientWithResponses) CreateGroupWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*CreateGroupResponse, error) {
    rsp, err := c.CreateGroup(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupResponse(rsp)
}


func (c *ClientWithResponses) CreateGroupWithFormdataBodyWithResponse(ctx context.Context, params *CreateGroupParams, body CreateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateGroupResponse, error) {
    rsp, err := c.CreateGroupWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupResponse(rsp)
}








// ListGroupInvitationsWithResponse request returning *ListGroupInvitationsResponse
func (c *ClientWithResponses) ListGroupInvitationsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*ListGroupInvitationsResponse, error){
    rsp, err := c.ListGroupInvitations(ctx, groupId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListGroupInvitationsResponse(rsp)
}






// CreateGroupInvitationWithBodyWithResponse request with arbitrary body returning *CreateGroupInvitationResponse
func (c *ClientWithResponses) CreateGroupInvitationWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error){
    rsp, err := c.CreateGroupInvitationWithBody(ctx, groupId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupInvitationResponse(rsp)
}


func (c *ClientWithResponses) CreateGroupInvitationWithResponse(ctx context.Context, groupId int, body CreateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error) {
    rsp, err := c.CreateGroupInvitation(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupInvitationResponse(rsp)
}


func (c *ClientWithResponses) CreateGroupInvitationWithFormdataBodyWithResponse(ctx context.Context, groupId int, body CreateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateGroupInvitationResponse, error) {
    rsp, err := c.CreateGroupInvitationWithFormdataBody(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateGroupInvitationResponse(rsp)
}








// GetGroupInvitationByTokenWithResponse request returning *GetGroupInvitationByTokenResponse
func (c *ClientWithResponses) GetGroupInvitationByTokenWithResponse(ctx context.Context, token string, reqEditors... RequestEditorFn) (*GetGroupInvitationByTokenResponse, error){
    rsp, err := c.GetGroupInvitationByToken(ctx, token, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetGroupInvitationByTokenResponse(rsp)
}






// DeleteGroupInvitationWithResponse request returning *DeleteGroupInvitationResponse
func (c *ClientWithResponses) DeleteGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*DeleteGroupInvitationResponse, error){
    rsp, err := c.DeleteGroupInvitation(ctx, groupInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteGroupInvitationResponse(rsp)
}






// GetGroupInvitationWithResponse request returning *GetGroupInvitationResponse
func (c *ClientWithResponses) GetGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*GetGroupInvitationResponse, error){
    rsp, err := c.GetGroupInvitation(ctx, groupInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetGroupInvitationResponse(rsp)
}






// UpdateGroupInvitationWithBodyWithResponse request with arbitrary body returning *UpdateGroupInvitationResponse
func (c *ClientWithResponses) UpdateGroupInvitationWithBodyWithResponse(ctx context.Context, groupInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error){
    rsp, err := c.UpdateGroupInvitationWithBody(ctx, groupInvitationId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupInvitationResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error) {
    rsp, err := c.UpdateGroupInvitation(ctx, groupInvitationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupInvitationResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupInvitationWithFormdataBodyWithResponse(ctx context.Context, groupInvitationId int, body UpdateGroupInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupInvitationResponse, error) {
    rsp, err := c.UpdateGroupInvitationWithFormdataBody(ctx, groupInvitationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupInvitationResponse(rsp)
}








// AcceptGroupInvitationWithResponse request returning *AcceptGroupInvitationResponse
func (c *ClientWithResponses) AcceptGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*AcceptGroupInvitationResponse, error){
    rsp, err := c.AcceptGroupInvitation(ctx, groupInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAcceptGroupInvitationResponse(rsp)
}






// RejectGroupInvitationWithResponse request returning *RejectGroupInvitationResponse
func (c *ClientWithResponses) RejectGroupInvitationWithResponse(ctx context.Context, groupInvitationId int, reqEditors... RequestEditorFn) (*RejectGroupInvitationResponse, error){
    rsp, err := c.RejectGroupInvitation(ctx, groupInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRejectGroupInvitationResponse(rsp)
}






// OrderGroupsWithBodyWithResponse request with arbitrary body returning *OrderGroupsResponse
func (c *ClientWithResponses) OrderGroupsWithBodyWithResponse(ctx context.Context, params *OrderGroupsParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error){
    rsp, err := c.OrderGroupsWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderGroupsResponse(rsp)
}


func (c *ClientWithResponses) OrderGroupsWithResponse(ctx context.Context, params *OrderGroupsParams, body OrderGroupsJSONRequestBody, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error) {
    rsp, err := c.OrderGroups(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderGroupsResponse(rsp)
}


func (c *ClientWithResponses) OrderGroupsWithFormdataBodyWithResponse(ctx context.Context, params *OrderGroupsParams, body OrderGroupsFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderGroupsResponse, error) {
    rsp, err := c.OrderGroupsWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderGroupsResponse(rsp)
}








// ListGroupUsersWithResponse request returning *ListGroupUsersResponse
func (c *ClientWithResponses) ListGroupUsersWithResponse(ctx context.Context, groupId int, params *ListGroupUsersParams, reqEditors... RequestEditorFn) (*ListGroupUsersResponse, error){
    rsp, err := c.ListGroupUsers(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListGroupUsersResponse(rsp)
}






// DeleteGroupUserWithResponse request returning *DeleteGroupUserResponse
func (c *ClientWithResponses) DeleteGroupUserWithResponse(ctx context.Context, groupUserId int, reqEditors... RequestEditorFn) (*DeleteGroupUserResponse, error){
    rsp, err := c.DeleteGroupUser(ctx, groupUserId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteGroupUserResponse(rsp)
}






// UpdateGroupUserWithBodyWithResponse request with arbitrary body returning *UpdateGroupUserResponse
func (c *ClientWithResponses) UpdateGroupUserWithBodyWithResponse(ctx context.Context, groupUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error){
    rsp, err := c.UpdateGroupUserWithBody(ctx, groupUserId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupUserResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupUserWithResponse(ctx context.Context, groupUserId int, body UpdateGroupUserJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error) {
    rsp, err := c.UpdateGroupUser(ctx, groupUserId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupUserResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupUserWithFormdataBodyWithResponse(ctx context.Context, groupUserId int, body UpdateGroupUserFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupUserResponse, error) {
    rsp, err := c.UpdateGroupUserWithFormdataBody(ctx, groupUserId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupUserResponse(rsp)
}








// DeleteGroupWithResponse request returning *DeleteGroupResponse
func (c *ClientWithResponses) DeleteGroupWithResponse(ctx context.Context, groupId int, params *DeleteGroupParams, reqEditors... RequestEditorFn) (*DeleteGroupResponse, error){
    rsp, err := c.DeleteGroup(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteGroupResponse(rsp)
}






// UpdateGroupWithBodyWithResponse request with arbitrary body returning *UpdateGroupResponse
func (c *ClientWithResponses) UpdateGroupWithBodyWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error){
    rsp, err := c.UpdateGroupWithBody(ctx, groupId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error) {
    rsp, err := c.UpdateGroup(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupResponse(rsp)
}


func (c *ClientWithResponses) UpdateGroupWithFormdataBodyWithResponse(ctx context.Context, groupId int, params *UpdateGroupParams, body UpdateGroupFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateGroupResponse, error) {
    rsp, err := c.UpdateGroupWithFormdataBody(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateGroupResponse(rsp)
}








// LeaveGroupWithResponse request returning *LeaveGroupResponse
func (c *ClientWithResponses) LeaveGroupWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*LeaveGroupResponse, error){
    rsp, err := c.LeaveGroup(ctx, groupId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseLeaveGroupResponse(rsp)
}






// GroupPermissionsWithResponse request returning *GroupPermissionsResponse
func (c *ClientWithResponses) GroupPermissionsWithResponse(ctx context.Context, groupId int, reqEditors... RequestEditorFn) (*GroupPermissionsResponse, error){
    rsp, err := c.GroupPermissions(ctx, groupId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupPermissionsResponse(rsp)
}






// DeleteApplicationIntegrationWithResponse request returning *DeleteApplicationIntegrationResponse
func (c *ClientWithResponses) DeleteApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *DeleteApplicationIntegrationParams, reqEditors... RequestEditorFn) (*DeleteApplicationIntegrationResponse, error){
    rsp, err := c.DeleteApplicationIntegration(ctx, integrationId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteApplicationIntegrationResponse(rsp)
}






// UpdateApplicationIntegrationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationIntegrationResponse
func (c *ClientWithResponses) UpdateApplicationIntegrationWithBodyWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error){
    rsp, err := c.UpdateApplicationIntegrationWithBody(ctx, integrationId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) UpdateApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error) {
    rsp, err := c.UpdateApplicationIntegration(ctx, integrationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) UpdateApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, integrationId int, params *UpdateApplicationIntegrationParams, body UpdateApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateApplicationIntegrationResponse, error) {
    rsp, err := c.UpdateApplicationIntegrationWithFormdataBody(ctx, integrationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateApplicationIntegrationResponse(rsp)
}








// MoveApplicationIntegrationWithBodyWithResponse request with arbitrary body returning *MoveApplicationIntegrationResponse
func (c *ClientWithResponses) MoveApplicationIntegrationWithBodyWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error){
    rsp, err := c.MoveApplicationIntegrationWithBody(ctx, integrationId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseMoveApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) MoveApplicationIntegrationWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationJSONRequestBody, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error) {
    rsp, err := c.MoveApplicationIntegration(ctx, integrationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseMoveApplicationIntegrationResponse(rsp)
}


func (c *ClientWithResponses) MoveApplicationIntegrationWithFormdataBodyWithResponse(ctx context.Context, integrationId int, params *MoveApplicationIntegrationParams, body MoveApplicationIntegrationFormdataRequestBody, reqEditors... RequestEditorFn) (*MoveApplicationIntegrationResponse, error) {
    rsp, err := c.MoveApplicationIntegrationWithFormdataBody(ctx, integrationId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseMoveApplicationIntegrationResponse(rsp)
}








// ListJobWithResponse request returning *ListJobResponse
func (c *ClientWithResponses) ListJobWithResponse(ctx context.Context, params *ListJobParams, reqEditors... RequestEditorFn) (*ListJobResponse, error){
    rsp, err := c.ListJob(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListJobResponse(rsp)
}






// CreateJobWithBodyWithResponse request with arbitrary body returning *CreateJobResponse
func (c *ClientWithResponses) CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateJobResponse, error){
    rsp, err := c.CreateJobWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateJobResponse(rsp)
}


func (c *ClientWithResponses) CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors... RequestEditorFn) (*CreateJobResponse, error) {
    rsp, err := c.CreateJob(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateJobResponse(rsp)
}


func (c *ClientWithResponses) CreateJobWithFormdataBodyWithResponse(ctx context.Context, body CreateJobFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateJobResponse, error) {
    rsp, err := c.CreateJobWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateJobResponse(rsp)
}








// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, jobId int, reqEditors... RequestEditorFn) (*GetJobResponse, error){
    rsp, err := c.GetJob(ctx, jobId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetJobResponse(rsp)
}






// AdminLicensesWithResponse request returning *AdminLicensesResponse
func (c *ClientWithResponses) AdminLicensesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*AdminLicensesResponse, error){
    rsp, err := c.AdminLicenses(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminLicensesResponse(rsp)
}






// AdminRegisterLicenseWithBodyWithResponse request with arbitrary body returning *AdminRegisterLicenseResponse
func (c *ClientWithResponses) AdminRegisterLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error){
    rsp, err := c.AdminRegisterLicenseWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRegisterLicenseResponse(rsp)
}


func (c *ClientWithResponses) AdminRegisterLicenseWithResponse(ctx context.Context, body AdminRegisterLicenseJSONRequestBody, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error) {
    rsp, err := c.AdminRegisterLicense(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRegisterLicenseResponse(rsp)
}


func (c *ClientWithResponses) AdminRegisterLicenseWithFormdataBodyWithResponse(ctx context.Context, body AdminRegisterLicenseFormdataRequestBody, reqEditors... RequestEditorFn) (*AdminRegisterLicenseResponse, error) {
    rsp, err := c.AdminRegisterLicenseWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRegisterLicenseResponse(rsp)
}








// AdminRemoveLicenseWithResponse request returning *AdminRemoveLicenseResponse
func (c *ClientWithResponses) AdminRemoveLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminRemoveLicenseResponse, error){
    rsp, err := c.AdminRemoveLicense(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRemoveLicenseResponse(rsp)
}






// AdminGetLicenseWithResponse request returning *AdminGetLicenseResponse
func (c *ClientWithResponses) AdminGetLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminGetLicenseResponse, error){
    rsp, err := c.AdminGetLicense(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminGetLicenseResponse(rsp)
}






// AdminLicenseCheckWithResponse request returning *AdminLicenseCheckResponse
func (c *ClientWithResponses) AdminLicenseCheckWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminLicenseCheckResponse, error){
    rsp, err := c.AdminLicenseCheck(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminLicenseCheckResponse(rsp)
}






// AdminFillRemainingSeatsOfLicenseWithResponse request returning *AdminFillRemainingSeatsOfLicenseResponse
func (c *ClientWithResponses) AdminFillRemainingSeatsOfLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminFillRemainingSeatsOfLicenseResponse, error){
    rsp, err := c.AdminFillRemainingSeatsOfLicense(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminFillRemainingSeatsOfLicenseResponse(rsp)
}






// AdminLicenseLookupUsersWithResponse request returning *AdminLicenseLookupUsersResponse
func (c *ClientWithResponses) AdminLicenseLookupUsersWithResponse(ctx context.Context, id int, params *AdminLicenseLookupUsersParams, reqEditors... RequestEditorFn) (*AdminLicenseLookupUsersResponse, error){
    rsp, err := c.AdminLicenseLookupUsers(ctx, id, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminLicenseLookupUsersResponse(rsp)
}






// AdminRemoveAllUsersFromLicenseWithResponse request returning *AdminRemoveAllUsersFromLicenseResponse
func (c *ClientWithResponses) AdminRemoveAllUsersFromLicenseWithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*AdminRemoveAllUsersFromLicenseResponse, error){
    rsp, err := c.AdminRemoveAllUsersFromLicense(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRemoveAllUsersFromLicenseResponse(rsp)
}






// AdminRemoveUserFromLicenseWithResponse request returning *AdminRemoveUserFromLicenseResponse
func (c *ClientWithResponses) AdminRemoveUserFromLicenseWithResponse(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*AdminRemoveUserFromLicenseResponse, error){
    rsp, err := c.AdminRemoveUserFromLicense(ctx, id, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminRemoveUserFromLicenseResponse(rsp)
}






// AdminAddUserToLicenseWithResponse request returning *AdminAddUserToLicenseResponse
func (c *ClientWithResponses) AdminAddUserToLicenseWithResponse(ctx context.Context, id int, userId int, reqEditors... RequestEditorFn) (*AdminAddUserToLicenseResponse, error){
    rsp, err := c.AdminAddUserToLicense(ctx, id, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAdminAddUserToLicenseResponse(rsp)
}






// GroupListRoleAssignmentsWithResponse request returning *GroupListRoleAssignmentsResponse
func (c *ClientWithResponses) GroupListRoleAssignmentsWithResponse(ctx context.Context, groupId int, params *GroupListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*GroupListRoleAssignmentsResponse, error){
    rsp, err := c.GroupListRoleAssignments(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupListRoleAssignmentsResponse(rsp)
}






// GroupAssignRoleWithBodyWithResponse request with arbitrary body returning *GroupAssignRoleResponse
func (c *ClientWithResponses) GroupAssignRoleWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error){
    rsp, err := c.GroupAssignRoleWithBody(ctx, groupId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) GroupAssignRoleWithResponse(ctx context.Context, groupId int, body GroupAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error) {
    rsp, err := c.GroupAssignRole(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) GroupAssignRoleWithFormdataBodyWithResponse(ctx context.Context, groupId int, body GroupAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupAssignRoleResponse, error) {
    rsp, err := c.GroupAssignRoleWithFormdataBody(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupAssignRoleResponse(rsp)
}








// GroupBatchAssignRoleWithBodyWithResponse request with arbitrary body returning *GroupBatchAssignRoleResponse
func (c *ClientWithResponses) GroupBatchAssignRoleWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error){
    rsp, err := c.GroupBatchAssignRoleWithBody(ctx, groupId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupBatchAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) GroupBatchAssignRoleWithResponse(ctx context.Context, groupId int, body GroupBatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error) {
    rsp, err := c.GroupBatchAssignRole(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupBatchAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) GroupBatchAssignRoleWithFormdataBodyWithResponse(ctx context.Context, groupId int, body GroupBatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupBatchAssignRoleResponse, error) {
    rsp, err := c.GroupBatchAssignRoleWithFormdataBody(ctx, groupId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupBatchAssignRoleResponse(rsp)
}








// ListRoleAssignmentsWithResponse request returning *ListRoleAssignmentsResponse
func (c *ClientWithResponses) ListRoleAssignmentsWithResponse(ctx context.Context, workspaceId int, params *ListRoleAssignmentsParams, reqEditors... RequestEditorFn) (*ListRoleAssignmentsResponse, error){
    rsp, err := c.ListRoleAssignments(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListRoleAssignmentsResponse(rsp)
}






// AssignRoleWithBodyWithResponse request with arbitrary body returning *AssignRoleResponse
func (c *ClientWithResponses) AssignRoleWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AssignRoleResponse, error){
    rsp, err := c.AssignRoleWithBody(ctx, workspaceId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) AssignRoleWithResponse(ctx context.Context, workspaceId int, body AssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*AssignRoleResponse, error) {
    rsp, err := c.AssignRole(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) AssignRoleWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body AssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*AssignRoleResponse, error) {
    rsp, err := c.AssignRoleWithFormdataBody(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAssignRoleResponse(rsp)
}








// BatchAssignRoleWithBodyWithResponse request with arbitrary body returning *BatchAssignRoleResponse
func (c *ClientWithResponses) BatchAssignRoleWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error){
    rsp, err := c.BatchAssignRoleWithBody(ctx, workspaceId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) BatchAssignRoleWithResponse(ctx context.Context, workspaceId int, body BatchAssignRoleJSONRequestBody, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error) {
    rsp, err := c.BatchAssignRole(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchAssignRoleResponse(rsp)
}


func (c *ClientWithResponses) BatchAssignRoleWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body BatchAssignRoleFormdataRequestBody, reqEditors... RequestEditorFn) (*BatchAssignRoleResponse, error) {
    rsp, err := c.BatchAssignRoleWithFormdataBody(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseBatchAssignRoleResponse(rsp)
}








// DeleteRowCommentWithResponse request returning *DeleteRowCommentResponse
func (c *ClientWithResponses) DeleteRowCommentWithResponse(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*DeleteRowCommentResponse, error){
    rsp, err := c.DeleteRowComment(ctx, tableId, commentId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteRowCommentResponse(rsp)
}






// UpdateRowCommentWithResponse request returning *UpdateRowCommentResponse
func (c *ClientWithResponses) UpdateRowCommentWithResponse(ctx context.Context, tableId int, commentId int, reqEditors... RequestEditorFn) (*UpdateRowCommentResponse, error){
    rsp, err := c.UpdateRowComment(ctx, tableId, commentId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateRowCommentResponse(rsp)
}






// GetRowCommentsWithResponse request returning *GetRowCommentsResponse
func (c *ClientWithResponses) GetRowCommentsWithResponse(ctx context.Context, tableId int, rowId int, params *GetRowCommentsParams, reqEditors... RequestEditorFn) (*GetRowCommentsResponse, error){
    rsp, err := c.GetRowComments(ctx, tableId, rowId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetRowCommentsResponse(rsp)
}






// CreateRowCommentWithBodyWithResponse request with arbitrary body returning *CreateRowCommentResponse
func (c *ClientWithResponses) CreateRowCommentWithBodyWithResponse(ctx context.Context, tableId int, rowId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error){
    rsp, err := c.CreateRowCommentWithBody(ctx, tableId, rowId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateRowCommentResponse(rsp)
}


func (c *ClientWithResponses) CreateRowCommentWithResponse(ctx context.Context, tableId int, rowId int, body CreateRowCommentJSONRequestBody, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error) {
    rsp, err := c.CreateRowComment(ctx, tableId, rowId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateRowCommentResponse(rsp)
}


func (c *ClientWithResponses) CreateRowCommentWithFormdataBodyWithResponse(ctx context.Context, tableId int, rowId int, body CreateRowCommentFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateRowCommentResponse, error) {
    rsp, err := c.CreateRowCommentWithFormdataBody(ctx, tableId, rowId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateRowCommentResponse(rsp)
}








// GetSettingsWithResponse request returning *GetSettingsResponse
func (c *ClientWithResponses) GetSettingsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsResponse, error){
    rsp, err := c.GetSettings(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsResponse(rsp)
}






// GetInstanceIdWithResponse request returning *GetInstanceIdResponse
func (c *ClientWithResponses) GetInstanceIdWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetInstanceIdResponse, error){
    rsp, err := c.GetInstanceId(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetInstanceIdResponse(rsp)
}






// UpdateSettingsWithBodyWithResponse request with arbitrary body returning *UpdateSettingsResponse
func (c *ClientWithResponses) UpdateSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error){
    rsp, err := c.UpdateSettingsWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateSettingsResponse(rsp)
}


func (c *ClientWithResponses) UpdateSettingsWithResponse(ctx context.Context, body UpdateSettingsJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error) {
    rsp, err := c.UpdateSettings(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateSettingsResponse(rsp)
}


func (c *ClientWithResponses) UpdateSettingsWithFormdataBodyWithResponse(ctx context.Context, body UpdateSettingsFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateSettingsResponse, error) {
    rsp, err := c.UpdateSettingsWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateSettingsResponse(rsp)
}








// ListSnapshotsWithResponse request returning *ListSnapshotsResponse
func (c *ClientWithResponses) ListSnapshotsWithResponse(ctx context.Context, applicationId int, reqEditors... RequestEditorFn) (*ListSnapshotsResponse, error){
    rsp, err := c.ListSnapshots(ctx, applicationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListSnapshotsResponse(rsp)
}






// CreateSnapshotWithBodyWithResponse request with arbitrary body returning *CreateSnapshotResponse
func (c *ClientWithResponses) CreateSnapshotWithBodyWithResponse(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error){
    rsp, err := c.CreateSnapshotWithBody(ctx, applicationId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSnapshotResponse(rsp)
}


func (c *ClientWithResponses) CreateSnapshotWithResponse(ctx context.Context, applicationId int, body CreateSnapshotJSONRequestBody, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error) {
    rsp, err := c.CreateSnapshot(ctx, applicationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSnapshotResponse(rsp)
}


func (c *ClientWithResponses) CreateSnapshotWithFormdataBodyWithResponse(ctx context.Context, applicationId int, body CreateSnapshotFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateSnapshotResponse, error) {
    rsp, err := c.CreateSnapshotWithFormdataBody(ctx, applicationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSnapshotResponse(rsp)
}








// DeleteSnapshotWithResponse request returning *DeleteSnapshotResponse
func (c *ClientWithResponses) DeleteSnapshotWithResponse(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*DeleteSnapshotResponse, error){
    rsp, err := c.DeleteSnapshot(ctx, snapshotId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteSnapshotResponse(rsp)
}






// RestoreSnapshotWithResponse request returning *RestoreSnapshotResponse
func (c *ClientWithResponses) RestoreSnapshotWithResponse(ctx context.Context, snapshotId int, reqEditors... RequestEditorFn) (*RestoreSnapshotResponse, error){
    rsp, err := c.RestoreSnapshot(ctx, snapshotId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRestoreSnapshotResponse(rsp)
}






// OauthProviderLoginCallbackWithResponse request returning *OauthProviderLoginCallbackResponse
func (c *ClientWithResponses) OauthProviderLoginCallbackWithResponse(ctx context.Context, providerId int, params *OauthProviderLoginCallbackParams, reqEditors... RequestEditorFn) (*OauthProviderLoginCallbackResponse, error){
    rsp, err := c.OauthProviderLoginCallback(ctx, providerId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOauthProviderLoginCallbackResponse(rsp)
}






// OauthProviderLoginRedirectWithResponse request returning *OauthProviderLoginRedirectResponse
func (c *ClientWithResponses) OauthProviderLoginRedirectWithResponse(ctx context.Context, providerId int, params *OauthProviderLoginRedirectParams, reqEditors... RequestEditorFn) (*OauthProviderLoginRedirectResponse, error){
    rsp, err := c.OauthProviderLoginRedirect(ctx, providerId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOauthProviderLoginRedirectResponse(rsp)
}






// AuthProviderSamlAcsUrlWithBodyWithResponse request with arbitrary body returning *AuthProviderSamlAcsUrlResponse
func (c *ClientWithResponses) AuthProviderSamlAcsUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error){
    rsp, err := c.AuthProviderSamlAcsUrlWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAuthProviderSamlAcsUrlResponse(rsp)
}


func (c *ClientWithResponses) AuthProviderSamlAcsUrlWithResponse(ctx context.Context, body AuthProviderSamlAcsUrlJSONRequestBody, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error) {
    rsp, err := c.AuthProviderSamlAcsUrl(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAuthProviderSamlAcsUrlResponse(rsp)
}


func (c *ClientWithResponses) AuthProviderSamlAcsUrlWithFormdataBodyWithResponse(ctx context.Context, body AuthProviderSamlAcsUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*AuthProviderSamlAcsUrlResponse, error) {
    rsp, err := c.AuthProviderSamlAcsUrlWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAuthProviderSamlAcsUrlResponse(rsp)
}








// AuthProviderLoginUrlWithResponse request returning *AuthProviderLoginUrlResponse
func (c *ClientWithResponses) AuthProviderLoginUrlWithResponse(ctx context.Context, params *AuthProviderLoginUrlParams, reqEditors... RequestEditorFn) (*AuthProviderLoginUrlResponse, error){
    rsp, err := c.AuthProviderLoginUrl(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAuthProviderLoginUrlResponse(rsp)
}






// AuthProviderSamlSpLoginWithResponse request returning *AuthProviderSamlSpLoginResponse
func (c *ClientWithResponses) AuthProviderSamlSpLoginWithResponse(ctx context.Context, params *AuthProviderSamlSpLoginParams, reqEditors... RequestEditorFn) (*AuthProviderSamlSpLoginResponse, error){
    rsp, err := c.AuthProviderSamlSpLogin(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAuthProviderSamlSpLoginResponse(rsp)
}






// GroupListTeamsWithResponse request returning *GroupListTeamsResponse
func (c *ClientWithResponses) GroupListTeamsWithResponse(ctx context.Context, groupId int, params *GroupListTeamsParams, reqEditors... RequestEditorFn) (*GroupListTeamsResponse, error){
    rsp, err := c.GroupListTeams(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupListTeamsResponse(rsp)
}






// GroupCreateTeamWithBodyWithResponse request with arbitrary body returning *GroupCreateTeamResponse
func (c *ClientWithResponses) GroupCreateTeamWithBodyWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error){
    rsp, err := c.GroupCreateTeamWithBody(ctx, groupId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateTeamResponse(rsp)
}


func (c *ClientWithResponses) GroupCreateTeamWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error) {
    rsp, err := c.GroupCreateTeam(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateTeamResponse(rsp)
}


func (c *ClientWithResponses) GroupCreateTeamWithFormdataBodyWithResponse(ctx context.Context, groupId string, params *GroupCreateTeamParams, body GroupCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*GroupCreateTeamResponse, error) {
    rsp, err := c.GroupCreateTeamWithFormdataBody(ctx, groupId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupCreateTeamResponse(rsp)
}








// WorkspaceListTeamsWithResponse request returning *WorkspaceListTeamsResponse
func (c *ClientWithResponses) WorkspaceListTeamsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceListTeamsParams, reqEditors... RequestEditorFn) (*WorkspaceListTeamsResponse, error){
    rsp, err := c.WorkspaceListTeams(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceListTeamsResponse(rsp)
}






// WorkspaceCreateTeamWithBodyWithResponse request with arbitrary body returning *WorkspaceCreateTeamResponse
func (c *ClientWithResponses) WorkspaceCreateTeamWithBodyWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error){
    rsp, err := c.WorkspaceCreateTeamWithBody(ctx, workspaceId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateTeamResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceCreateTeamWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error) {
    rsp, err := c.WorkspaceCreateTeam(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateTeamResponse(rsp)
}


func (c *ClientWithResponses) WorkspaceCreateTeamWithFormdataBodyWithResponse(ctx context.Context, workspaceId string, params *WorkspaceCreateTeamParams, body WorkspaceCreateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*WorkspaceCreateTeamResponse, error) {
    rsp, err := c.WorkspaceCreateTeamWithFormdataBody(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceCreateTeamResponse(rsp)
}








// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, teamId int, params *DeleteTeamParams, reqEditors... RequestEditorFn) (*DeleteTeamResponse, error){
    rsp, err := c.DeleteTeam(ctx, teamId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteTeamResponse(rsp)
}






// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, teamId int, reqEditors... RequestEditorFn) (*GetTeamResponse, error){
    rsp, err := c.GetTeam(ctx, teamId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTeamResponse(rsp)
}






// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error){
    rsp, err := c.UpdateTeamWithBody(ctx, teamId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateTeamResponse(rsp)
}


func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error) {
    rsp, err := c.UpdateTeam(ctx, teamId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateTeamResponse(rsp)
}


func (c *ClientWithResponses) UpdateTeamWithFormdataBodyWithResponse(ctx context.Context, teamId string, params *UpdateTeamParams, body UpdateTeamFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateTeamResponse, error) {
    rsp, err := c.UpdateTeamWithFormdataBody(ctx, teamId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateTeamResponse(rsp)
}








// ListTeamSubjectsWithResponse request returning *ListTeamSubjectsResponse
func (c *ClientWithResponses) ListTeamSubjectsWithResponse(ctx context.Context, teamId string, reqEditors... RequestEditorFn) (*ListTeamSubjectsResponse, error){
    rsp, err := c.ListTeamSubjects(ctx, teamId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListTeamSubjectsResponse(rsp)
}






// CreateSubjectWithBodyWithResponse request with arbitrary body returning *CreateSubjectResponse
func (c *ClientWithResponses) CreateSubjectWithBodyWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error){
    rsp, err := c.CreateSubjectWithBody(ctx, teamId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSubjectResponse(rsp)
}


func (c *ClientWithResponses) CreateSubjectWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectJSONRequestBody, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error) {
    rsp, err := c.CreateSubject(ctx, teamId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSubjectResponse(rsp)
}


func (c *ClientWithResponses) CreateSubjectWithFormdataBodyWithResponse(ctx context.Context, teamId string, params *CreateSubjectParams, body CreateSubjectFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateSubjectResponse, error) {
    rsp, err := c.CreateSubjectWithFormdataBody(ctx, teamId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateSubjectResponse(rsp)
}








// DeleteSubjectWithResponse request returning *DeleteSubjectResponse
func (c *ClientWithResponses) DeleteSubjectWithResponse(ctx context.Context, teamId int, subjectId int, params *DeleteSubjectParams, reqEditors... RequestEditorFn) (*DeleteSubjectResponse, error){
    rsp, err := c.DeleteSubject(ctx, teamId, subjectId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteSubjectResponse(rsp)
}






// GetSubjectWithResponse request returning *GetSubjectResponse
func (c *ClientWithResponses) GetSubjectWithResponse(ctx context.Context, teamId string, subjectId int, reqEditors... RequestEditorFn) (*GetSubjectResponse, error){
    rsp, err := c.GetSubject(ctx, teamId, subjectId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSubjectResponse(rsp)
}






// ListTemplatesWithResponse request returning *ListTemplatesResponse
func (c *ClientWithResponses) ListTemplatesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListTemplatesResponse, error){
    rsp, err := c.ListTemplates(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListTemplatesResponse(rsp)
}






// GroupInstallTemplateWithResponse request returning *GroupInstallTemplateResponse
func (c *ClientWithResponses) GroupInstallTemplateWithResponse(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateParams, reqEditors... RequestEditorFn) (*GroupInstallTemplateResponse, error){
    rsp, err := c.GroupInstallTemplate(ctx, groupId, templateId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupInstallTemplateResponse(rsp)
}






// GroupInstallTemplateAsyncWithResponse request returning *GroupInstallTemplateAsyncResponse
func (c *ClientWithResponses) GroupInstallTemplateAsyncWithResponse(ctx context.Context, groupId int, templateId int, params *GroupInstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*GroupInstallTemplateAsyncResponse, error){
    rsp, err := c.GroupInstallTemplateAsync(ctx, groupId, templateId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupInstallTemplateAsyncResponse(rsp)
}






// InstallTemplateWithResponse request returning *InstallTemplateResponse
func (c *ClientWithResponses) InstallTemplateWithResponse(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateParams, reqEditors... RequestEditorFn) (*InstallTemplateResponse, error){
    rsp, err := c.InstallTemplate(ctx, workspaceId, templateId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseInstallTemplateResponse(rsp)
}






// InstallTemplateAsyncWithResponse request returning *InstallTemplateAsyncResponse
func (c *ClientWithResponses) InstallTemplateAsyncWithResponse(ctx context.Context, workspaceId int, templateId int, params *InstallTemplateAsyncParams, reqEditors... RequestEditorFn) (*InstallTemplateAsyncResponse, error){
    rsp, err := c.InstallTemplateAsync(ctx, workspaceId, templateId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseInstallTemplateAsyncResponse(rsp)
}






// GetTrashStructureWithResponse request returning *GetTrashStructureResponse
func (c *ClientWithResponses) GetTrashStructureWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetTrashStructureResponse, error){
    rsp, err := c.GetTrashStructure(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTrashStructureResponse(rsp)
}






// GroupEmptyContentsWithResponse request returning *GroupEmptyContentsResponse
func (c *ClientWithResponses) GroupEmptyContentsWithResponse(ctx context.Context, groupId int, params *GroupEmptyContentsParams, reqEditors... RequestEditorFn) (*GroupEmptyContentsResponse, error){
    rsp, err := c.GroupEmptyContents(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupEmptyContentsResponse(rsp)
}






// GroupGetContentsWithResponse request returning *GroupGetContentsResponse
func (c *ClientWithResponses) GroupGetContentsWithResponse(ctx context.Context, groupId int, params *GroupGetContentsParams, reqEditors... RequestEditorFn) (*GroupGetContentsResponse, error){
    rsp, err := c.GroupGetContents(ctx, groupId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGroupGetContentsResponse(rsp)
}






// RestoreWithBodyWithResponse request with arbitrary body returning *RestoreResponse
func (c *ClientWithResponses) RestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*RestoreResponse, error){
    rsp, err := c.RestoreWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRestoreResponse(rsp)
}


func (c *ClientWithResponses) RestoreWithResponse(ctx context.Context, body RestoreJSONRequestBody, reqEditors... RequestEditorFn) (*RestoreResponse, error) {
    rsp, err := c.Restore(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRestoreResponse(rsp)
}


func (c *ClientWithResponses) RestoreWithFormdataBodyWithResponse(ctx context.Context, body RestoreFormdataRequestBody, reqEditors... RequestEditorFn) (*RestoreResponse, error) {
    rsp, err := c.RestoreWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRestoreResponse(rsp)
}








// WorkspaceEmptyContentsWithResponse request returning *WorkspaceEmptyContentsResponse
func (c *ClientWithResponses) WorkspaceEmptyContentsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceEmptyContentsParams, reqEditors... RequestEditorFn) (*WorkspaceEmptyContentsResponse, error){
    rsp, err := c.WorkspaceEmptyContents(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceEmptyContentsResponse(rsp)
}






// WorkspaceGetContentsWithResponse request returning *WorkspaceGetContentsResponse
func (c *ClientWithResponses) WorkspaceGetContentsWithResponse(ctx context.Context, workspaceId int, params *WorkspaceGetContentsParams, reqEditors... RequestEditorFn) (*WorkspaceGetContentsResponse, error){
    rsp, err := c.WorkspaceGetContents(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspaceGetContentsResponse(rsp)
}






// UploadFileWithResponse request returning *UploadFileResponse
func (c *ClientWithResponses) UploadFileWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*UploadFileResponse, error){
    rsp, err := c.UploadFile(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUploadFileResponse(rsp)
}






// UploadViaUrlWithBodyWithResponse request with arbitrary body returning *UploadViaUrlResponse
func (c *ClientWithResponses) UploadViaUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error){
    rsp, err := c.UploadViaUrlWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUploadViaUrlResponse(rsp)
}


func (c *ClientWithResponses) UploadViaUrlWithResponse(ctx context.Context, body UploadViaUrlJSONRequestBody, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error) {
    rsp, err := c.UploadViaUrl(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUploadViaUrlResponse(rsp)
}


func (c *ClientWithResponses) UploadViaUrlWithFormdataBodyWithResponse(ctx context.Context, body UploadViaUrlFormdataRequestBody, reqEditors... RequestEditorFn) (*UploadViaUrlResponse, error) {
    rsp, err := c.UploadViaUrlWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUploadViaUrlResponse(rsp)
}








// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateUserResponse, error){
    rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateUserResponse(rsp)
}


func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors... RequestEditorFn) (*CreateUserResponse, error) {
    rsp, err := c.CreateUser(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateUserResponse(rsp)
}


func (c *ClientWithResponses) CreateUserWithFormdataBodyWithResponse(ctx context.Context, body CreateUserFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateUserResponse, error) {
    rsp, err := c.CreateUserWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateUserResponse(rsp)
}








// UpdateAccountWithBodyWithResponse request with arbitrary body returning *UpdateAccountResponse
func (c *ClientWithResponses) UpdateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error){
    rsp, err := c.UpdateAccountWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateAccountResponse(rsp)
}


func (c *ClientWithResponses) UpdateAccountWithResponse(ctx context.Context, body UpdateAccountJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error) {
    rsp, err := c.UpdateAccount(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateAccountResponse(rsp)
}


func (c *ClientWithResponses) UpdateAccountWithFormdataBodyWithResponse(ctx context.Context, body UpdateAccountFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateAccountResponse, error) {
    rsp, err := c.UpdateAccountWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateAccountResponse(rsp)
}








// ChangePasswordWithBodyWithResponse request with arbitrary body returning *ChangePasswordResponse
func (c *ClientWithResponses) ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error){
    rsp, err := c.ChangePasswordWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseChangePasswordResponse(rsp)
}


func (c *ClientWithResponses) ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error) {
    rsp, err := c.ChangePassword(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseChangePasswordResponse(rsp)
}


func (c *ClientWithResponses) ChangePasswordWithFormdataBodyWithResponse(ctx context.Context, body ChangePasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*ChangePasswordResponse, error) {
    rsp, err := c.ChangePasswordWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseChangePasswordResponse(rsp)
}








// DashboardWithResponse request returning *DashboardResponse
func (c *ClientWithResponses) DashboardWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*DashboardResponse, error){
    rsp, err := c.Dashboard(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDashboardResponse(rsp)
}






// RedoWithBodyWithResponse request with arbitrary body returning *RedoResponse
func (c *ClientWithResponses) RedoWithBodyWithResponse(ctx context.Context, params *RedoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*RedoResponse, error){
    rsp, err := c.RedoWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRedoResponse(rsp)
}


func (c *ClientWithResponses) RedoWithResponse(ctx context.Context, params *RedoParams, body RedoJSONRequestBody, reqEditors... RequestEditorFn) (*RedoResponse, error) {
    rsp, err := c.Redo(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRedoResponse(rsp)
}


func (c *ClientWithResponses) RedoWithFormdataBodyWithResponse(ctx context.Context, params *RedoParams, body RedoFormdataRequestBody, reqEditors... RequestEditorFn) (*RedoResponse, error) {
    rsp, err := c.RedoWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRedoResponse(rsp)
}








// ResetPasswordWithBodyWithResponse request with arbitrary body returning *ResetPasswordResponse
func (c *ClientWithResponses) ResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error){
    rsp, err := c.ResetPasswordWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseResetPasswordResponse(rsp)
}


func (c *ClientWithResponses) ResetPasswordWithResponse(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error) {
    rsp, err := c.ResetPassword(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseResetPasswordResponse(rsp)
}


func (c *ClientWithResponses) ResetPasswordWithFormdataBodyWithResponse(ctx context.Context, body ResetPasswordFormdataRequestBody, reqEditors... RequestEditorFn) (*ResetPasswordResponse, error) {
    rsp, err := c.ResetPasswordWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseResetPasswordResponse(rsp)
}








// ScheduleAccountDeletionWithResponse request returning *ScheduleAccountDeletionResponse
func (c *ClientWithResponses) ScheduleAccountDeletionWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ScheduleAccountDeletionResponse, error){
    rsp, err := c.ScheduleAccountDeletion(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseScheduleAccountDeletionResponse(rsp)
}






// SendPasswordResetEmailWithBodyWithResponse request with arbitrary body returning *SendPasswordResetEmailResponse
func (c *ClientWithResponses) SendPasswordResetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error){
    rsp, err := c.SendPasswordResetEmailWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSendPasswordResetEmailResponse(rsp)
}


func (c *ClientWithResponses) SendPasswordResetEmailWithResponse(ctx context.Context, body SendPasswordResetEmailJSONRequestBody, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error) {
    rsp, err := c.SendPasswordResetEmail(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSendPasswordResetEmailResponse(rsp)
}


func (c *ClientWithResponses) SendPasswordResetEmailWithFormdataBodyWithResponse(ctx context.Context, body SendPasswordResetEmailFormdataRequestBody, reqEditors... RequestEditorFn) (*SendPasswordResetEmailResponse, error) {
    rsp, err := c.SendPasswordResetEmailWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseSendPasswordResetEmailResponse(rsp)
}








// TokenAuthWithBodyWithResponse request with arbitrary body returning *TokenAuthResponse
func (c *ClientWithResponses) TokenAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenAuthResponse, error){
    rsp, err := c.TokenAuthWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenAuthResponse(rsp)
}


func (c *ClientWithResponses) TokenAuthWithResponse(ctx context.Context, body TokenAuthJSONRequestBody, reqEditors... RequestEditorFn) (*TokenAuthResponse, error) {
    rsp, err := c.TokenAuth(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenAuthResponse(rsp)
}


func (c *ClientWithResponses) TokenAuthWithFormdataBodyWithResponse(ctx context.Context, body TokenAuthFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenAuthResponse, error) {
    rsp, err := c.TokenAuthWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenAuthResponse(rsp)
}








// TokenRefreshWithBodyWithResponse request with arbitrary body returning *TokenRefreshResponse
func (c *ClientWithResponses) TokenRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error){
    rsp, err := c.TokenRefreshWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenRefreshResponse(rsp)
}


func (c *ClientWithResponses) TokenRefreshWithResponse(ctx context.Context, body TokenRefreshJSONRequestBody, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error) {
    rsp, err := c.TokenRefresh(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenRefreshResponse(rsp)
}


func (c *ClientWithResponses) TokenRefreshWithFormdataBodyWithResponse(ctx context.Context, body TokenRefreshFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenRefreshResponse, error) {
    rsp, err := c.TokenRefreshWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenRefreshResponse(rsp)
}








// TokenVerifyWithBodyWithResponse request with arbitrary body returning *TokenVerifyResponse
func (c *ClientWithResponses) TokenVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error){
    rsp, err := c.TokenVerifyWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenVerifyResponse(rsp)
}


func (c *ClientWithResponses) TokenVerifyWithResponse(ctx context.Context, body TokenVerifyJSONRequestBody, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error) {
    rsp, err := c.TokenVerify(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenVerifyResponse(rsp)
}


func (c *ClientWithResponses) TokenVerifyWithFormdataBodyWithResponse(ctx context.Context, body TokenVerifyFormdataRequestBody, reqEditors... RequestEditorFn) (*TokenVerifyResponse, error) {
    rsp, err := c.TokenVerifyWithFormdataBody(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseTokenVerifyResponse(rsp)
}








// UndoWithBodyWithResponse request with arbitrary body returning *UndoResponse
func (c *ClientWithResponses) UndoWithBodyWithResponse(ctx context.Context, params *UndoParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UndoResponse, error){
    rsp, err := c.UndoWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUndoResponse(rsp)
}


func (c *ClientWithResponses) UndoWithResponse(ctx context.Context, params *UndoParams, body UndoJSONRequestBody, reqEditors... RequestEditorFn) (*UndoResponse, error) {
    rsp, err := c.Undo(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUndoResponse(rsp)
}


func (c *ClientWithResponses) UndoWithFormdataBodyWithResponse(ctx context.Context, params *UndoParams, body UndoFormdataRequestBody, reqEditors... RequestEditorFn) (*UndoResponse, error) {
    rsp, err := c.UndoWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUndoResponse(rsp)
}








// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ListWorkspacesResponse, error){
    rsp, err := c.ListWorkspaces(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListWorkspacesResponse(rsp)
}






// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error){
    rsp, err := c.CreateWorkspaceWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceResponse(rsp)
}


func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error) {
    rsp, err := c.CreateWorkspace(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceResponse(rsp)
}


func (c *ClientWithResponses) CreateWorkspaceWithFormdataBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceResponse, error) {
    rsp, err := c.CreateWorkspaceWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceResponse(rsp)
}








// GetWorkspaceInvitationByTokenWithResponse request returning *GetWorkspaceInvitationByTokenResponse
func (c *ClientWithResponses) GetWorkspaceInvitationByTokenWithResponse(ctx context.Context, token string, reqEditors... RequestEditorFn) (*GetWorkspaceInvitationByTokenResponse, error){
    rsp, err := c.GetWorkspaceInvitationByToken(ctx, token, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetWorkspaceInvitationByTokenResponse(rsp)
}






// ListWorkspaceInvitationsWithResponse request returning *ListWorkspaceInvitationsResponse
func (c *ClientWithResponses) ListWorkspaceInvitationsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*ListWorkspaceInvitationsResponse, error){
    rsp, err := c.ListWorkspaceInvitations(ctx, workspaceId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListWorkspaceInvitationsResponse(rsp)
}






// CreateWorkspaceInvitationWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceInvitationResponse
func (c *ClientWithResponses) CreateWorkspaceInvitationWithBodyWithResponse(ctx context.Context, workspaceId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error){
    rsp, err := c.CreateWorkspaceInvitationWithBody(ctx, workspaceId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceInvitationResponse(rsp)
}


func (c *ClientWithResponses) CreateWorkspaceInvitationWithResponse(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error) {
    rsp, err := c.CreateWorkspaceInvitation(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceInvitationResponse(rsp)
}


func (c *ClientWithResponses) CreateWorkspaceInvitationWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, body CreateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*CreateWorkspaceInvitationResponse, error) {
    rsp, err := c.CreateWorkspaceInvitationWithFormdataBody(ctx, workspaceId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCreateWorkspaceInvitationResponse(rsp)
}








// DeleteWorkspaceInvitationWithResponse request returning *DeleteWorkspaceInvitationResponse
func (c *ClientWithResponses) DeleteWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*DeleteWorkspaceInvitationResponse, error){
    rsp, err := c.DeleteWorkspaceInvitation(ctx, workspaceInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteWorkspaceInvitationResponse(rsp)
}






// GetWorkspaceInvitationWithResponse request returning *GetWorkspaceInvitationResponse
func (c *ClientWithResponses) GetWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*GetWorkspaceInvitationResponse, error){
    rsp, err := c.GetWorkspaceInvitation(ctx, workspaceInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetWorkspaceInvitationResponse(rsp)
}






// UpdateWorkspaceInvitationWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceInvitationResponse
func (c *ClientWithResponses) UpdateWorkspaceInvitationWithBodyWithResponse(ctx context.Context, workspaceInvitationId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error){
    rsp, err := c.UpdateWorkspaceInvitationWithBody(ctx, workspaceInvitationId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceInvitationResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error) {
    rsp, err := c.UpdateWorkspaceInvitation(ctx, workspaceInvitationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceInvitationResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceInvitationWithFormdataBodyWithResponse(ctx context.Context, workspaceInvitationId int, body UpdateWorkspaceInvitationFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceInvitationResponse, error) {
    rsp, err := c.UpdateWorkspaceInvitationWithFormdataBody(ctx, workspaceInvitationId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceInvitationResponse(rsp)
}








// AcceptWorkspaceInvitationWithResponse request returning *AcceptWorkspaceInvitationResponse
func (c *ClientWithResponses) AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error){
    rsp, err := c.AcceptWorkspaceInvitation(ctx, workspaceInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseAcceptWorkspaceInvitationResponse(rsp)
}






// RejectWorkspaceInvitationWithResponse request returning *RejectWorkspaceInvitationResponse
func (c *ClientWithResponses) RejectWorkspaceInvitationWithResponse(ctx context.Context, workspaceInvitationId int, reqEditors... RequestEditorFn) (*RejectWorkspaceInvitationResponse, error){
    rsp, err := c.RejectWorkspaceInvitation(ctx, workspaceInvitationId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseRejectWorkspaceInvitationResponse(rsp)
}






// OrderWorkspacesWithBodyWithResponse request with arbitrary body returning *OrderWorkspacesResponse
func (c *ClientWithResponses) OrderWorkspacesWithBodyWithResponse(ctx context.Context, params *OrderWorkspacesParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error){
    rsp, err := c.OrderWorkspacesWithBody(ctx, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderWorkspacesResponse(rsp)
}


func (c *ClientWithResponses) OrderWorkspacesWithResponse(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesJSONRequestBody, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error) {
    rsp, err := c.OrderWorkspaces(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderWorkspacesResponse(rsp)
}


func (c *ClientWithResponses) OrderWorkspacesWithFormdataBodyWithResponse(ctx context.Context, params *OrderWorkspacesParams, body OrderWorkspacesFormdataRequestBody, reqEditors... RequestEditorFn) (*OrderWorkspacesResponse, error) {
    rsp, err := c.OrderWorkspacesWithFormdataBody(ctx, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseOrderWorkspacesResponse(rsp)
}








// ListWorkspaceUsersWithResponse request returning *ListWorkspaceUsersResponse
func (c *ClientWithResponses) ListWorkspaceUsersWithResponse(ctx context.Context, workspaceId int, params *ListWorkspaceUsersParams, reqEditors... RequestEditorFn) (*ListWorkspaceUsersResponse, error){
    rsp, err := c.ListWorkspaceUsers(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseListWorkspaceUsersResponse(rsp)
}






// DeleteWorkspaceUserWithResponse request returning *DeleteWorkspaceUserResponse
func (c *ClientWithResponses) DeleteWorkspaceUserWithResponse(ctx context.Context, workspaceUserId int, reqEditors... RequestEditorFn) (*DeleteWorkspaceUserResponse, error){
    rsp, err := c.DeleteWorkspaceUser(ctx, workspaceUserId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteWorkspaceUserResponse(rsp)
}






// UpdateWorkspaceUserWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceUserResponse
func (c *ClientWithResponses) UpdateWorkspaceUserWithBodyWithResponse(ctx context.Context, workspaceUserId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error){
    rsp, err := c.UpdateWorkspaceUserWithBody(ctx, workspaceUserId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceUserResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceUserWithResponse(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error) {
    rsp, err := c.UpdateWorkspaceUser(ctx, workspaceUserId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceUserResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceUserWithFormdataBodyWithResponse(ctx context.Context, workspaceUserId int, body UpdateWorkspaceUserFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceUserResponse, error) {
    rsp, err := c.UpdateWorkspaceUserWithFormdataBody(ctx, workspaceUserId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceUserResponse(rsp)
}








// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, workspaceId int, params *DeleteWorkspaceParams, reqEditors... RequestEditorFn) (*DeleteWorkspaceResponse, error){
    rsp, err := c.DeleteWorkspace(ctx, workspaceId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteWorkspaceResponse(rsp)
}






// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error){
    rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceId, params, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error) {
    rsp, err := c.UpdateWorkspace(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceResponse(rsp)
}


func (c *ClientWithResponses) UpdateWorkspaceWithFormdataBodyWithResponse(ctx context.Context, workspaceId int, params *UpdateWorkspaceParams, body UpdateWorkspaceFormdataRequestBody, reqEditors... RequestEditorFn) (*UpdateWorkspaceResponse, error) {
    rsp, err := c.UpdateWorkspaceWithFormdataBody(ctx, workspaceId, params, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseUpdateWorkspaceResponse(rsp)
}








// LeaveWorkspaceWithResponse request returning *LeaveWorkspaceResponse
func (c *ClientWithResponses) LeaveWorkspaceWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*LeaveWorkspaceResponse, error){
    rsp, err := c.LeaveWorkspace(ctx, workspaceId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseLeaveWorkspaceResponse(rsp)
}






// WorkspacePermissionsWithResponse request returning *WorkspacePermissionsResponse
func (c *ClientWithResponses) WorkspacePermissionsWithResponse(ctx context.Context, workspaceId int, reqEditors... RequestEditorFn) (*WorkspacePermissionsResponse, error){
    rsp, err := c.WorkspacePermissions(ctx, workspaceId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseWorkspacePermissionsResponse(rsp)
}






// CmsApiPagesRetrieveWithResponse request returning *CmsApiPagesRetrieveResponse
func (c *ClientWithResponses) CmsApiPagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*CmsApiPagesRetrieveResponse, error){
    rsp, err := c.CmsApiPagesRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseCmsApiPagesRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainDocumentsRetrieveWithResponse request returning *ExcludeEachCmsApiMainDocumentsRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainDocumentsRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainDocumentsRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainDocumentsRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainDocumentsFindRetrieveWithResponse request returning *ExcludeEachCmsApiMainDocumentsFindRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainDocumentsFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsFindRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainDocumentsFindRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainDocumentsFindRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainDocumentsRetrieve2WithResponse request returning *ExcludeEachCmsApiMainDocumentsRetrieve2Response
func (c *ClientWithResponses) ExcludeEachCmsApiMainDocumentsRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainDocumentsRetrieve2Response, error){
    rsp, err := c.ExcludeEachCmsApiMainDocumentsRetrieve2(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainDocumentsRetrieve2Response(rsp)
}






// ExcludeEachCmsApiMainImagesRetrieveWithResponse request returning *ExcludeEachCmsApiMainImagesRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainImagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainImagesRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainImagesRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainImagesFindRetrieveWithResponse request returning *ExcludeEachCmsApiMainImagesFindRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainImagesFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesFindRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainImagesFindRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainImagesFindRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainImagesRetrieve2WithResponse request returning *ExcludeEachCmsApiMainImagesRetrieve2Response
func (c *ClientWithResponses) ExcludeEachCmsApiMainImagesRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainImagesRetrieve2Response, error){
    rsp, err := c.ExcludeEachCmsApiMainImagesRetrieve2(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainImagesRetrieve2Response(rsp)
}






// ExcludeEachCmsApiMainPagesRetrieveWithResponse request returning *ExcludeEachCmsApiMainPagesRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainPagesRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainPagesRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainPagesRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainPagesFindRetrieveWithResponse request returning *ExcludeEachCmsApiMainPagesFindRetrieveResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainPagesFindRetrieveWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesFindRetrieveResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainPagesFindRetrieve(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainPagesFindRetrieveResponse(rsp)
}






// ExcludeEachCmsApiMainPagesRetrieve2WithResponse request returning *ExcludeEachCmsApiMainPagesRetrieve2Response
func (c *ClientWithResponses) ExcludeEachCmsApiMainPagesRetrieve2WithResponse(ctx context.Context, id int, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesRetrieve2Response, error){
    rsp, err := c.ExcludeEachCmsApiMainPagesRetrieve2(ctx, id, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainPagesRetrieve2Response(rsp)
}






// ExcludeEachCmsApiMainPagesActionCreateWithResponse request returning *ExcludeEachCmsApiMainPagesActionCreateResponse
func (c *ClientWithResponses) ExcludeEachCmsApiMainPagesActionCreateWithResponse(ctx context.Context, id int, actionName string, reqEditors... RequestEditorFn) (*ExcludeEachCmsApiMainPagesActionCreateResponse, error){
    rsp, err := c.ExcludeEachCmsApiMainPagesActionCreate(ctx, id, actionName, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseExcludeEachCmsApiMainPagesActionCreateResponse(rsp)
}








// ParseEmailTesterResponse parses an HTTP response from a EmailTesterWithResponse call
func ParseEmailTesterResponse(rsp *http.Response) (*EmailTesterResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &EmailTesterResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest EmailTesterResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseFullHealthCheckResponse parses an HTTP response from a FullHealthCheckWithResponse call
func ParseFullHealthCheckResponse(rsp *http.Response) (*FullHealthCheckResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &FullHealthCheckResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest FullHealthCheck
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseAdminAuditLogResponse parses an HTTP response from a AdminAuditLogWithResponse call
func ParseAdminAuditLogResponse(rsp *http.Response) (*AdminAuditLogResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminAuditLogResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []AuditLog
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminAuditLogTypesResponse parses an HTTP response from a AdminAuditLogTypesWithResponse call
func ParseAdminAuditLogTypesResponse(rsp *http.Response) (*AdminAuditLogTypesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminAuditLogTypesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest AuditLogActionType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseExportAuditLogResponse parses an HTTP response from a ExportAuditLogWithResponse call
func ParseExportAuditLogResponse(rsp *http.Response) (*ExportAuditLogResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExportAuditLogResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleAuditLogExportJobResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminAuditLogUsersResponse parses an HTTP response from a AdminAuditLogUsersWithResponse call
func ParseAdminAuditLogUsersResponse(rsp *http.Response) (*AdminAuditLogUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminAuditLogUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []AuditLogUser
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminAuditLogWorkspacesResponse parses an HTTP response from a AdminAuditLogWorkspacesWithResponse call
func ParseAdminAuditLogWorkspacesResponse(rsp *http.Response) (*AdminAuditLogWorkspacesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminAuditLogWorkspacesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []AuditLogWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseListAuthProvidersResponse parses an HTTP response from a ListAuthProvidersWithResponse call
func ParseListAuthProvidersResponse(rsp *http.Response) (*ListAuthProvidersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListAuthProvidersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []AuthenticationProviderAuthProvider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseCreateAuthProviderResponse parses an HTTP response from a CreateAuthProviderWithResponse call
func ParseCreateAuthProviderResponse(rsp *http.Response) (*CreateAuthProviderResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateAuthProviderResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest AuthenticationProviderAuthProvider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseDeleteAuthProviderResponse parses an HTTP response from a DeleteAuthProviderWithResponse call
func ParseDeleteAuthProviderResponse(rsp *http.Response) (*DeleteAuthProviderResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteAuthProviderResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetAuthProviderResponse parses an HTTP response from a GetAuthProviderWithResponse call
func ParseGetAuthProviderResponse(rsp *http.Response) (*GetAuthProviderResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetAuthProviderResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest AuthenticationProviderAuthProvider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateAuthProviderResponse parses an HTTP response from a UpdateAuthProviderWithResponse call
func ParseUpdateAuthProviderResponse(rsp *http.Response) (*UpdateAuthProviderResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateAuthProviderResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest AuthenticationProviderAuthProvider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminDashboardResponse parses an HTTP response from a AdminDashboardWithResponse call
func ParseAdminDashboardResponse(rsp *http.Response) (*AdminDashboardResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminDashboardResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest AdminDashboard
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseAdminListGroupsResponse parses an HTTP response from a AdminListGroupsWithResponse call
func ParseAdminListGroupsResponse(rsp *http.Response) (*AdminListGroupsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminListGroupsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspacesAdminResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminDeleteGroupResponse parses an HTTP response from a AdminDeleteGroupWithResponse call
func ParseAdminDeleteGroupResponse(rsp *http.Response) (*AdminDeleteGroupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminDeleteGroupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminListUsersResponse parses an HTTP response from a AdminListUsersWithResponse call
func ParseAdminListUsersResponse(rsp *http.Response) (*AdminListUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminListUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []UserAdminResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminImpersonateUserResponse parses an HTTP response from a AdminImpersonateUserWithResponse call
func ParseAdminImpersonateUserResponse(rsp *http.Response) (*AdminImpersonateUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminImpersonateUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseAdminDeleteUserResponse parses an HTTP response from a AdminDeleteUserWithResponse call
func ParseAdminDeleteUserResponse(rsp *http.Response) (*AdminDeleteUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminDeleteUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminEditUserResponse parses an HTTP response from a AdminEditUserWithResponse call
func ParseAdminEditUserResponse(rsp *http.Response) (*AdminEditUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminEditUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserAdminResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminListWorkspacesResponse parses an HTTP response from a AdminListWorkspacesWithResponse call
func ParseAdminListWorkspacesResponse(rsp *http.Response) (*AdminListWorkspacesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminListWorkspacesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspacesAdminResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminDeleteWorkspaceResponse parses an HTTP response from a AdminDeleteWorkspaceWithResponse call
func ParseAdminDeleteWorkspaceResponse(rsp *http.Response) (*AdminDeleteWorkspaceResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminDeleteWorkspaceResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseListApplicationIntegrationsResponse parses an HTTP response from a ListApplicationIntegrationsWithResponse call
func ParseListApplicationIntegrationsResponse(rsp *http.Response) (*ListApplicationIntegrationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListApplicationIntegrationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []IntegrationIntegration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateApplicationIntegrationResponse parses an HTTP response from a CreateApplicationIntegrationWithResponse call
func ParseCreateApplicationIntegrationResponse(rsp *http.Response) (*CreateApplicationIntegrationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateApplicationIntegrationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest IntegrationIntegration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListAllApplicationsResponse parses an HTTP response from a ListAllApplicationsWithResponse call
func ParseListAllApplicationsResponse(rsp *http.Response) (*ListAllApplicationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListAllApplicationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseGroupListApplicationsResponse parses an HTTP response from a GroupListApplicationsWithResponse call
func ParseGroupListApplicationsResponse(rsp *http.Response) (*GroupListApplicationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupListApplicationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupCreateApplicationResponse parses an HTTP response from a GroupCreateApplicationWithResponse call
func ParseGroupCreateApplicationResponse(rsp *http.Response) (*GroupCreateApplicationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupCreateApplicationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupOrderApplicationsResponse parses an HTTP response from a GroupOrderApplicationsWithResponse call
func ParseGroupOrderApplicationsResponse(rsp *http.Response) (*GroupOrderApplicationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupOrderApplicationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceListApplicationsResponse parses an HTTP response from a WorkspaceListApplicationsWithResponse call
func ParseWorkspaceListApplicationsResponse(rsp *http.Response) (*WorkspaceListApplicationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceListApplicationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceCreateApplicationResponse parses an HTTP response from a WorkspaceCreateApplicationWithResponse call
func ParseWorkspaceCreateApplicationResponse(rsp *http.Response) (*WorkspaceCreateApplicationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceCreateApplicationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceOrderApplicationsResponse parses an HTTP response from a WorkspaceOrderApplicationsWithResponse call
func ParseWorkspaceOrderApplicationsResponse(rsp *http.Response) (*WorkspaceOrderApplicationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceOrderApplicationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteApplicationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceGetApplicationResponse parses an HTTP response from a WorkspaceGetApplicationWithResponse call
func ParseWorkspaceGetApplicationResponse(rsp *http.Response) (*WorkspaceGetApplicationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceGetApplicationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateApplicationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDuplicateApplicationAsyncResponse parses an HTTP response from a DuplicateApplicationAsyncWithResponse call
func ParseDuplicateApplicationAsyncResponse(rsp *http.Response) (*DuplicateApplicationAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DuplicateApplicationAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleDuplicateApplicationJobType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListAuthProvidersLoginOptionsResponse parses an HTTP response from a ListAuthProvidersLoginOptionsWithResponse call
func ParseListAuthProvidersLoginOptionsResponse(rsp *http.Response) (*ListAuthProvidersLoginOptionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListAuthProvidersLoginOptionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest map[string]interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseExportTableResponse parses an HTTP response from a ExportTableWithResponse call
func ParseExportTableResponse(rsp *http.Response) (*ExportTableResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExportTableResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExportJob
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetExportJobResponse parses an HTTP response from a GetExportJobWithResponse call
func ParseGetExportJobResponse(rsp *http.Response) (*GetExportJobResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetExportJobResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExportJob
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableFieldsResponse parses an HTTP response from a ListDatabaseTableFieldsWithResponse call
func ParseListDatabaseTableFieldsResponse(rsp *http.Response) (*ListDatabaseTableFieldsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableFieldsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []FieldField
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableFieldResponse parses an HTTP response from a CreateDatabaseTableFieldWithResponse call
func ParseCreateDatabaseTableFieldResponse(rsp *http.Response) (*CreateDatabaseTableFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest FieldFieldSerializerWithRelatedFields
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableFieldResponse parses an HTTP response from a DeleteDatabaseTableFieldWithResponse call
func ParseDeleteDatabaseTableFieldResponse(rsp *http.Response) (*DeleteDatabaseTableFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RelatedFields
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableFieldResponse parses an HTTP response from a GetDatabaseTableFieldWithResponse call
func ParseGetDatabaseTableFieldResponse(rsp *http.Response) (*GetDatabaseTableFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest FieldField
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableFieldResponse parses an HTTP response from a UpdateDatabaseTableFieldWithResponse call
func ParseUpdateDatabaseTableFieldResponse(rsp *http.Response) (*UpdateDatabaseTableFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest FieldFieldSerializerWithRelatedFields
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDuplicateTableFieldResponse parses an HTTP response from a DuplicateTableFieldWithResponse call
func ParseDuplicateTableFieldResponse(rsp *http.Response) (*DuplicateTableFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DuplicateTableFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleDuplicateFieldJobType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseFieldUniqueRowValuesResponse parses an HTTP response from a GetDatabaseFieldUniqueRowValuesWithResponse call
func ParseGetDatabaseFieldUniqueRowValuesResponse(rsp *http.Response) (*GetDatabaseFieldUniqueRowValuesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseFieldUniqueRowValuesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UniqueRowValues
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseTypeFormulaFieldResponse parses an HTTP response from a TypeFormulaFieldWithResponse call
func ParseTypeFormulaFieldResponse(rsp *http.Response) (*TypeFormulaFieldResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &TypeFormulaFieldResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TypeFormulaResult
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableRowNamesResponse parses an HTTP response from a ListDatabaseTableRowNamesWithResponse call
func ParseListDatabaseTableRowNamesResponse(rsp *http.Response) (*ListDatabaseTableRowNamesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableRowNamesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// TableId An object containing the row names of table `table_id`.
    TableId *struct {
// RowId the name of the row with id `row_id` from table with id `table_id`.
    RowId *string`json:"{row_id}*,omitempty"`
}`json:"{table_id}*,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableRowsResponse parses an HTTP response from a ListDatabaseTableRowsWithResponse call
func ParseListDatabaseTableRowsResponse(rsp *http.Response) (*ListDatabaseTableRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableRowResponse parses an HTTP response from a CreateDatabaseTableRowWithResponse call
func ParseCreateDatabaseTableRowResponse(rsp *http.Response) (*CreateDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseBatchDeleteDatabaseTableRowsResponse parses an HTTP response from a BatchDeleteDatabaseTableRowsWithResponse call
func ParseBatchDeleteDatabaseTableRowsResponse(rsp *http.Response) (*BatchDeleteDatabaseTableRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &BatchDeleteDatabaseTableRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseBatchUpdateDatabaseTableRowsResponse parses an HTTP response from a BatchUpdateDatabaseTableRowsWithResponse call
func ParseBatchUpdateDatabaseTableRowsResponse(rsp *http.Response) (*BatchUpdateDatabaseTableRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &BatchUpdateDatabaseTableRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleBatchRowsResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseBatchCreateDatabaseTableRowsResponse parses an HTTP response from a BatchCreateDatabaseTableRowsWithResponse call
func ParseBatchCreateDatabaseTableRowsResponse(rsp *http.Response) (*BatchCreateDatabaseTableRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &BatchCreateDatabaseTableRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleBatchRowsResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableRowResponse parses an HTTP response from a DeleteDatabaseTableRowWithResponse call
func ParseDeleteDatabaseTableRowResponse(rsp *http.Response) (*DeleteDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableRowResponse parses an HTTP response from a GetDatabaseTableRowWithResponse call
func ParseGetDatabaseTableRowResponse(rsp *http.Response) (*GetDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableRowResponse parses an HTTP response from a UpdateDatabaseTableRowWithResponse call
func ParseUpdateDatabaseTableRowResponse(rsp *http.Response) (*UpdateDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetAdjacentDatabaseTableRowResponse parses an HTTP response from a GetAdjacentDatabaseTableRowWithResponse call
func ParseGetAdjacentDatabaseTableRowResponse(rsp *http.Response) (*GetAdjacentDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetAdjacentDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseMoveDatabaseTableRowResponse parses an HTTP response from a MoveDatabaseTableRowWithResponse call
func ParseMoveDatabaseTableRowResponse(rsp *http.Response) (*MoveDatabaseTableRowResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &MoveDatabaseTableRowResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ExampleRowResponseSerializerWithUserFieldNames
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTablesResponse parses an HTTP response from a ListDatabaseTablesWithResponse call
func ParseListDatabaseTablesResponse(rsp *http.Response) (*ListDatabaseTablesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTablesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Table
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableResponse parses an HTTP response from a CreateDatabaseTableWithResponse call
func ParseCreateDatabaseTableResponse(rsp *http.Response) (*CreateDatabaseTableResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Table
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableAsyncResponse parses an HTTP response from a CreateDatabaseTableAsyncWithResponse call
func ParseCreateDatabaseTableAsyncResponse(rsp *http.Response) (*CreateDatabaseTableAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleFileImportJobSerializerClass
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseOrderDatabaseTablesResponse parses an HTTP response from a OrderDatabaseTablesWithResponse call
func ParseOrderDatabaseTablesResponse(rsp *http.Response) (*OrderDatabaseTablesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OrderDatabaseTablesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableResponse parses an HTTP response from a DeleteDatabaseTableWithResponse call
func ParseDeleteDatabaseTableResponse(rsp *http.Response) (*DeleteDatabaseTableResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableResponse parses an HTTP response from a GetDatabaseTableWithResponse call
func ParseGetDatabaseTableResponse(rsp *http.Response) (*GetDatabaseTableResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Table
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableResponse parses an HTTP response from a UpdateDatabaseTableWithResponse call
func ParseUpdateDatabaseTableResponse(rsp *http.Response) (*UpdateDatabaseTableResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Table
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDuplicateDatabaseTableAsyncResponse parses an HTTP response from a DuplicateDatabaseTableAsyncWithResponse call
func ParseDuplicateDatabaseTableAsyncResponse(rsp *http.Response) (*DuplicateDatabaseTableAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DuplicateDatabaseTableAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleDuplicateTableJobType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseImportDataDatabaseTableAsyncResponse parses an HTTP response from a ImportDataDatabaseTableAsyncWithResponse call
func ParseImportDataDatabaseTableAsyncResponse(rsp *http.Response) (*ImportDataDatabaseTableAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ImportDataDatabaseTableAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleFileImportJobSerializerClass
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTokensResponse parses an HTTP response from a ListDatabaseTokensWithResponse call
func ParseListDatabaseTokensResponse(rsp *http.Response) (*ListDatabaseTokensResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTokensResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Token
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTokenResponse parses an HTTP response from a CreateDatabaseTokenWithResponse call
func ParseCreateDatabaseTokenResponse(rsp *http.Response) (*CreateDatabaseTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Token
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseCheckDatabaseTokenResponse parses an HTTP response from a CheckDatabaseTokenWithResponse call
func ParseCheckDatabaseTokenResponse(rsp *http.Response) (*CheckDatabaseTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CheckDatabaseTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
var dest struct {
    Detail *403_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N403Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON403 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTokenResponse parses an HTTP response from a DeleteDatabaseTokenWithResponse call
func ParseDeleteDatabaseTokenResponse(rsp *http.Response) (*DeleteDatabaseTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTokenResponse parses an HTTP response from a GetDatabaseTokenWithResponse call
func ParseGetDatabaseTokenResponse(rsp *http.Response) (*GetDatabaseTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Token
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTokenResponse parses an HTTP response from a UpdateDatabaseTokenWithResponse call
func ParseUpdateDatabaseTokenResponse(rsp *http.Response) (*UpdateDatabaseTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Token
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePremiumViewAttributesUpdateResponse parses an HTTP response from a PremiumViewAttributesUpdateWithResponse call
func ParsePremiumViewAttributesUpdateResponse(rsp *http.Response) (*PremiumViewAttributesUpdateResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PremiumViewAttributesUpdateResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest View
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePublicListDatabaseTableCalendarViewRowsResponse parses an HTTP response from a PublicListDatabaseTableCalendarViewRowsWithResponse call
func ParsePublicListDatabaseTableCalendarViewRowsResponse(rsp *http.Response) (*PublicListDatabaseTableCalendarViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PublicListDatabaseTableCalendarViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest CalendarViewExampleResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableCalendarViewRowsResponse parses an HTTP response from a ListDatabaseTableCalendarViewRowsWithResponse call
func ParseListDatabaseTableCalendarViewRowsResponse(rsp *http.Response) (*ListDatabaseTableCalendarViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableCalendarViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest CalendarViewExampleResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableViewDecorationResponse parses an HTTP response from a DeleteDatabaseTableViewDecorationWithResponse call
func ParseDeleteDatabaseTableViewDecorationResponse(rsp *http.Response) (*DeleteDatabaseTableViewDecorationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableViewDecorationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableViewDecorationResponse parses an HTTP response from a GetDatabaseTableViewDecorationWithResponse call
func ParseGetDatabaseTableViewDecorationResponse(rsp *http.Response) (*GetDatabaseTableViewDecorationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableViewDecorationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DecoratorValueProviderTypeViewDecoration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableViewDecorationResponse parses an HTTP response from a UpdateDatabaseTableViewDecorationWithResponse call
func ParseUpdateDatabaseTableViewDecorationResponse(rsp *http.Response) (*UpdateDatabaseTableViewDecorationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableViewDecorationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DecoratorValueProviderTypeViewDecoration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableViewFilterResponse parses an HTTP response from a DeleteDatabaseTableViewFilterWithResponse call
func ParseDeleteDatabaseTableViewFilterResponse(rsp *http.Response) (*DeleteDatabaseTableViewFilterResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableViewFilterResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableViewFilterResponse parses an HTTP response from a GetDatabaseTableViewFilterWithResponse call
func ParseGetDatabaseTableViewFilterResponse(rsp *http.Response) (*GetDatabaseTableViewFilterResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableViewFilterResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewFilter
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableViewFilterResponse parses an HTTP response from a UpdateDatabaseTableViewFilterWithResponse call
func ParseUpdateDatabaseTableViewFilterResponse(rsp *http.Response) (*UpdateDatabaseTableViewFilterResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableViewFilterResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewFilter
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetMetaDatabaseTableFormViewResponse parses an HTTP response from a GetMetaDatabaseTableFormViewWithResponse call
func ParseGetMetaDatabaseTableFormViewResponse(rsp *http.Response) (*GetMetaDatabaseTableFormViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMetaDatabaseTableFormViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicFormView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseSubmitDatabaseTableFormViewResponse parses an HTTP response from a SubmitDatabaseTableFormViewWithResponse call
func ParseSubmitDatabaseTableFormViewResponse(rsp *http.Response) (*SubmitDatabaseTableFormViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &SubmitDatabaseTableFormViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest FormViewSubmitted
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUploadFileFormViewResponse parses an HTTP response from a UploadFileFormViewWithResponse call
func ParseUploadFileFormViewResponse(rsp *http.Response) (*UploadFileFormViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UploadFileFormViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserFile
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePublicListDatabaseTableGalleryViewRowsResponse parses an HTTP response from a PublicListDatabaseTableGalleryViewRowsWithResponse call
func ParsePublicListDatabaseTableGalleryViewRowsResponse(rsp *http.Response) (*PublicListDatabaseTableGalleryViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PublicListDatabaseTableGalleryViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableGalleryViewRowsResponse parses an HTTP response from a ListDatabaseTableGalleryViewRowsWithResponse call
func ParseListDatabaseTableGalleryViewRowsResponse(rsp *http.Response) (*ListDatabaseTableGalleryViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableGalleryViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePublicListDatabaseTableGridViewRowsResponse parses an HTTP response from a PublicListDatabaseTableGridViewRowsWithResponse call
func ParsePublicListDatabaseTableGridViewRowsResponse(rsp *http.Response) (*PublicListDatabaseTableGridViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PublicListDatabaseTableGridViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableGridViewRowsResponse parses an HTTP response from a ListDatabaseTableGridViewRowsWithResponse call
func ParseListDatabaseTableGridViewRowsResponse(rsp *http.Response) (*ListDatabaseTableGridViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableGridViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerWithGridViewFieldOptionsExampleRowResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseFilterDatabaseTableGridViewRowsResponse parses an HTTP response from a FilterDatabaseTableGridViewRowsWithResponse call
func ParseFilterDatabaseTableGridViewRowsResponse(rsp *http.Response) (*FilterDatabaseTableGridViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &FilterDatabaseTableGridViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ExampleRowResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableGridViewFieldAggregationResponse parses an HTTP response from a GetDatabaseTableGridViewFieldAggregationWithResponse call
func ParseGetDatabaseTableGridViewFieldAggregationResponse(rsp *http.Response) (*GetDatabaseTableGridViewFieldAggregationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableGridViewFieldAggregationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// Total The total value count. Only returned if `include=total` is specified as GET parameter.
    Total *int`json:"total,omitempty"`
    Value 200_Value`json:"value"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableGridViewFieldAggregationsResponse parses an HTTP response from a GetDatabaseTableGridViewFieldAggregationsWithResponse call
func ParseGetDatabaseTableGridViewFieldAggregationsResponse(rsp *http.Response) (*GetDatabaseTableGridViewFieldAggregationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableGridViewFieldAggregationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    FieldId *200_FieldId`json:"field_{id},omitempty"`

// Total The total value count. Only returned if `include=total` is specified as GET parameter.
    Total *int`json:"total,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePublicListDatabaseTableKanbanViewRowsResponse parses an HTTP response from a PublicListDatabaseTableKanbanViewRowsWithResponse call
func ParsePublicListDatabaseTableKanbanViewRowsResponse(rsp *http.Response) (*PublicListDatabaseTableKanbanViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PublicListDatabaseTableKanbanViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest KanbanViewExampleResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableKanbanViewRowsResponse parses an HTTP response from a ListDatabaseTableKanbanViewRowsWithResponse call
func ParseListDatabaseTableKanbanViewRowsResponse(rsp *http.Response) (*ListDatabaseTableKanbanViewRowsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableKanbanViewRowsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest KanbanViewExampleResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableViewSortResponse parses an HTTP response from a DeleteDatabaseTableViewSortWithResponse call
func ParseDeleteDatabaseTableViewSortResponse(rsp *http.Response) (*DeleteDatabaseTableViewSortResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableViewSortResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableViewSortResponse parses an HTTP response from a GetDatabaseTableViewSortWithResponse call
func ParseGetDatabaseTableViewSortResponse(rsp *http.Response) (*GetDatabaseTableViewSortResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableViewSortResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewSort
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableViewSortResponse parses an HTTP response from a UpdateDatabaseTableViewSortWithResponse call
func ParseUpdateDatabaseTableViewSortResponse(rsp *http.Response) (*UpdateDatabaseTableViewSortResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableViewSortResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewSort
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableViewsResponse parses an HTTP response from a ListDatabaseTableViewsWithResponse call
func ParseListDatabaseTableViewsResponse(rsp *http.Response) (*ListDatabaseTableViewsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableViewsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableViewResponse parses an HTTP response from a CreateDatabaseTableViewWithResponse call
func ParseCreateDatabaseTableViewResponse(rsp *http.Response) (*CreateDatabaseTableViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseOrderDatabaseTableViewsResponse parses an HTTP response from a OrderDatabaseTableViewsWithResponse call
func ParseOrderDatabaseTableViewsResponse(rsp *http.Response) (*OrderDatabaseTableViewsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OrderDatabaseTableViewsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDatabaseTablePublicViewLinkRowFieldLookupResponse parses an HTTP response from a DatabaseTablePublicViewLinkRowFieldLookupWithResponse call
func ParseDatabaseTablePublicViewLinkRowFieldLookupResponse(rsp *http.Response) (*DatabaseTablePublicViewLinkRowFieldLookupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DatabaseTablePublicViewLinkRowFieldLookupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerLinkRowValue
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParsePublicViewTokenAuthResponse parses an HTTP response from a PublicViewTokenAuthWithResponse call
func ParsePublicViewTokenAuthResponse(rsp *http.Response) (*PublicViewTokenAuthResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PublicViewTokenAuthResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicViewAuthResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetPublicViewInfoResponse parses an HTTP response from a GetPublicViewInfoWithResponse call
func ParseGetPublicViewInfoResponse(rsp *http.Response) (*GetPublicViewInfoResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetPublicViewInfoResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicViewInfo
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableViewResponse parses an HTTP response from a DeleteDatabaseTableViewWithResponse call
func ParseDeleteDatabaseTableViewResponse(rsp *http.Response) (*DeleteDatabaseTableViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableViewResponse parses an HTTP response from a GetDatabaseTableViewWithResponse call
func ParseGetDatabaseTableViewResponse(rsp *http.Response) (*GetDatabaseTableViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableViewResponse parses an HTTP response from a UpdateDatabaseTableViewWithResponse call
func ParseUpdateDatabaseTableViewResponse(rsp *http.Response) (*UpdateDatabaseTableViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableViewDecorationsResponse parses an HTTP response from a ListDatabaseTableViewDecorationsWithResponse call
func ParseListDatabaseTableViewDecorationsResponse(rsp *http.Response) (*ListDatabaseTableViewDecorationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableViewDecorationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []DecoratorValueProviderTypeViewDecoration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableViewDecorationResponse parses an HTTP response from a CreateDatabaseTableViewDecorationWithResponse call
func ParseCreateDatabaseTableViewDecorationResponse(rsp *http.Response) (*CreateDatabaseTableViewDecorationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableViewDecorationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DecoratorValueProviderTypeViewDecoration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDuplicateDatabaseTableViewResponse parses an HTTP response from a DuplicateDatabaseTableViewWithResponse call
func ParseDuplicateDatabaseTableViewResponse(rsp *http.Response) (*DuplicateDatabaseTableViewResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DuplicateDatabaseTableViewResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableViewFieldOptionsResponse parses an HTTP response from a GetDatabaseTableViewFieldOptionsWithResponse call
func ParseGetDatabaseTableViewFieldOptionsResponse(rsp *http.Response) (*GetDatabaseTableViewFieldOptionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableViewFieldOptionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewFieldOptions
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableViewFieldOptionsResponse parses an HTTP response from a UpdateDatabaseTableViewFieldOptionsWithResponse call
func ParseUpdateDatabaseTableViewFieldOptionsResponse(rsp *http.Response) (*UpdateDatabaseTableViewFieldOptionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableViewFieldOptionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewFieldOptions
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableViewFiltersResponse parses an HTTP response from a ListDatabaseTableViewFiltersWithResponse call
func ParseListDatabaseTableViewFiltersResponse(rsp *http.Response) (*ListDatabaseTableViewFiltersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableViewFiltersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ViewFilter
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableViewFilterResponse parses an HTTP response from a CreateDatabaseTableViewFilterWithResponse call
func ParseCreateDatabaseTableViewFilterResponse(rsp *http.Response) (*CreateDatabaseTableViewFilterResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableViewFilterResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewFilter
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseRotateDatabaseViewSlugResponse parses an HTTP response from a RotateDatabaseViewSlugWithResponse call
func ParseRotateDatabaseViewSlugResponse(rsp *http.Response) (*RotateDatabaseViewSlugResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RotateDatabaseViewSlugResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewView
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableViewSortingsResponse parses an HTTP response from a ListDatabaseTableViewSortingsWithResponse call
func ParseListDatabaseTableViewSortingsResponse(rsp *http.Response) (*ListDatabaseTableViewSortingsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableViewSortingsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ViewSort
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableViewSortResponse parses an HTTP response from a CreateDatabaseTableViewSortWithResponse call
func ParseCreateDatabaseTableViewSortResponse(rsp *http.Response) (*CreateDatabaseTableViewSortResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableViewSortResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ViewSort
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListDatabaseTableWebhooksResponse parses an HTTP response from a ListDatabaseTableWebhooksWithResponse call
func ParseListDatabaseTableWebhooksResponse(rsp *http.Response) (*ListDatabaseTableWebhooksResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListDatabaseTableWebhooksResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []TableWebhook
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateDatabaseTableWebhookResponse parses an HTTP response from a CreateDatabaseTableWebhookWithResponse call
func ParseCreateDatabaseTableWebhookResponse(rsp *http.Response) (*CreateDatabaseTableWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateDatabaseTableWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TableWebhook
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseTestCallDatabaseTableWebhookResponse parses an HTTP response from a TestCallDatabaseTableWebhookWithResponse call
func ParseTestCallDatabaseTableWebhookResponse(rsp *http.Response) (*TestCallDatabaseTableWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &TestCallDatabaseTableWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TableWebhookTestCallResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteDatabaseTableWebhookResponse parses an HTTP response from a DeleteDatabaseTableWebhookWithResponse call
func ParseDeleteDatabaseTableWebhookResponse(rsp *http.Response) (*DeleteDatabaseTableWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteDatabaseTableWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetDatabaseTableWebhookResponse parses an HTTP response from a GetDatabaseTableWebhookWithResponse call
func ParseGetDatabaseTableWebhookResponse(rsp *http.Response) (*GetDatabaseTableWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDatabaseTableWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TableWebhook
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateDatabaseTableWebhookResponse parses an HTTP response from a UpdateDatabaseTableWebhookWithResponse call
func ParseUpdateDatabaseTableWebhookResponse(rsp *http.Response) (*UpdateDatabaseTableWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateDatabaseTableWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TableWebhook
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListGroupsResponse parses an HTTP response from a ListGroupsWithResponse call
func ParseListGroupsResponse(rsp *http.Response) (*ListGroupsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListGroupsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseCreateGroupResponse parses an HTTP response from a CreateGroupWithResponse call
func ParseCreateGroupResponse(rsp *http.Response) (*CreateGroupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateGroupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseListGroupInvitationsResponse parses an HTTP response from a ListGroupInvitationsWithResponse call
func ParseListGroupInvitationsResponse(rsp *http.Response) (*ListGroupInvitationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListGroupInvitationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateGroupInvitationResponse parses an HTTP response from a CreateGroupInvitationWithResponse call
func ParseCreateGroupInvitationResponse(rsp *http.Response) (*CreateGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetGroupInvitationByTokenResponse parses an HTTP response from a GetGroupInvitationByTokenWithResponse call
func ParseGetGroupInvitationByTokenResponse(rsp *http.Response) (*GetGroupInvitationByTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetGroupInvitationByTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserWorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteGroupInvitationResponse parses an HTTP response from a DeleteGroupInvitationWithResponse call
func ParseDeleteGroupInvitationResponse(rsp *http.Response) (*DeleteGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetGroupInvitationResponse parses an HTTP response from a GetGroupInvitationWithResponse call
func ParseGetGroupInvitationResponse(rsp *http.Response) (*GetGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateGroupInvitationResponse parses an HTTP response from a UpdateGroupInvitationWithResponse call
func ParseUpdateGroupInvitationResponse(rsp *http.Response) (*UpdateGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAcceptGroupInvitationResponse parses an HTTP response from a AcceptGroupInvitationWithResponse call
func ParseAcceptGroupInvitationResponse(rsp *http.Response) (*AcceptGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AcceptGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseRejectGroupInvitationResponse parses an HTTP response from a RejectGroupInvitationWithResponse call
func ParseRejectGroupInvitationResponse(rsp *http.Response) (*RejectGroupInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RejectGroupInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseOrderGroupsResponse parses an HTTP response from a OrderGroupsWithResponse call
func ParseOrderGroupsResponse(rsp *http.Response) (*OrderGroupsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OrderGroupsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseListGroupUsersResponse parses an HTTP response from a ListGroupUsersWithResponse call
func ParseListGroupUsersResponse(rsp *http.Response) (*ListGroupUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListGroupUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ListWorkspaceUsersWithMemberData
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteGroupUserResponse parses an HTTP response from a DeleteGroupUserWithResponse call
func ParseDeleteGroupUserResponse(rsp *http.Response) (*DeleteGroupUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteGroupUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateGroupUserResponse parses an HTTP response from a UpdateGroupUserWithResponse call
func ParseUpdateGroupUserResponse(rsp *http.Response) (*UpdateGroupUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateGroupUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUser
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteGroupResponse parses an HTTP response from a DeleteGroupWithResponse call
func ParseDeleteGroupResponse(rsp *http.Response) (*DeleteGroupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteGroupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateGroupResponse parses an HTTP response from a UpdateGroupWithResponse call
func ParseUpdateGroupResponse(rsp *http.Response) (*UpdateGroupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateGroupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Workspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseLeaveGroupResponse parses an HTTP response from a LeaveGroupWithResponse call
func ParseLeaveGroupResponse(rsp *http.Response) (*LeaveGroupResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &LeaveGroupResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupPermissionsResponse parses an HTTP response from a GroupPermissionsWithResponse call
func ParseGroupPermissionsResponse(rsp *http.Response) (*GroupPermissionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupPermissionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []PermissionObject
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteApplicationIntegrationResponse parses an HTTP response from a DeleteApplicationIntegrationWithResponse call
func ParseDeleteApplicationIntegrationResponse(rsp *http.Response) (*DeleteApplicationIntegrationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteApplicationIntegrationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateApplicationIntegrationResponse parses an HTTP response from a UpdateApplicationIntegrationWithResponse call
func ParseUpdateApplicationIntegrationResponse(rsp *http.Response) (*UpdateApplicationIntegrationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateApplicationIntegrationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest IntegrationIntegration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseMoveApplicationIntegrationResponse parses an HTTP response from a MoveApplicationIntegrationWithResponse call
func ParseMoveApplicationIntegrationResponse(rsp *http.Response) (*MoveApplicationIntegrationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &MoveApplicationIntegrationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest IntegrationIntegration
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListJobResponse parses an HTTP response from a ListJobWithResponse call
func ParseListJobResponse(rsp *http.Response) (*ListJobResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListJobResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []JobTypeJob
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseCreateJobResponse parses an HTTP response from a CreateJobWithResponse call
func ParseCreateJobResponse(rsp *http.Response) (*CreateJobResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateJobResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest JobTypeJob
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetJobResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest JobTypeJob
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminLicensesResponse parses an HTTP response from a AdminLicensesWithResponse call
func ParseAdminLicensesResponse(rsp *http.Response) (*AdminLicensesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminLicensesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []License
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseAdminRegisterLicenseResponse parses an HTTP response from a AdminRegisterLicenseWithResponse call
func ParseAdminRegisterLicenseResponse(rsp *http.Response) (*AdminRegisterLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminRegisterLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest License
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAdminRemoveLicenseResponse parses an HTTP response from a AdminRemoveLicenseWithResponse call
func ParseAdminRemoveLicenseResponse(rsp *http.Response) (*AdminRemoveLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminRemoveLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminGetLicenseResponse parses an HTTP response from a AdminGetLicenseWithResponse call
func ParseAdminGetLicenseResponse(rsp *http.Response) (*AdminGetLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminGetLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest LicenseWithUsers
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminLicenseCheckResponse parses an HTTP response from a AdminLicenseCheckWithResponse call
func ParseAdminLicenseCheckResponse(rsp *http.Response) (*AdminLicenseCheckResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminLicenseCheckResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest LicenseWithUsers
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminFillRemainingSeatsOfLicenseResponse parses an HTTP response from a AdminFillRemainingSeatsOfLicenseWithResponse call
func ParseAdminFillRemainingSeatsOfLicenseResponse(rsp *http.Response) (*AdminFillRemainingSeatsOfLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminFillRemainingSeatsOfLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []LicenseUser
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminLicenseLookupUsersResponse parses an HTTP response from a AdminLicenseLookupUsersWithResponse call
func ParseAdminLicenseLookupUsersResponse(rsp *http.Response) (*AdminLicenseLookupUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminLicenseLookupUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerLicenseUserLookup
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminRemoveAllUsersFromLicenseResponse parses an HTTP response from a AdminRemoveAllUsersFromLicenseWithResponse call
func ParseAdminRemoveAllUsersFromLicenseResponse(rsp *http.Response) (*AdminRemoveAllUsersFromLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminRemoveAllUsersFromLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminRemoveUserFromLicenseResponse parses an HTTP response from a AdminRemoveUserFromLicenseWithResponse call
func ParseAdminRemoveUserFromLicenseResponse(rsp *http.Response) (*AdminRemoveUserFromLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminRemoveUserFromLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAdminAddUserToLicenseResponse parses an HTTP response from a AdminAddUserToLicenseWithResponse call
func ParseAdminAddUserToLicenseResponse(rsp *http.Response) (*AdminAddUserToLicenseResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AdminAddUserToLicenseResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest LicenseUser
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupListRoleAssignmentsResponse parses an HTTP response from a GroupListRoleAssignmentsWithResponse call
func ParseGroupListRoleAssignmentsResponse(rsp *http.Response) (*GroupListRoleAssignmentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupListRoleAssignmentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupAssignRoleResponse parses an HTTP response from a GroupAssignRoleWithResponse call
func ParseGroupAssignRoleResponse(rsp *http.Response) (*GroupAssignRoleResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupAssignRoleResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupBatchAssignRoleResponse parses an HTTP response from a GroupBatchAssignRoleWithResponse call
func ParseGroupBatchAssignRoleResponse(rsp *http.Response) (*GroupBatchAssignRoleResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupBatchAssignRoleResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListRoleAssignmentsResponse parses an HTTP response from a ListRoleAssignmentsWithResponse call
func ParseListRoleAssignmentsResponse(rsp *http.Response) (*ListRoleAssignmentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListRoleAssignmentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAssignRoleResponse parses an HTTP response from a AssignRoleWithResponse call
func ParseAssignRoleResponse(rsp *http.Response) (*AssignRoleResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AssignRoleResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseBatchAssignRoleResponse parses an HTTP response from a BatchAssignRoleWithResponse call
func ParseBatchAssignRoleResponse(rsp *http.Response) (*BatchAssignRoleResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &BatchAssignRoleResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []OpenApiRoleAssignment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteRowCommentResponse parses an HTTP response from a DeleteRowCommentWithResponse call
func ParseDeleteRowCommentResponse(rsp *http.Response) (*DeleteRowCommentResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteRowCommentResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RowComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateRowCommentResponse parses an HTTP response from a UpdateRowCommentWithResponse call
func ParseUpdateRowCommentResponse(rsp *http.Response) (*UpdateRowCommentResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateRowCommentResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RowComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest struct {
    Detail *401_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N401Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetRowCommentsResponse parses an HTTP response from a GetRowCommentsWithResponse call
func ParseGetRowCommentsResponse(rsp *http.Response) (*GetRowCommentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetRowCommentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerRowComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateRowCommentResponse parses an HTTP response from a CreateRowCommentWithResponse call
func ParseCreateRowCommentResponse(rsp *http.Response) (*CreateRowCommentResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateRowCommentResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RowComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetSettingsResponse parses an HTTP response from a GetSettingsWithResponse call
func ParseGetSettingsResponse(rsp *http.Response) (*GetSettingsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Settings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetInstanceIdResponse parses an HTTP response from a GetInstanceIdWithResponse call
func ParseGetInstanceIdResponse(rsp *http.Response) (*GetInstanceIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetInstanceIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest InstanceId
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseUpdateSettingsResponse parses an HTTP response from a UpdateSettingsWithResponse call
func ParseUpdateSettingsResponse(rsp *http.Response) (*UpdateSettingsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateSettingsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Settings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseListSnapshotsResponse parses an HTTP response from a ListSnapshotsWithResponse call
func ParseListSnapshotsResponse(rsp *http.Response) (*ListSnapshotsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListSnapshotsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Snapshot
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateSnapshotResponse parses an HTTP response from a CreateSnapshotWithResponse call
func ParseCreateSnapshotResponse(rsp *http.Response) (*CreateSnapshotResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateSnapshotResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteSnapshotResponse parses an HTTP response from a DeleteSnapshotWithResponse call
func ParseDeleteSnapshotResponse(rsp *http.Response) (*DeleteSnapshotResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteSnapshotResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseRestoreSnapshotResponse parses an HTTP response from a RestoreSnapshotWithResponse call
func ParseRestoreSnapshotResponse(rsp *http.Response) (*RestoreSnapshotResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RestoreSnapshotResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseOauthProviderLoginCallbackResponse parses an HTTP response from a OauthProviderLoginCallbackWithResponse call
func ParseOauthProviderLoginCallbackResponse(rsp *http.Response) (*OauthProviderLoginCallbackResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OauthProviderLoginCallbackResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseOauthProviderLoginRedirectResponse parses an HTTP response from a OauthProviderLoginRedirectWithResponse call
func ParseOauthProviderLoginRedirectResponse(rsp *http.Response) (*OauthProviderLoginRedirectResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OauthProviderLoginRedirectResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseAuthProviderSamlAcsUrlResponse parses an HTTP response from a AuthProviderSamlAcsUrlWithResponse call
func ParseAuthProviderSamlAcsUrlResponse(rsp *http.Response) (*AuthProviderSamlAcsUrlResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AuthProviderSamlAcsUrlResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseAuthProviderLoginUrlResponse parses an HTTP response from a AuthProviderLoginUrlWithResponse call
func ParseAuthProviderLoginUrlResponse(rsp *http.Response) (*AuthProviderLoginUrlResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AuthProviderLoginUrlResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest map[string]interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseAuthProviderSamlSpLoginResponse parses an HTTP response from a AuthProviderSamlSpLoginWithResponse call
func ParseAuthProviderSamlSpLoginResponse(rsp *http.Response) (*AuthProviderSamlSpLoginResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AuthProviderSamlSpLoginResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGroupListTeamsResponse parses an HTTP response from a GroupListTeamsWithResponse call
func ParseGroupListTeamsResponse(rsp *http.Response) (*GroupListTeamsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupListTeamsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupCreateTeamResponse parses an HTTP response from a GroupCreateTeamWithResponse call
func ParseGroupCreateTeamResponse(rsp *http.Response) (*GroupCreateTeamResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupCreateTeamResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceListTeamsResponse parses an HTTP response from a WorkspaceListTeamsWithResponse call
func ParseWorkspaceListTeamsResponse(rsp *http.Response) (*WorkspaceListTeamsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceListTeamsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspaceCreateTeamResponse parses an HTTP response from a WorkspaceCreateTeamWithResponse call
func ParseWorkspaceCreateTeamResponse(rsp *http.Response) (*WorkspaceCreateTeamResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceCreateTeamResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteTeamResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTeamResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateTeamResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListTeamSubjectsResponse parses an HTTP response from a ListTeamSubjectsWithResponse call
func ParseListTeamSubjectsResponse(rsp *http.Response) (*ListTeamSubjectsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListTeamSubjectsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []TeamSubjectResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseCreateSubjectResponse parses an HTTP response from a CreateSubjectWithResponse call
func ParseCreateSubjectResponse(rsp *http.Response) (*CreateSubjectResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateSubjectResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamSubjectResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteSubjectResponse parses an HTTP response from a DeleteSubjectWithResponse call
func ParseDeleteSubjectResponse(rsp *http.Response) (*DeleteSubjectResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteSubjectResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetSubjectResponse parses an HTTP response from a GetSubjectWithResponse call
func ParseGetSubjectResponse(rsp *http.Response) (*GetSubjectResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSubjectResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TeamSubjectResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListTemplatesResponse parses an HTTP response from a ListTemplatesWithResponse call
func ParseListTemplatesResponse(rsp *http.Response) (*ListTemplatesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListTemplatesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []TemplateCategories
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGroupInstallTemplateResponse parses an HTTP response from a GroupInstallTemplateWithResponse call
func ParseGroupInstallTemplateResponse(rsp *http.Response) (*GroupInstallTemplateResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupInstallTemplateResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGroupInstallTemplateAsyncResponse parses an HTTP response from a GroupInstallTemplateAsyncWithResponse call
func ParseGroupInstallTemplateAsyncResponse(rsp *http.Response) (*GroupInstallTemplateAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupInstallTemplateAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleInstallTemplateJobType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseInstallTemplateResponse parses an HTTP response from a InstallTemplateWithResponse call
func ParseInstallTemplateResponse(rsp *http.Response) (*InstallTemplateResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &InstallTemplateResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Applications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseInstallTemplateAsyncResponse parses an HTTP response from a InstallTemplateAsyncWithResponse call
func ParseInstallTemplateAsyncResponse(rsp *http.Response) (*InstallTemplateAsyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &InstallTemplateAsyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
var dest SingleInstallTemplateJobType
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON202 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetTrashStructureResponse parses an HTTP response from a GetTrashStructureWithResponse call
func ParseGetTrashStructureResponse(rsp *http.Response) (*GetTrashStructureResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTrashStructureResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TrashStructure
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGroupEmptyContentsResponse parses an HTTP response from a GroupEmptyContentsWithResponse call
func ParseGroupEmptyContentsResponse(rsp *http.Response) (*GroupEmptyContentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupEmptyContentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseGroupGetContentsResponse parses an HTTP response from a GroupGetContentsWithResponse call
func ParseGroupGetContentsResponse(rsp *http.Response) (*GroupGetContentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GroupGetContentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerTrashContents
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseRestoreResponse parses an HTTP response from a RestoreWithResponse call
func ParseRestoreResponse(rsp *http.Response) (*RestoreResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RestoreResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseWorkspaceEmptyContentsResponse parses an HTTP response from a WorkspaceEmptyContentsWithResponse call
func ParseWorkspaceEmptyContentsResponse(rsp *http.Response) (*WorkspaceEmptyContentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceEmptyContentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseWorkspaceGetContentsResponse parses an HTTP response from a WorkspaceGetContentsWithResponse call
func ParseWorkspaceGetContentsResponse(rsp *http.Response) (*WorkspaceGetContentsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspaceGetContentsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PaginationSerializerTrashContents
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseUploadFileResponse parses an HTTP response from a UploadFileWithResponse call
func ParseUploadFileResponse(rsp *http.Response) (*UploadFileResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UploadFileResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserFile
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseUploadViaUrlResponse parses an HTTP response from a UploadViaUrlWithResponse call
func ParseUploadViaUrlResponse(rsp *http.Response) (*UploadViaUrlResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UploadViaUrlResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserFile
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// RefreshToken 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours.
    RefreshToken *string`json:"refresh_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateAccountResponse parses an HTTP response from a UpdateAccountWithResponse call
func ParseUpdateAccountResponse(rsp *http.Response) (*UpdateAccountResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateAccountResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Account
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseChangePasswordResponse parses an HTTP response from a ChangePasswordWithResponse call
func ParseChangePasswordResponse(rsp *http.Response) (*ChangePasswordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ChangePasswordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseDashboardResponse parses an HTTP response from a DashboardWithResponse call
func ParseDashboardResponse(rsp *http.Response) (*DashboardResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DashboardResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Dashboard
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseRedoResponse parses an HTTP response from a RedoWithResponse call
func ParseRedoResponse(rsp *http.Response) (*RedoResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RedoResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UndoRedoResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseResetPasswordResponse parses an HTTP response from a ResetPasswordWithResponse call
func ParseResetPasswordResponse(rsp *http.Response) (*ResetPasswordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ResetPasswordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseScheduleAccountDeletionResponse parses an HTTP response from a ScheduleAccountDeletionWithResponse call
func ParseScheduleAccountDeletionResponse(rsp *http.Response) (*ScheduleAccountDeletionResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ScheduleAccountDeletionResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseSendPasswordResetEmailResponse parses an HTTP response from a SendPasswordResetEmailWithResponse call
func ParseSendPasswordResetEmailResponse(rsp *http.Response) (*SendPasswordResetEmailResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &SendPasswordResetEmailResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

}


    return response, nil
}


// ParseTokenAuthResponse parses an HTTP response from a TokenAuthWithResponse call
func ParseTokenAuthResponse(rsp *http.Response) (*TokenAuthResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &TokenAuthResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// RefreshToken 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours.
    RefreshToken *string`json:"refresh_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

}


    return response, nil
}


// ParseTokenRefreshResponse parses an HTTP response from a TokenRefreshWithResponse call
func ParseTokenRefreshResponse(rsp *http.Response) (*TokenRefreshResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &TokenRefreshResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// AccessToken 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes.
    AccessToken *string`json:"access_token,omitempty"`

// Token Deprecated. Use the `access_token` instead.
// Deprecated:
    Token *string`json:"token,omitempty"`

// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

}


    return response, nil
}


// ParseTokenVerifyResponse parses an HTTP response from a TokenVerifyWithResponse call
func ParseTokenVerifyResponse(rsp *http.Response) (*TokenVerifyResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &TokenVerifyResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
// User An object containing information related to the user.
    User *struct {
// FirstName The first name of related user.
    FirstName *string`json:"first_name,omitempty"`

// Language An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
    Language *string`json:"language,omitempty"`

// Username The username of the related user. This is always an email address.
    Username *openapi_types.Email`json:"username,omitempty"`
}`json:"user,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
var dest interface{}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON401 = &dest

}


    return response, nil
}


// ParseUndoResponse parses an HTTP response from a UndoWithResponse call
func ParseUndoResponse(rsp *http.Response) (*UndoResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UndoResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UndoRedoResponse
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListWorkspacesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateWorkspaceResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetWorkspaceInvitationByTokenResponse parses an HTTP response from a GetWorkspaceInvitationByTokenWithResponse call
func ParseGetWorkspaceInvitationByTokenResponse(rsp *http.Response) (*GetWorkspaceInvitationByTokenResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetWorkspaceInvitationByTokenResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserWorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseListWorkspaceInvitationsResponse parses an HTTP response from a ListWorkspaceInvitationsWithResponse call
func ParseListWorkspaceInvitationsResponse(rsp *http.Response) (*ListWorkspaceInvitationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListWorkspaceInvitationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCreateWorkspaceInvitationResponse parses an HTTP response from a CreateWorkspaceInvitationWithResponse call
func ParseCreateWorkspaceInvitationResponse(rsp *http.Response) (*CreateWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CreateWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteWorkspaceInvitationResponse parses an HTTP response from a DeleteWorkspaceInvitationWithResponse call
func ParseDeleteWorkspaceInvitationResponse(rsp *http.Response) (*DeleteWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseGetWorkspaceInvitationResponse parses an HTTP response from a GetWorkspaceInvitationWithResponse call
func ParseGetWorkspaceInvitationResponse(rsp *http.Response) (*GetWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateWorkspaceInvitationResponse parses an HTTP response from a UpdateWorkspaceInvitationWithResponse call
func ParseUpdateWorkspaceInvitationResponse(rsp *http.Response) (*UpdateWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceInvitation
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseAcceptWorkspaceInvitationResponse parses an HTTP response from a AcceptWorkspaceInvitationWithResponse call
func ParseAcceptWorkspaceInvitationResponse(rsp *http.Response) (*AcceptWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &AcceptWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUserWorkspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseRejectWorkspaceInvitationResponse parses an HTTP response from a RejectWorkspaceInvitationWithResponse call
func ParseRejectWorkspaceInvitationResponse(rsp *http.Response) (*RejectWorkspaceInvitationResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &RejectWorkspaceInvitationResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseOrderWorkspacesResponse parses an HTTP response from a OrderWorkspacesWithResponse call
func ParseOrderWorkspacesResponse(rsp *http.Response) (*OrderWorkspacesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &OrderWorkspacesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseListWorkspaceUsersResponse parses an HTTP response from a ListWorkspaceUsersWithResponse call
func ParseListWorkspaceUsersResponse(rsp *http.Response) (*ListWorkspaceUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ListWorkspaceUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ListWorkspaceUsersWithMemberData
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteWorkspaceUserResponse parses an HTTP response from a DeleteWorkspaceUserWithResponse call
func ParseDeleteWorkspaceUserResponse(rsp *http.Response) (*DeleteWorkspaceUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteWorkspaceUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateWorkspaceUserResponse parses an HTTP response from a UpdateWorkspaceUserWithResponse call
func ParseUpdateWorkspaceUserResponse(rsp *http.Response) (*UpdateWorkspaceUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateWorkspaceUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WorkspaceUser
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteWorkspaceResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &UpdateWorkspaceResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Workspace
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseLeaveWorkspaceResponse parses an HTTP response from a LeaveWorkspaceWithResponse call
func ParseLeaveWorkspaceResponse(rsp *http.Response) (*LeaveWorkspaceResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &LeaveWorkspaceResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
var dest struct {
    Detail *400_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N400Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON400 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseWorkspacePermissionsResponse parses an HTTP response from a WorkspacePermissionsWithResponse call
func ParseWorkspacePermissionsResponse(rsp *http.Response) (*WorkspacePermissionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &WorkspacePermissionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []PermissionObject
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
var dest struct {
    Detail *404_Detail`json:"detail,omitempty"`

// Error Machine readable error indicating what went wrong.
    Error *N404Error`json:"error,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON404 = &dest

}


    return response, nil
}


// ParseCmsApiPagesRetrieveResponse parses an HTTP response from a CmsApiPagesRetrieveWithResponse call
func ParseCmsApiPagesRetrieveResponse(rsp *http.Response) (*CmsApiPagesRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &CmsApiPagesRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainDocumentsRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainDocumentsRetrieveWithResponse call
func ParseExcludeEachCmsApiMainDocumentsRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainDocumentsRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainDocumentsRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainDocumentsFindRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainDocumentsFindRetrieveWithResponse call
func ParseExcludeEachCmsApiMainDocumentsFindRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainDocumentsFindRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainDocumentsFindRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainDocumentsRetrieve2Response parses an HTTP response from a ExcludeEachCmsApiMainDocumentsRetrieve2WithResponse call
func ParseExcludeEachCmsApiMainDocumentsRetrieve2Response(rsp *http.Response) (*ExcludeEachCmsApiMainDocumentsRetrieve2Response, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainDocumentsRetrieve2Response{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainImagesRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainImagesRetrieveWithResponse call
func ParseExcludeEachCmsApiMainImagesRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainImagesRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainImagesRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainImagesFindRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainImagesFindRetrieveWithResponse call
func ParseExcludeEachCmsApiMainImagesFindRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainImagesFindRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainImagesFindRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainImagesRetrieve2Response parses an HTTP response from a ExcludeEachCmsApiMainImagesRetrieve2WithResponse call
func ParseExcludeEachCmsApiMainImagesRetrieve2Response(rsp *http.Response) (*ExcludeEachCmsApiMainImagesRetrieve2Response, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainImagesRetrieve2Response{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainPagesRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainPagesRetrieveWithResponse call
func ParseExcludeEachCmsApiMainPagesRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainPagesRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainPagesRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainPagesFindRetrieveResponse parses an HTTP response from a ExcludeEachCmsApiMainPagesFindRetrieveWithResponse call
func ParseExcludeEachCmsApiMainPagesFindRetrieveResponse(rsp *http.Response) (*ExcludeEachCmsApiMainPagesFindRetrieveResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainPagesFindRetrieveResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainPagesRetrieve2Response parses an HTTP response from a ExcludeEachCmsApiMainPagesRetrieve2WithResponse call
func ParseExcludeEachCmsApiMainPagesRetrieve2Response(rsp *http.Response) (*ExcludeEachCmsApiMainPagesRetrieve2Response, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainPagesRetrieve2Response{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseExcludeEachCmsApiMainPagesActionCreateResponse parses an HTTP response from a ExcludeEachCmsApiMainPagesActionCreateWithResponse call
func ParseExcludeEachCmsApiMainPagesActionCreateResponse(rsp *http.Response) (*ExcludeEachCmsApiMainPagesActionCreateResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &ExcludeEachCmsApiMainPagesActionCreateResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}

