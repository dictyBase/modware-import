/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ExporterTypeEnum * `csv` - csv * `json` - json * `xml` - xml
type ExporterTypeEnum string

// List of ExporterTypeEnum
const (
	CSV ExporterTypeEnum = "csv"
	JSON ExporterTypeEnum = "json"
	XML ExporterTypeEnum = "xml"
)

// All allowed values of ExporterTypeEnum enum
var AllowedExporterTypeEnumEnumValues = []ExporterTypeEnum{
	"csv",
	"json",
	"xml",
}

func (v *ExporterTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExporterTypeEnum(value)
	for _, existing := range AllowedExporterTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExporterTypeEnum", value)
}

// NewExporterTypeEnumFromValue returns a pointer to a valid ExporterTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExporterTypeEnumFromValue(v string) (*ExporterTypeEnum, error) {
	ev := ExporterTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExporterTypeEnum: valid values are %v", v, AllowedExporterTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExporterTypeEnum) IsValid() bool {
	for _, existing := range AllowedExporterTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExporterTypeEnum value
func (v ExporterTypeEnum) Ptr() *ExporterTypeEnum {
	return &v
}

type NullableExporterTypeEnum struct {
	value *ExporterTypeEnum
	isSet bool
}

func (v NullableExporterTypeEnum) Get() *ExporterTypeEnum {
	return v.value
}

func (v *NullableExporterTypeEnum) Set(val *ExporterTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableExporterTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableExporterTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExporterTypeEnum(val *ExporterTypeEnum) *NullableExporterTypeEnum {
	return &NullableExporterTypeEnum{value: val, isSet: true}
}

func (v NullableExporterTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExporterTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

