/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SingleDuplicateTableJobType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleDuplicateTableJobType{}

// SingleDuplicateTableJobType struct for SingleDuplicateTableJobType
type SingleDuplicateTableJobType struct {
	Id int32 `json:"id"`
	// The type of the job.
	Type string `json:"type"`
	// A percentage indicating how far along the job is. 100 means that it's finished.
	ProgressPercentage int32 `json:"progress_percentage"`
	// Indicates the state of the import job.
	State string `json:"state"`
	// A human readable error message indicating what went wrong.
	HumanReadableError *string `json:"human_readable_error,omitempty"`
	OriginalTable Table `json:"original_table"`
	DuplicatedTable Table `json:"duplicated_table"`
}

// NewSingleDuplicateTableJobType instantiates a new SingleDuplicateTableJobType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDuplicateTableJobType(id int32, type_ string, progressPercentage int32, state string, originalTable Table, duplicatedTable Table) *SingleDuplicateTableJobType {
	this := SingleDuplicateTableJobType{}
	this.Id = id
	this.Type = type_
	this.ProgressPercentage = progressPercentage
	this.State = state
	this.OriginalTable = originalTable
	this.DuplicatedTable = duplicatedTable
	return &this
}

// NewSingleDuplicateTableJobTypeWithDefaults instantiates a new SingleDuplicateTableJobType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDuplicateTableJobTypeWithDefaults() *SingleDuplicateTableJobType {
	this := SingleDuplicateTableJobType{}
	return &this
}

// GetId returns the Id field value
func (o *SingleDuplicateTableJobType) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SingleDuplicateTableJobType) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *SingleDuplicateTableJobType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SingleDuplicateTableJobType) SetType(v string) {
	o.Type = v
}

// GetProgressPercentage returns the ProgressPercentage field value
func (o *SingleDuplicateTableJobType) GetProgressPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgressPercentage
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetProgressPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgressPercentage, true
}

// SetProgressPercentage sets field value
func (o *SingleDuplicateTableJobType) SetProgressPercentage(v int32) {
	o.ProgressPercentage = v
}

// GetState returns the State field value
func (o *SingleDuplicateTableJobType) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SingleDuplicateTableJobType) SetState(v string) {
	o.State = v
}

// GetHumanReadableError returns the HumanReadableError field value if set, zero value otherwise.
func (o *SingleDuplicateTableJobType) GetHumanReadableError() string {
	if o == nil || IsNil(o.HumanReadableError) {
		var ret string
		return ret
	}
	return *o.HumanReadableError
}

// GetHumanReadableErrorOk returns a tuple with the HumanReadableError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetHumanReadableErrorOk() (*string, bool) {
	if o == nil || IsNil(o.HumanReadableError) {
		return nil, false
	}
	return o.HumanReadableError, true
}

// HasHumanReadableError returns a boolean if a field has been set.
func (o *SingleDuplicateTableJobType) HasHumanReadableError() bool {
	if o != nil && !IsNil(o.HumanReadableError) {
		return true
	}

	return false
}

// SetHumanReadableError gets a reference to the given string and assigns it to the HumanReadableError field.
func (o *SingleDuplicateTableJobType) SetHumanReadableError(v string) {
	o.HumanReadableError = &v
}

// GetOriginalTable returns the OriginalTable field value
func (o *SingleDuplicateTableJobType) GetOriginalTable() Table {
	if o == nil {
		var ret Table
		return ret
	}

	return o.OriginalTable
}

// GetOriginalTableOk returns a tuple with the OriginalTable field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetOriginalTableOk() (*Table, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTable, true
}

// SetOriginalTable sets field value
func (o *SingleDuplicateTableJobType) SetOriginalTable(v Table) {
	o.OriginalTable = v
}

// GetDuplicatedTable returns the DuplicatedTable field value
func (o *SingleDuplicateTableJobType) GetDuplicatedTable() Table {
	if o == nil {
		var ret Table
		return ret
	}

	return o.DuplicatedTable
}

// GetDuplicatedTableOk returns a tuple with the DuplicatedTable field value
// and a boolean to check if the value has been set.
func (o *SingleDuplicateTableJobType) GetDuplicatedTableOk() (*Table, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicatedTable, true
}

// SetDuplicatedTable sets field value
func (o *SingleDuplicateTableJobType) SetDuplicatedTable(v Table) {
	o.DuplicatedTable = v
}

func (o SingleDuplicateTableJobType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleDuplicateTableJobType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: type is readOnly
	toSerialize["progress_percentage"] = o.ProgressPercentage
	toSerialize["state"] = o.State
	if !IsNil(o.HumanReadableError) {
		toSerialize["human_readable_error"] = o.HumanReadableError
	}
	// skip: original_table is readOnly
	// skip: duplicated_table is readOnly
	return toSerialize, nil
}

type NullableSingleDuplicateTableJobType struct {
	value *SingleDuplicateTableJobType
	isSet bool
}

func (v NullableSingleDuplicateTableJobType) Get() *SingleDuplicateTableJobType {
	return v.value
}

func (v *NullableSingleDuplicateTableJobType) Set(val *SingleDuplicateTableJobType) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDuplicateTableJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDuplicateTableJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDuplicateTableJobType(val *SingleDuplicateTableJobType) *NullableSingleDuplicateTableJobType {
	return &NullableSingleDuplicateTableJobType{value: val, isSet: true}
}

func (v NullableSingleDuplicateTableJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDuplicateTableJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


