/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the TableWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableWebhook{}

// TableWebhook struct for TableWebhook
type TableWebhook struct {
	Id int32 `json:"id"`
	// A list containing the events that will trigger this webhook.
	Events map[string]interface{} `json:"events"`
	// The additional headers as an object where the key is the name and the value the value.
	Headers map[string]interface{} `json:"headers"`
	// All the calls that this webhook made.
	Calls []TableWebhookCall `json:"calls"`
	CreatedOn time.Time `json:"created_on"`
	UpdatedOn time.Time `json:"updated_on"`
	// Indicates whether the field names must be used as payload key instead of the id.
	UseUserFieldNames *bool `json:"use_user_field_names,omitempty"`
	// The URL that must be called when the webhook is triggered.
	Url string `json:"url"`
	RequestMethod *RequestMethodEnum `json:"request_method,omitempty"`
	// An internal name of the webhook.
	Name string `json:"name"`
	// Indicates whether this webhook should listen to all events.
	IncludeAllEvents *bool `json:"include_all_events,omitempty"`
	// The amount of failed webhook calls.
	FailedTriggers *int32 `json:"failed_triggers,omitempty"`
	// Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
	Active *bool `json:"active,omitempty"`
}

// NewTableWebhook instantiates a new TableWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableWebhook(id int32, events map[string]interface{}, headers map[string]interface{}, calls []TableWebhookCall, createdOn time.Time, updatedOn time.Time, url string, name string) *TableWebhook {
	this := TableWebhook{}
	this.Id = id
	this.Events = events
	this.Headers = headers
	this.Calls = calls
	this.CreatedOn = createdOn
	this.UpdatedOn = updatedOn
	this.Url = url
	this.Name = name
	return &this
}

// NewTableWebhookWithDefaults instantiates a new TableWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableWebhookWithDefaults() *TableWebhook {
	this := TableWebhook{}
	return &this
}

// GetId returns the Id field value
func (o *TableWebhook) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TableWebhook) SetId(v int32) {
	o.Id = v
}

// GetEvents returns the Events field value
func (o *TableWebhook) GetEvents() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetEventsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *TableWebhook) SetEvents(v map[string]interface{}) {
	o.Events = v
}

// GetHeaders returns the Headers field value
func (o *TableWebhook) GetHeaders() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *TableWebhook) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetCalls returns the Calls field value
func (o *TableWebhook) GetCalls() []TableWebhookCall {
	if o == nil {
		var ret []TableWebhookCall
		return ret
	}

	return o.Calls
}

// GetCallsOk returns a tuple with the Calls field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetCallsOk() ([]TableWebhookCall, bool) {
	if o == nil {
		return nil, false
	}
	return o.Calls, true
}

// SetCalls sets field value
func (o *TableWebhook) SetCalls(v []TableWebhookCall) {
	o.Calls = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *TableWebhook) GetCreatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *TableWebhook) SetCreatedOn(v time.Time) {
	o.CreatedOn = v
}

// GetUpdatedOn returns the UpdatedOn field value
func (o *TableWebhook) GetUpdatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedOn
}

// GetUpdatedOnOk returns a tuple with the UpdatedOn field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetUpdatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedOn, true
}

// SetUpdatedOn sets field value
func (o *TableWebhook) SetUpdatedOn(v time.Time) {
	o.UpdatedOn = v
}

// GetUseUserFieldNames returns the UseUserFieldNames field value if set, zero value otherwise.
func (o *TableWebhook) GetUseUserFieldNames() bool {
	if o == nil || IsNil(o.UseUserFieldNames) {
		var ret bool
		return ret
	}
	return *o.UseUserFieldNames
}

// GetUseUserFieldNamesOk returns a tuple with the UseUserFieldNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetUseUserFieldNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUserFieldNames) {
		return nil, false
	}
	return o.UseUserFieldNames, true
}

// HasUseUserFieldNames returns a boolean if a field has been set.
func (o *TableWebhook) HasUseUserFieldNames() bool {
	if o != nil && !IsNil(o.UseUserFieldNames) {
		return true
	}

	return false
}

// SetUseUserFieldNames gets a reference to the given bool and assigns it to the UseUserFieldNames field.
func (o *TableWebhook) SetUseUserFieldNames(v bool) {
	o.UseUserFieldNames = &v
}

// GetUrl returns the Url field value
func (o *TableWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TableWebhook) SetUrl(v string) {
	o.Url = v
}

// GetRequestMethod returns the RequestMethod field value if set, zero value otherwise.
func (o *TableWebhook) GetRequestMethod() RequestMethodEnum {
	if o == nil || IsNil(o.RequestMethod) {
		var ret RequestMethodEnum
		return ret
	}
	return *o.RequestMethod
}

// GetRequestMethodOk returns a tuple with the RequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetRequestMethodOk() (*RequestMethodEnum, bool) {
	if o == nil || IsNil(o.RequestMethod) {
		return nil, false
	}
	return o.RequestMethod, true
}

// HasRequestMethod returns a boolean if a field has been set.
func (o *TableWebhook) HasRequestMethod() bool {
	if o != nil && !IsNil(o.RequestMethod) {
		return true
	}

	return false
}

// SetRequestMethod gets a reference to the given RequestMethodEnum and assigns it to the RequestMethod field.
func (o *TableWebhook) SetRequestMethod(v RequestMethodEnum) {
	o.RequestMethod = &v
}

// GetName returns the Name field value
func (o *TableWebhook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TableWebhook) SetName(v string) {
	o.Name = v
}

// GetIncludeAllEvents returns the IncludeAllEvents field value if set, zero value otherwise.
func (o *TableWebhook) GetIncludeAllEvents() bool {
	if o == nil || IsNil(o.IncludeAllEvents) {
		var ret bool
		return ret
	}
	return *o.IncludeAllEvents
}

// GetIncludeAllEventsOk returns a tuple with the IncludeAllEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetIncludeAllEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeAllEvents) {
		return nil, false
	}
	return o.IncludeAllEvents, true
}

// HasIncludeAllEvents returns a boolean if a field has been set.
func (o *TableWebhook) HasIncludeAllEvents() bool {
	if o != nil && !IsNil(o.IncludeAllEvents) {
		return true
	}

	return false
}

// SetIncludeAllEvents gets a reference to the given bool and assigns it to the IncludeAllEvents field.
func (o *TableWebhook) SetIncludeAllEvents(v bool) {
	o.IncludeAllEvents = &v
}

// GetFailedTriggers returns the FailedTriggers field value if set, zero value otherwise.
func (o *TableWebhook) GetFailedTriggers() int32 {
	if o == nil || IsNil(o.FailedTriggers) {
		var ret int32
		return ret
	}
	return *o.FailedTriggers
}

// GetFailedTriggersOk returns a tuple with the FailedTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetFailedTriggersOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedTriggers) {
		return nil, false
	}
	return o.FailedTriggers, true
}

// HasFailedTriggers returns a boolean if a field has been set.
func (o *TableWebhook) HasFailedTriggers() bool {
	if o != nil && !IsNil(o.FailedTriggers) {
		return true
	}

	return false
}

// SetFailedTriggers gets a reference to the given int32 and assigns it to the FailedTriggers field.
func (o *TableWebhook) SetFailedTriggers(v int32) {
	o.FailedTriggers = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *TableWebhook) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWebhook) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *TableWebhook) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *TableWebhook) SetActive(v bool) {
	o.Active = &v
}

func (o TableWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: events is readOnly
	// skip: headers is readOnly
	toSerialize["calls"] = o.Calls
	// skip: created_on is readOnly
	// skip: updated_on is readOnly
	if !IsNil(o.UseUserFieldNames) {
		toSerialize["use_user_field_names"] = o.UseUserFieldNames
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.RequestMethod) {
		toSerialize["request_method"] = o.RequestMethod
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.IncludeAllEvents) {
		toSerialize["include_all_events"] = o.IncludeAllEvents
	}
	if !IsNil(o.FailedTriggers) {
		toSerialize["failed_triggers"] = o.FailedTriggers
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableTableWebhook struct {
	value *TableWebhook
	isSet bool
}

func (v NullableTableWebhook) Get() *TableWebhook {
	return v.value
}

func (v *NullableTableWebhook) Set(val *TableWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableTableWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableTableWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableWebhook(val *TableWebhook) *NullableTableWebhook {
	return &NullableTableWebhook{value: val, isSet: true}
}

func (v NullableTableWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


