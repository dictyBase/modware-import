/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UniqueRowValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniqueRowValues{}

// UniqueRowValues struct for UniqueRowValues
type UniqueRowValues struct {
	Values []string `json:"values"`
}

// NewUniqueRowValues instantiates a new UniqueRowValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniqueRowValues(values []string) *UniqueRowValues {
	this := UniqueRowValues{}
	this.Values = values
	return &this
}

// NewUniqueRowValuesWithDefaults instantiates a new UniqueRowValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniqueRowValuesWithDefaults() *UniqueRowValues {
	this := UniqueRowValues{}
	return &this
}

// GetValues returns the Values field value
func (o *UniqueRowValues) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *UniqueRowValues) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *UniqueRowValues) SetValues(v []string) {
	o.Values = v
}

func (o UniqueRowValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniqueRowValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableUniqueRowValues struct {
	value *UniqueRowValues
	isSet bool
}

func (v NullableUniqueRowValues) Get() *UniqueRowValues {
	return v.value
}

func (v *NullableUniqueRowValues) Set(val *UniqueRowValues) {
	v.value = val
	v.isSet = true
}

func (v NullableUniqueRowValues) IsSet() bool {
	return v.isSet
}

func (v *NullableUniqueRowValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniqueRowValues(val *UniqueRowValues) *NullableUniqueRowValues {
	return &NullableUniqueRowValues{value: val, isSet: true}
}

func (v NullableUniqueRowValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniqueRowValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


