/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the NumberFieldCreateField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberFieldCreateField{}

// NumberFieldCreateField struct for NumberFieldCreateField
type NumberFieldCreateField struct {
	Name string `json:"name"`
	Type Type712Enum `json:"type"`
	NumberDecimalPlaces *NumberDecimalPlacesEnum `json:"number_decimal_places,omitempty"`
	// Indicates if negative values are allowed.
	NumberNegative *bool `json:"number_negative,omitempty"`
}

// NewNumberFieldCreateField instantiates a new NumberFieldCreateField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberFieldCreateField(name string, type_ Type712Enum) *NumberFieldCreateField {
	this := NumberFieldCreateField{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewNumberFieldCreateFieldWithDefaults instantiates a new NumberFieldCreateField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberFieldCreateFieldWithDefaults() *NumberFieldCreateField {
	this := NumberFieldCreateField{}
	return &this
}

// GetName returns the Name field value
func (o *NumberFieldCreateField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NumberFieldCreateField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NumberFieldCreateField) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *NumberFieldCreateField) GetType() Type712Enum {
	if o == nil {
		var ret Type712Enum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NumberFieldCreateField) GetTypeOk() (*Type712Enum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NumberFieldCreateField) SetType(v Type712Enum) {
	o.Type = v
}

// GetNumberDecimalPlaces returns the NumberDecimalPlaces field value if set, zero value otherwise.
func (o *NumberFieldCreateField) GetNumberDecimalPlaces() NumberDecimalPlacesEnum {
	if o == nil || IsNil(o.NumberDecimalPlaces) {
		var ret NumberDecimalPlacesEnum
		return ret
	}
	return *o.NumberDecimalPlaces
}

// GetNumberDecimalPlacesOk returns a tuple with the NumberDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldCreateField) GetNumberDecimalPlacesOk() (*NumberDecimalPlacesEnum, bool) {
	if o == nil || IsNil(o.NumberDecimalPlaces) {
		return nil, false
	}
	return o.NumberDecimalPlaces, true
}

// HasNumberDecimalPlaces returns a boolean if a field has been set.
func (o *NumberFieldCreateField) HasNumberDecimalPlaces() bool {
	if o != nil && !IsNil(o.NumberDecimalPlaces) {
		return true
	}

	return false
}

// SetNumberDecimalPlaces gets a reference to the given NumberDecimalPlacesEnum and assigns it to the NumberDecimalPlaces field.
func (o *NumberFieldCreateField) SetNumberDecimalPlaces(v NumberDecimalPlacesEnum) {
	o.NumberDecimalPlaces = &v
}

// GetNumberNegative returns the NumberNegative field value if set, zero value otherwise.
func (o *NumberFieldCreateField) GetNumberNegative() bool {
	if o == nil || IsNil(o.NumberNegative) {
		var ret bool
		return ret
	}
	return *o.NumberNegative
}

// GetNumberNegativeOk returns a tuple with the NumberNegative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldCreateField) GetNumberNegativeOk() (*bool, bool) {
	if o == nil || IsNil(o.NumberNegative) {
		return nil, false
	}
	return o.NumberNegative, true
}

// HasNumberNegative returns a boolean if a field has been set.
func (o *NumberFieldCreateField) HasNumberNegative() bool {
	if o != nil && !IsNil(o.NumberNegative) {
		return true
	}

	return false
}

// SetNumberNegative gets a reference to the given bool and assigns it to the NumberNegative field.
func (o *NumberFieldCreateField) SetNumberNegative(v bool) {
	o.NumberNegative = &v
}

func (o NumberFieldCreateField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberFieldCreateField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.NumberDecimalPlaces) {
		toSerialize["number_decimal_places"] = o.NumberDecimalPlaces
	}
	if !IsNil(o.NumberNegative) {
		toSerialize["number_negative"] = o.NumberNegative
	}
	return toSerialize, nil
}

type NullableNumberFieldCreateField struct {
	value *NumberFieldCreateField
	isSet bool
}

func (v NullableNumberFieldCreateField) Get() *NumberFieldCreateField {
	return v.value
}

func (v *NullableNumberFieldCreateField) Set(val *NumberFieldCreateField) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberFieldCreateField) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberFieldCreateField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberFieldCreateField(val *NumberFieldCreateField) *NullableNumberFieldCreateField {
	return &NullableNumberFieldCreateField{value: val, isSet: true}
}

func (v NullableNumberFieldCreateField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberFieldCreateField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


