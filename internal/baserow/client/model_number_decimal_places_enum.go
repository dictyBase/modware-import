/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// NumberDecimalPlacesEnum * `0` - 1 * `1` - 1.0 * `2` - 1.00 * `3` - 1.000 * `4` - 1.0000 * `5` - 1.00000 * `6` - 1.000000 * `7` - 1.0000000 * `8` - 1.00000000 * `9` - 1.000000000 * `10` - 1.0000000000
type NumberDecimalPlacesEnum int32

// List of NumberDecimalPlacesEnum
const (
	_0 NumberDecimalPlacesEnum = 0
	_1 NumberDecimalPlacesEnum = 1
	_2 NumberDecimalPlacesEnum = 2
	_3 NumberDecimalPlacesEnum = 3
	_4 NumberDecimalPlacesEnum = 4
	_5 NumberDecimalPlacesEnum = 5
	_6 NumberDecimalPlacesEnum = 6
	_7 NumberDecimalPlacesEnum = 7
	_8 NumberDecimalPlacesEnum = 8
	_9 NumberDecimalPlacesEnum = 9
	_10 NumberDecimalPlacesEnum = 10
)

// All allowed values of NumberDecimalPlacesEnum enum
var AllowedNumberDecimalPlacesEnumEnumValues = []NumberDecimalPlacesEnum{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
}

func (v *NumberDecimalPlacesEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberDecimalPlacesEnum(value)
	for _, existing := range AllowedNumberDecimalPlacesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberDecimalPlacesEnum", value)
}

// NewNumberDecimalPlacesEnumFromValue returns a pointer to a valid NumberDecimalPlacesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberDecimalPlacesEnumFromValue(v int32) (*NumberDecimalPlacesEnum, error) {
	ev := NumberDecimalPlacesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberDecimalPlacesEnum: valid values are %v", v, AllowedNumberDecimalPlacesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberDecimalPlacesEnum) IsValid() bool {
	for _, existing := range AllowedNumberDecimalPlacesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberDecimalPlacesEnum value
func (v NumberDecimalPlacesEnum) Ptr() *NumberDecimalPlacesEnum {
	return &v
}

type NullableNumberDecimalPlacesEnum struct {
	value *NumberDecimalPlacesEnum
	isSet bool
}

func (v NullableNumberDecimalPlacesEnum) Get() *NumberDecimalPlacesEnum {
	return v.value
}

func (v *NullableNumberDecimalPlacesEnum) Set(val *NumberDecimalPlacesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberDecimalPlacesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberDecimalPlacesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberDecimalPlacesEnum(val *NumberDecimalPlacesEnum) *NullableNumberDecimalPlacesEnum {
	return &NullableNumberDecimalPlacesEnum{value: val, isSet: true}
}

func (v NullableNumberDecimalPlacesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberDecimalPlacesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

