/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TokenVerifyWithUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenVerifyWithUser{}

// TokenVerifyWithUser struct for TokenVerifyWithUser
type TokenVerifyWithUser struct {
	// Deprecated. Use `refresh_token` instead.
	// Deprecated
	Token *string `json:"token,omitempty"`
	RefreshToken string `json:"refresh_token"`
}

// NewTokenVerifyWithUser instantiates a new TokenVerifyWithUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenVerifyWithUser(refreshToken string) *TokenVerifyWithUser {
	this := TokenVerifyWithUser{}
	this.RefreshToken = refreshToken
	return &this
}

// NewTokenVerifyWithUserWithDefaults instantiates a new TokenVerifyWithUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenVerifyWithUserWithDefaults() *TokenVerifyWithUser {
	this := TokenVerifyWithUser{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
// Deprecated
func (o *TokenVerifyWithUser) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TokenVerifyWithUser) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TokenVerifyWithUser) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
// Deprecated
func (o *TokenVerifyWithUser) SetToken(v string) {
	o.Token = &v
}

// GetRefreshToken returns the RefreshToken field value
func (o *TokenVerifyWithUser) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *TokenVerifyWithUser) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *TokenVerifyWithUser) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o TokenVerifyWithUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenVerifyWithUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["refresh_token"] = o.RefreshToken
	return toSerialize, nil
}

type NullableTokenVerifyWithUser struct {
	value *TokenVerifyWithUser
	isSet bool
}

func (v NullableTokenVerifyWithUser) Get() *TokenVerifyWithUser {
	return v.value
}

func (v *NullableTokenVerifyWithUser) Set(val *TokenVerifyWithUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenVerifyWithUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenVerifyWithUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenVerifyWithUser(val *TokenVerifyWithUser) *NullableTokenVerifyWithUser {
	return &NullableTokenVerifyWithUser{value: val, isSet: true}
}

func (v NullableTokenVerifyWithUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenVerifyWithUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


