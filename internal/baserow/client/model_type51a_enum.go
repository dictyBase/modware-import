/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Type51aEnum * `equal` - equal * `not_equal` - not_equal * `filename_contains` - filename_contains * `has_file_type` - has_file_type * `contains` - contains * `contains_not` - contains_not * `contains_word` - contains_word * `doesnt_contain_word` - doesnt_contain_word * `length_is_lower_than` - length_is_lower_than * `higher_than` - higher_than * `lower_than` - lower_than * `date_equal` - date_equal * `date_before` - date_before * `date_before_or_equal` - date_before_or_equal * `date_after` - date_after * `date_after_or_equal` - date_after_or_equal * `date_not_equal` - date_not_equal * `date_equals_today` - date_equals_today * `date_before_today` - date_before_today * `date_after_today` - date_after_today * `date_within_days` - date_within_days * `date_within_weeks` - date_within_weeks * `date_within_months` - date_within_months * `date_equals_days_ago` - date_equals_days_ago * `date_equals_months_ago` - date_equals_months_ago * `date_equals_years_ago` - date_equals_years_ago * `date_equals_week` - date_equals_week * `date_equals_month` - date_equals_month * `date_equals_day_of_month` - date_equals_day_of_month * `date_equals_year` - date_equals_year * `single_select_equal` - single_select_equal * `single_select_not_equal` - single_select_not_equal * `link_row_has` - link_row_has * `link_row_has_not` - link_row_has_not * `link_row_contains` - link_row_contains * `link_row_not_contains` - link_row_not_contains * `boolean` - boolean * `empty` - empty * `not_empty` - not_empty * `multiple_select_has` - multiple_select_has * `multiple_select_has_not` - multiple_select_has_not * `multiple_collaborators_has` - multiple_collaborators_has * `multiple_collaborators_has_not` - multiple_collaborators_has_not
type Type51aEnum string

// List of Type51aEnum
const (
	EQUAL Type51aEnum = "equal"
	NOT_EQUAL Type51aEnum = "not_equal"
	FILENAME_CONTAINS Type51aEnum = "filename_contains"
	HAS_FILE_TYPE Type51aEnum = "has_file_type"
	CONTAINS Type51aEnum = "contains"
	CONTAINS_NOT Type51aEnum = "contains_not"
	CONTAINS_WORD Type51aEnum = "contains_word"
	DOESNT_CONTAIN_WORD Type51aEnum = "doesnt_contain_word"
	LENGTH_IS_LOWER_THAN Type51aEnum = "length_is_lower_than"
	HIGHER_THAN Type51aEnum = "higher_than"
	LOWER_THAN Type51aEnum = "lower_than"
	DATE_EQUAL Type51aEnum = "date_equal"
	DATE_BEFORE Type51aEnum = "date_before"
	DATE_BEFORE_OR_EQUAL Type51aEnum = "date_before_or_equal"
	DATE_AFTER Type51aEnum = "date_after"
	DATE_AFTER_OR_EQUAL Type51aEnum = "date_after_or_equal"
	DATE_NOT_EQUAL Type51aEnum = "date_not_equal"
	DATE_EQUALS_TODAY Type51aEnum = "date_equals_today"
	DATE_BEFORE_TODAY Type51aEnum = "date_before_today"
	DATE_AFTER_TODAY Type51aEnum = "date_after_today"
	DATE_WITHIN_DAYS Type51aEnum = "date_within_days"
	DATE_WITHIN_WEEKS Type51aEnum = "date_within_weeks"
	DATE_WITHIN_MONTHS Type51aEnum = "date_within_months"
	DATE_EQUALS_DAYS_AGO Type51aEnum = "date_equals_days_ago"
	DATE_EQUALS_MONTHS_AGO Type51aEnum = "date_equals_months_ago"
	DATE_EQUALS_YEARS_AGO Type51aEnum = "date_equals_years_ago"
	DATE_EQUALS_WEEK Type51aEnum = "date_equals_week"
	DATE_EQUALS_MONTH Type51aEnum = "date_equals_month"
	DATE_EQUALS_DAY_OF_MONTH Type51aEnum = "date_equals_day_of_month"
	DATE_EQUALS_YEAR Type51aEnum = "date_equals_year"
	SINGLE_SELECT_EQUAL Type51aEnum = "single_select_equal"
	SINGLE_SELECT_NOT_EQUAL Type51aEnum = "single_select_not_equal"
	LINK_ROW_HAS Type51aEnum = "link_row_has"
	LINK_ROW_HAS_NOT Type51aEnum = "link_row_has_not"
	LINK_ROW_CONTAINS Type51aEnum = "link_row_contains"
	LINK_ROW_NOT_CONTAINS Type51aEnum = "link_row_not_contains"
	NOT_EMPTY Type51aEnum = "not_empty"
	MULTIPLE_SELECT_HAS Type51aEnum = "multiple_select_has"
	MULTIPLE_SELECT_HAS_NOT Type51aEnum = "multiple_select_has_not"
	MULTIPLE_COLLABORATORS_HAS Type51aEnum = "multiple_collaborators_has"
	MULTIPLE_COLLABORATORS_HAS_NOT Type51aEnum = "multiple_collaborators_has_not"
)

// All allowed values of Type51aEnum enum
var AllowedType51aEnumEnumValues = []Type51aEnum{
	"equal",
	"not_equal",
	"filename_contains",
	"has_file_type",
	"contains",
	"contains_not",
	"contains_word",
	"doesnt_contain_word",
	"length_is_lower_than",
	"higher_than",
	"lower_than",
	"date_equal",
	"date_before",
	"date_before_or_equal",
	"date_after",
	"date_after_or_equal",
	"date_not_equal",
	"date_equals_today",
	"date_before_today",
	"date_after_today",
	"date_within_days",
	"date_within_weeks",
	"date_within_months",
	"date_equals_days_ago",
	"date_equals_months_ago",
	"date_equals_years_ago",
	"date_equals_week",
	"date_equals_month",
	"date_equals_day_of_month",
	"date_equals_year",
	"single_select_equal",
	"single_select_not_equal",
	"link_row_has",
	"link_row_has_not",
	"link_row_contains",
	"link_row_not_contains",
	"boolean",
	"empty",
	"not_empty",
	"multiple_select_has",
	"multiple_select_has_not",
	"multiple_collaborators_has",
	"multiple_collaborators_has_not",
}

func (v *Type51aEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Type51aEnum(value)
	for _, existing := range AllowedType51aEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Type51aEnum", value)
}

// NewType51aEnumFromValue returns a pointer to a valid Type51aEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewType51aEnumFromValue(v string) (*Type51aEnum, error) {
	ev := Type51aEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Type51aEnum: valid values are %v", v, AllowedType51aEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Type51aEnum) IsValid() bool {
	for _, existing := range AllowedType51aEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Type51aEnum value
func (v Type51aEnum) Ptr() *Type51aEnum {
	return &v
}

type NullableType51aEnum struct {
	value *Type51aEnum
	isSet bool
}

func (v NullableType51aEnum) Get() *Type51aEnum {
	return v.value
}

func (v *NullableType51aEnum) Set(val *Type51aEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableType51aEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableType51aEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType51aEnum(val *Type51aEnum) *NullableType51aEnum {
	return &NullableType51aEnum{value: val, isSet: true}
}

func (v NullableType51aEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType51aEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

