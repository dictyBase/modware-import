/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RegisterLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterLicense{}

// RegisterLicense struct for RegisterLicense
type RegisterLicense struct {
	// The license that you want to register.
	License string `json:"license"`
}

// NewRegisterLicense instantiates a new RegisterLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterLicense(license string) *RegisterLicense {
	this := RegisterLicense{}
	this.License = license
	return &this
}

// NewRegisterLicenseWithDefaults instantiates a new RegisterLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterLicenseWithDefaults() *RegisterLicense {
	this := RegisterLicense{}
	return &this
}

// GetLicense returns the License field value
func (o *RegisterLicense) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *RegisterLicense) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *RegisterLicense) SetLicense(v string) {
	o.License = v
}

func (o RegisterLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license"] = o.License
	return toSerialize, nil
}

type NullableRegisterLicense struct {
	value *RegisterLicense
	isSet bool
}

func (v NullableRegisterLicense) Get() *RegisterLicense {
	return v.value
}

func (v *NullableRegisterLicense) Set(val *RegisterLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterLicense(val *RegisterLicense) *NullableRegisterLicense {
	return &NullableRegisterLicense{value: val, isSet: true}
}

func (v NullableRegisterLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


