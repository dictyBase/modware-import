/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ActionScopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionScopes{}

// ActionScopes Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
type ActionScopes struct {
	// If set to true then actions registered in the root scope will be included when undoing or redoing.
	Root NullableBool `json:"root,omitempty"`
	// If set to a workspaces id then any actions directly related to that workspace will be be included when undoing or redoing.
	Workspace NullableInt32 `json:"workspace,omitempty"`
	// If set to a workspaces id then any actions directly related to that workspace will be be included when undoing or redoing.
	Group NullableInt32 `json:"group,omitempty"`
	// If set to an applications id then any actions directly related to that application will be be included when undoing or redoing.
	Application NullableInt32 `json:"application,omitempty"`
	// If set to a table id then any actions directly related to that table will be be included when undoing or redoing.
	Table NullableInt32 `json:"table,omitempty"`
	// If set to an view id then any actions directly related to that view will be be included when undoing or redoing.
	View NullableInt32 `json:"view,omitempty"`
	// If set to a workspace id then any actions directly related to that workspace will be be included when undoing or redoing.
	TeamsInWorkspace NullableInt32 `json:"teams_in_workspace,omitempty"`
}

// NewActionScopes instantiates a new ActionScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionScopes() *ActionScopes {
	this := ActionScopes{}
	return &this
}

// NewActionScopesWithDefaults instantiates a new ActionScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionScopesWithDefaults() *ActionScopes {
	this := ActionScopes{}
	return &this
}

// GetRoot returns the Root field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetRoot() bool {
	if o == nil || IsNil(o.Root.Get()) {
		var ret bool
		return ret
	}
	return *o.Root.Get()
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetRootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Root.Get(), o.Root.IsSet()
}

// HasRoot returns a boolean if a field has been set.
func (o *ActionScopes) HasRoot() bool {
	if o != nil && o.Root.IsSet() {
		return true
	}

	return false
}

// SetRoot gets a reference to the given NullableBool and assigns it to the Root field.
func (o *ActionScopes) SetRoot(v bool) {
	o.Root.Set(&v)
}
// SetRootNil sets the value for Root to be an explicit nil
func (o *ActionScopes) SetRootNil() {
	o.Root.Set(nil)
}

// UnsetRoot ensures that no value is present for Root, not even an explicit nil
func (o *ActionScopes) UnsetRoot() {
	o.Root.Unset()
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetWorkspace() int32 {
	if o == nil || IsNil(o.Workspace.Get()) {
		var ret int32
		return ret
	}
	return *o.Workspace.Get()
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetWorkspaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workspace.Get(), o.Workspace.IsSet()
}

// HasWorkspace returns a boolean if a field has been set.
func (o *ActionScopes) HasWorkspace() bool {
	if o != nil && o.Workspace.IsSet() {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given NullableInt32 and assigns it to the Workspace field.
func (o *ActionScopes) SetWorkspace(v int32) {
	o.Workspace.Set(&v)
}
// SetWorkspaceNil sets the value for Workspace to be an explicit nil
func (o *ActionScopes) SetWorkspaceNil() {
	o.Workspace.Set(nil)
}

// UnsetWorkspace ensures that no value is present for Workspace, not even an explicit nil
func (o *ActionScopes) UnsetWorkspace() {
	o.Workspace.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetGroup() int32 {
	if o == nil || IsNil(o.Group.Get()) {
		var ret int32
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *ActionScopes) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableInt32 and assigns it to the Group field.
func (o *ActionScopes) SetGroup(v int32) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *ActionScopes) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *ActionScopes) UnsetGroup() {
	o.Group.Unset()
}

// GetApplication returns the Application field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetApplication() int32 {
	if o == nil || IsNil(o.Application.Get()) {
		var ret int32
		return ret
	}
	return *o.Application.Get()
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetApplicationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Application.Get(), o.Application.IsSet()
}

// HasApplication returns a boolean if a field has been set.
func (o *ActionScopes) HasApplication() bool {
	if o != nil && o.Application.IsSet() {
		return true
	}

	return false
}

// SetApplication gets a reference to the given NullableInt32 and assigns it to the Application field.
func (o *ActionScopes) SetApplication(v int32) {
	o.Application.Set(&v)
}
// SetApplicationNil sets the value for Application to be an explicit nil
func (o *ActionScopes) SetApplicationNil() {
	o.Application.Set(nil)
}

// UnsetApplication ensures that no value is present for Application, not even an explicit nil
func (o *ActionScopes) UnsetApplication() {
	o.Application.Unset()
}

// GetTable returns the Table field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetTable() int32 {
	if o == nil || IsNil(o.Table.Get()) {
		var ret int32
		return ret
	}
	return *o.Table.Get()
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetTableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Table.Get(), o.Table.IsSet()
}

// HasTable returns a boolean if a field has been set.
func (o *ActionScopes) HasTable() bool {
	if o != nil && o.Table.IsSet() {
		return true
	}

	return false
}

// SetTable gets a reference to the given NullableInt32 and assigns it to the Table field.
func (o *ActionScopes) SetTable(v int32) {
	o.Table.Set(&v)
}
// SetTableNil sets the value for Table to be an explicit nil
func (o *ActionScopes) SetTableNil() {
	o.Table.Set(nil)
}

// UnsetTable ensures that no value is present for Table, not even an explicit nil
func (o *ActionScopes) UnsetTable() {
	o.Table.Unset()
}

// GetView returns the View field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetView() int32 {
	if o == nil || IsNil(o.View.Get()) {
		var ret int32
		return ret
	}
	return *o.View.Get()
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetViewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.View.Get(), o.View.IsSet()
}

// HasView returns a boolean if a field has been set.
func (o *ActionScopes) HasView() bool {
	if o != nil && o.View.IsSet() {
		return true
	}

	return false
}

// SetView gets a reference to the given NullableInt32 and assigns it to the View field.
func (o *ActionScopes) SetView(v int32) {
	o.View.Set(&v)
}
// SetViewNil sets the value for View to be an explicit nil
func (o *ActionScopes) SetViewNil() {
	o.View.Set(nil)
}

// UnsetView ensures that no value is present for View, not even an explicit nil
func (o *ActionScopes) UnsetView() {
	o.View.Unset()
}

// GetTeamsInWorkspace returns the TeamsInWorkspace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionScopes) GetTeamsInWorkspace() int32 {
	if o == nil || IsNil(o.TeamsInWorkspace.Get()) {
		var ret int32
		return ret
	}
	return *o.TeamsInWorkspace.Get()
}

// GetTeamsInWorkspaceOk returns a tuple with the TeamsInWorkspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionScopes) GetTeamsInWorkspaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamsInWorkspace.Get(), o.TeamsInWorkspace.IsSet()
}

// HasTeamsInWorkspace returns a boolean if a field has been set.
func (o *ActionScopes) HasTeamsInWorkspace() bool {
	if o != nil && o.TeamsInWorkspace.IsSet() {
		return true
	}

	return false
}

// SetTeamsInWorkspace gets a reference to the given NullableInt32 and assigns it to the TeamsInWorkspace field.
func (o *ActionScopes) SetTeamsInWorkspace(v int32) {
	o.TeamsInWorkspace.Set(&v)
}
// SetTeamsInWorkspaceNil sets the value for TeamsInWorkspace to be an explicit nil
func (o *ActionScopes) SetTeamsInWorkspaceNil() {
	o.TeamsInWorkspace.Set(nil)
}

// UnsetTeamsInWorkspace ensures that no value is present for TeamsInWorkspace, not even an explicit nil
func (o *ActionScopes) UnsetTeamsInWorkspace() {
	o.TeamsInWorkspace.Unset()
}

func (o ActionScopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionScopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Root.IsSet() {
		toSerialize["root"] = o.Root.Get()
	}
	if o.Workspace.IsSet() {
		toSerialize["workspace"] = o.Workspace.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Application.IsSet() {
		toSerialize["application"] = o.Application.Get()
	}
	if o.Table.IsSet() {
		toSerialize["table"] = o.Table.Get()
	}
	if o.View.IsSet() {
		toSerialize["view"] = o.View.Get()
	}
	if o.TeamsInWorkspace.IsSet() {
		toSerialize["teams_in_workspace"] = o.TeamsInWorkspace.Get()
	}
	return toSerialize, nil
}

type NullableActionScopes struct {
	value *ActionScopes
	isSet bool
}

func (v NullableActionScopes) Get() *ActionScopes {
	return v.value
}

func (v *NullableActionScopes) Set(val *ActionScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableActionScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableActionScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionScopes(val *ActionScopes) *NullableActionScopes {
	return &NullableActionScopes{value: val, isSet: true}
}

func (v NullableActionScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


