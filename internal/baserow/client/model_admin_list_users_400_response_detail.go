/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AdminListUsers400ResponseDetail - struct for AdminListUsers400ResponseDetail
type AdminListUsers400ResponseDetail struct {
	MapmapOfStringinterface *map[string]interface{}
	String *string
}

// map[string]interface{}AsAdminListUsers400ResponseDetail is a convenience function that returns map[string]interface{} wrapped in AdminListUsers400ResponseDetail
func MapmapOfStringinterfaceAsAdminListUsers400ResponseDetail(v *map[string]interface{}) AdminListUsers400ResponseDetail {
	return AdminListUsers400ResponseDetail{
		MapmapOfStringinterface: v,
	}
}

// stringAsAdminListUsers400ResponseDetail is a convenience function that returns string wrapped in AdminListUsers400ResponseDetail
func StringAsAdminListUsers400ResponseDetail(v *string) AdminListUsers400ResponseDetail {
	return AdminListUsers400ResponseDetail{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AdminListUsers400ResponseDetail) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringinterface
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface)
	if err == nil {
		jsonMapmapOfStringinterface, _ := json.Marshal(dst.MapmapOfStringinterface)
		if string(jsonMapmapOfStringinterface) == "{}" { // empty struct
			dst.MapmapOfStringinterface = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringinterface = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AdminListUsers400ResponseDetail)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AdminListUsers400ResponseDetail)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AdminListUsers400ResponseDetail) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringinterface != nil {
		return json.Marshal(&src.MapmapOfStringinterface)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AdminListUsers400ResponseDetail) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringinterface != nil {
		return obj.MapmapOfStringinterface
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAdminListUsers400ResponseDetail struct {
	value *AdminListUsers400ResponseDetail
	isSet bool
}

func (v NullableAdminListUsers400ResponseDetail) Get() *AdminListUsers400ResponseDetail {
	return v.value
}

func (v *NullableAdminListUsers400ResponseDetail) Set(val *AdminListUsers400ResponseDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminListUsers400ResponseDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminListUsers400ResponseDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminListUsers400ResponseDetail(val *AdminListUsers400ResponseDetail) *NullableAdminListUsers400ResponseDetail {
	return &NullableAdminListUsers400ResponseDetail{value: val, isSet: true}
}

func (v NullableAdminListUsers400ResponseDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminListUsers400ResponseDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


