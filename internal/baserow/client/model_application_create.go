/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ApplicationCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationCreate{}

// ApplicationCreate struct for ApplicationCreate
type ApplicationCreate struct {
	Name string `json:"name"`
	Type ApplicationCreateTypeEnum `json:"type"`
	InitWithData *bool `json:"init_with_data,omitempty"`
}

// NewApplicationCreate instantiates a new ApplicationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationCreate(name string, type_ ApplicationCreateTypeEnum) *ApplicationCreate {
	this := ApplicationCreate{}
	this.Name = name
	this.Type = type_
	var initWithData bool = false
	this.InitWithData = &initWithData
	return &this
}

// NewApplicationCreateWithDefaults instantiates a new ApplicationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationCreateWithDefaults() *ApplicationCreate {
	this := ApplicationCreate{}
	var initWithData bool = false
	this.InitWithData = &initWithData
	return &this
}

// GetName returns the Name field value
func (o *ApplicationCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationCreate) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ApplicationCreate) GetType() ApplicationCreateTypeEnum {
	if o == nil {
		var ret ApplicationCreateTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetTypeOk() (*ApplicationCreateTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApplicationCreate) SetType(v ApplicationCreateTypeEnum) {
	o.Type = v
}

// GetInitWithData returns the InitWithData field value if set, zero value otherwise.
func (o *ApplicationCreate) GetInitWithData() bool {
	if o == nil || IsNil(o.InitWithData) {
		var ret bool
		return ret
	}
	return *o.InitWithData
}

// GetInitWithDataOk returns a tuple with the InitWithData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetInitWithDataOk() (*bool, bool) {
	if o == nil || IsNil(o.InitWithData) {
		return nil, false
	}
	return o.InitWithData, true
}

// HasInitWithData returns a boolean if a field has been set.
func (o *ApplicationCreate) HasInitWithData() bool {
	if o != nil && !IsNil(o.InitWithData) {
		return true
	}

	return false
}

// SetInitWithData gets a reference to the given bool and assigns it to the InitWithData field.
func (o *ApplicationCreate) SetInitWithData(v bool) {
	o.InitWithData = &v
}

func (o ApplicationCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.InitWithData) {
		toSerialize["init_with_data"] = o.InitWithData
	}
	return toSerialize, nil
}

type NullableApplicationCreate struct {
	value *ApplicationCreate
	isSet bool
}

func (v NullableApplicationCreate) Get() *ApplicationCreate {
	return v.value
}

func (v *NullableApplicationCreate) Set(val *ApplicationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationCreate(val *ApplicationCreate) *NullableApplicationCreate {
	return &NullableApplicationCreate{value: val, isSet: true}
}

func (v NullableApplicationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


