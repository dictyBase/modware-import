/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TeamSubject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamSubject{}

// TeamSubject Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
type TeamSubject struct {
	Id int32 `json:"id"`
	// The subject's unique identifier.
	SubjectId *int32 `json:"subject_id,omitempty"`
	// The user subject's email address.
	SubjectUserEmail *string `json:"subject_user_email,omitempty"`
	SubjectType SubjectType3ffEnum `json:"subject_type"`
}

// NewTeamSubject instantiates a new TeamSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamSubject(id int32, subjectType SubjectType3ffEnum) *TeamSubject {
	this := TeamSubject{}
	this.Id = id
	this.SubjectType = subjectType
	return &this
}

// NewTeamSubjectWithDefaults instantiates a new TeamSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamSubjectWithDefaults() *TeamSubject {
	this := TeamSubject{}
	return &this
}

// GetId returns the Id field value
func (o *TeamSubject) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamSubject) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamSubject) SetId(v int32) {
	o.Id = v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *TeamSubject) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSubject) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *TeamSubject) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *TeamSubject) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectUserEmail returns the SubjectUserEmail field value if set, zero value otherwise.
func (o *TeamSubject) GetSubjectUserEmail() string {
	if o == nil || IsNil(o.SubjectUserEmail) {
		var ret string
		return ret
	}
	return *o.SubjectUserEmail
}

// GetSubjectUserEmailOk returns a tuple with the SubjectUserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSubject) GetSubjectUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectUserEmail) {
		return nil, false
	}
	return o.SubjectUserEmail, true
}

// HasSubjectUserEmail returns a boolean if a field has been set.
func (o *TeamSubject) HasSubjectUserEmail() bool {
	if o != nil && !IsNil(o.SubjectUserEmail) {
		return true
	}

	return false
}

// SetSubjectUserEmail gets a reference to the given string and assigns it to the SubjectUserEmail field.
func (o *TeamSubject) SetSubjectUserEmail(v string) {
	o.SubjectUserEmail = &v
}

// GetSubjectType returns the SubjectType field value
func (o *TeamSubject) GetSubjectType() SubjectType3ffEnum {
	if o == nil {
		var ret SubjectType3ffEnum
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *TeamSubject) GetSubjectTypeOk() (*SubjectType3ffEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *TeamSubject) SetSubjectType(v SubjectType3ffEnum) {
	o.SubjectType = v
}

func (o TeamSubject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamSubject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !IsNil(o.SubjectId) {
		toSerialize["subject_id"] = o.SubjectId
	}
	if !IsNil(o.SubjectUserEmail) {
		toSerialize["subject_user_email"] = o.SubjectUserEmail
	}
	toSerialize["subject_type"] = o.SubjectType
	return toSerialize, nil
}

type NullableTeamSubject struct {
	value *TeamSubject
	isSet bool
}

func (v NullableTeamSubject) Get() *TeamSubject {
	return v.value
}

func (v *NullableTeamSubject) Set(val *TeamSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamSubject(val *TeamSubject) *NullableTeamSubject {
	return &NullableTeamSubject{value: val, isSet: true}
}

func (v NullableTeamSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


