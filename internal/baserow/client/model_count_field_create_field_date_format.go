/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CountFieldCreateFieldDateFormat - EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)  * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
type CountFieldCreateFieldDateFormat struct {
	DateFormatEnum *DateFormatEnum
	NullEnum *NullEnum
}

// DateFormatEnumAsCountFieldCreateFieldDateFormat is a convenience function that returns DateFormatEnum wrapped in CountFieldCreateFieldDateFormat
func DateFormatEnumAsCountFieldCreateFieldDateFormat(v *DateFormatEnum) CountFieldCreateFieldDateFormat {
	return CountFieldCreateFieldDateFormat{
		DateFormatEnum: v,
	}
}

// NullEnumAsCountFieldCreateFieldDateFormat is a convenience function that returns NullEnum wrapped in CountFieldCreateFieldDateFormat
func NullEnumAsCountFieldCreateFieldDateFormat(v *NullEnum) CountFieldCreateFieldDateFormat {
	return CountFieldCreateFieldDateFormat{
		NullEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CountFieldCreateFieldDateFormat) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into DateFormatEnum
	err = newStrictDecoder(data).Decode(&dst.DateFormatEnum)
	if err == nil {
		jsonDateFormatEnum, _ := json.Marshal(dst.DateFormatEnum)
		if string(jsonDateFormatEnum) == "{}" { // empty struct
			dst.DateFormatEnum = nil
		} else {
			match++
		}
	} else {
		dst.DateFormatEnum = nil
	}

	// try to unmarshal data into NullEnum
	err = newStrictDecoder(data).Decode(&dst.NullEnum)
	if err == nil {
		jsonNullEnum, _ := json.Marshal(dst.NullEnum)
		if string(jsonNullEnum) == "{}" { // empty struct
			dst.NullEnum = nil
		} else {
			match++
		}
	} else {
		dst.NullEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DateFormatEnum = nil
		dst.NullEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CountFieldCreateFieldDateFormat)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CountFieldCreateFieldDateFormat)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CountFieldCreateFieldDateFormat) MarshalJSON() ([]byte, error) {
	if src.DateFormatEnum != nil {
		return json.Marshal(&src.DateFormatEnum)
	}

	if src.NullEnum != nil {
		return json.Marshal(&src.NullEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CountFieldCreateFieldDateFormat) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DateFormatEnum != nil {
		return obj.DateFormatEnum
	}

	if obj.NullEnum != nil {
		return obj.NullEnum
	}

	// all schemas are nil
	return nil
}

type NullableCountFieldCreateFieldDateFormat struct {
	value *CountFieldCreateFieldDateFormat
	isSet bool
}

func (v NullableCountFieldCreateFieldDateFormat) Get() *CountFieldCreateFieldDateFormat {
	return v.value
}

func (v *NullableCountFieldCreateFieldDateFormat) Set(val *CountFieldCreateFieldDateFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCountFieldCreateFieldDateFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCountFieldCreateFieldDateFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountFieldCreateFieldDateFormat(val *CountFieldCreateFieldDateFormat) *NullableCountFieldCreateFieldDateFormat {
	return &NullableCountFieldCreateFieldDateFormat{value: val, isSet: true}
}

func (v NullableCountFieldCreateFieldDateFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountFieldCreateFieldDateFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


