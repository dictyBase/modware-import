/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GridViewFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridViewFilter{}

// GridViewFilter struct for GridViewFilter
type GridViewFilter struct {
	// Only the fields related to the provided ids are added to the response. If None are provided all fields will be returned.
	FieldIds []int32 `json:"field_ids,omitempty"`
	// Only rows related to the provided ids are added to the response.
	RowIds []int32 `json:"row_ids"`
}

// NewGridViewFilter instantiates a new GridViewFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridViewFilter(rowIds []int32) *GridViewFilter {
	this := GridViewFilter{}
	this.RowIds = rowIds
	return &this
}

// NewGridViewFilterWithDefaults instantiates a new GridViewFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridViewFilterWithDefaults() *GridViewFilter {
	this := GridViewFilter{}
	return &this
}

// GetFieldIds returns the FieldIds field value if set, zero value otherwise.
func (o *GridViewFilter) GetFieldIds() []int32 {
	if o == nil || IsNil(o.FieldIds) {
		var ret []int32
		return ret
	}
	return o.FieldIds
}

// GetFieldIdsOk returns a tuple with the FieldIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridViewFilter) GetFieldIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.FieldIds) {
		return nil, false
	}
	return o.FieldIds, true
}

// HasFieldIds returns a boolean if a field has been set.
func (o *GridViewFilter) HasFieldIds() bool {
	if o != nil && !IsNil(o.FieldIds) {
		return true
	}

	return false
}

// SetFieldIds gets a reference to the given []int32 and assigns it to the FieldIds field.
func (o *GridViewFilter) SetFieldIds(v []int32) {
	o.FieldIds = v
}

// GetRowIds returns the RowIds field value
func (o *GridViewFilter) GetRowIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RowIds
}

// GetRowIdsOk returns a tuple with the RowIds field value
// and a boolean to check if the value has been set.
func (o *GridViewFilter) GetRowIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RowIds, true
}

// SetRowIds sets field value
func (o *GridViewFilter) SetRowIds(v []int32) {
	o.RowIds = v
}

func (o GridViewFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridViewFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldIds) {
		toSerialize["field_ids"] = o.FieldIds
	}
	toSerialize["row_ids"] = o.RowIds
	return toSerialize, nil
}

type NullableGridViewFilter struct {
	value *GridViewFilter
	isSet bool
}

func (v NullableGridViewFilter) Get() *GridViewFilter {
	return v.value
}

func (v *NullableGridViewFilter) Set(val *GridViewFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableGridViewFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableGridViewFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridViewFilter(val *GridViewFilter) *NullableGridViewFilter {
	return &NullableGridViewFilter{value: val, isSet: true}
}

func (v NullableGridViewFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridViewFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


