/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
type Team struct {
	// A human friendly name for this team.
	Name string `json:"name"`
	// The uid of the role you want to assign to the team in the given workspace. You can omit this property if you want to remove the role.
	DefaultRole NullableString `json:"default_role,omitempty"`
	// An array of subject ID/type objects to be used during team create and update.
	Subjects []TeamSubject `json:"subjects,omitempty"`
}

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam(name string) *Team {
	this := Team{}
	this.Name = name
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetName returns the Name field value
func (o *Team) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Team) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Team) SetName(v string) {
	o.Name = v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetDefaultRole() string {
	if o == nil || IsNil(o.DefaultRole.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultRole.Get()
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetDefaultRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRole.Get(), o.DefaultRole.IsSet()
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *Team) HasDefaultRole() bool {
	if o != nil && o.DefaultRole.IsSet() {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given NullableString and assigns it to the DefaultRole field.
func (o *Team) SetDefaultRole(v string) {
	o.DefaultRole.Set(&v)
}
// SetDefaultRoleNil sets the value for DefaultRole to be an explicit nil
func (o *Team) SetDefaultRoleNil() {
	o.DefaultRole.Set(nil)
}

// UnsetDefaultRole ensures that no value is present for DefaultRole, not even an explicit nil
func (o *Team) UnsetDefaultRole() {
	o.DefaultRole.Unset()
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *Team) GetSubjects() []TeamSubject {
	if o == nil || IsNil(o.Subjects) {
		var ret []TeamSubject
		return ret
	}
	return o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetSubjectsOk() ([]TeamSubject, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *Team) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []TeamSubject and assigns it to the Subjects field.
func (o *Team) SetSubjects(v []TeamSubject) {
	o.Subjects = v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.DefaultRole.IsSet() {
		toSerialize["default_role"] = o.DefaultRole.Get()
	}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	return toSerialize, nil
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


