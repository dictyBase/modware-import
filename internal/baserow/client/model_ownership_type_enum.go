/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OwnershipTypeEnum * `collaborative` - collaborative * `personal` - personal
type OwnershipTypeEnum string

// List of OwnershipTypeEnum
const (
	COLLABORATIVE OwnershipTypeEnum = "collaborative"
	PERSONAL OwnershipTypeEnum = "personal"
)

// All allowed values of OwnershipTypeEnum enum
var AllowedOwnershipTypeEnumEnumValues = []OwnershipTypeEnum{
	"collaborative",
	"personal",
}

func (v *OwnershipTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OwnershipTypeEnum(value)
	for _, existing := range AllowedOwnershipTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OwnershipTypeEnum", value)
}

// NewOwnershipTypeEnumFromValue returns a pointer to a valid OwnershipTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOwnershipTypeEnumFromValue(v string) (*OwnershipTypeEnum, error) {
	ev := OwnershipTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OwnershipTypeEnum: valid values are %v", v, AllowedOwnershipTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OwnershipTypeEnum) IsValid() bool {
	for _, existing := range AllowedOwnershipTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OwnershipTypeEnum value
func (v OwnershipTypeEnum) Ptr() *OwnershipTypeEnum {
	return &v
}

type NullableOwnershipTypeEnum struct {
	value *OwnershipTypeEnum
	isSet bool
}

func (v NullableOwnershipTypeEnum) Get() *OwnershipTypeEnum {
	return v.value
}

func (v *NullableOwnershipTypeEnum) Set(val *OwnershipTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnershipTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnershipTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnershipTypeEnum(val *OwnershipTypeEnum) *NullableOwnershipTypeEnum {
	return &NullableOwnershipTypeEnum{value: val, isSet: true}
}

func (v NullableOwnershipTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnershipTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

