/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PatchedTrashEntryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedTrashEntryRequest{}

// PatchedTrashEntryRequest Mixin to a DRF serializer class to raise an exception if data with unknown fields is provided to the serializer.
type PatchedTrashEntryRequest struct {
	TrashItemId *int32 `json:"trash_item_id,omitempty"`
	ParentTrashItemId NullableInt32 `json:"parent_trash_item_id,omitempty"`
	TrashItemType *TrashItemTypeEnum `json:"trash_item_type,omitempty"`
}

// NewPatchedTrashEntryRequest instantiates a new PatchedTrashEntryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedTrashEntryRequest() *PatchedTrashEntryRequest {
	this := PatchedTrashEntryRequest{}
	return &this
}

// NewPatchedTrashEntryRequestWithDefaults instantiates a new PatchedTrashEntryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedTrashEntryRequestWithDefaults() *PatchedTrashEntryRequest {
	this := PatchedTrashEntryRequest{}
	return &this
}

// GetTrashItemId returns the TrashItemId field value if set, zero value otherwise.
func (o *PatchedTrashEntryRequest) GetTrashItemId() int32 {
	if o == nil || IsNil(o.TrashItemId) {
		var ret int32
		return ret
	}
	return *o.TrashItemId
}

// GetTrashItemIdOk returns a tuple with the TrashItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTrashEntryRequest) GetTrashItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrashItemId) {
		return nil, false
	}
	return o.TrashItemId, true
}

// HasTrashItemId returns a boolean if a field has been set.
func (o *PatchedTrashEntryRequest) HasTrashItemId() bool {
	if o != nil && !IsNil(o.TrashItemId) {
		return true
	}

	return false
}

// SetTrashItemId gets a reference to the given int32 and assigns it to the TrashItemId field.
func (o *PatchedTrashEntryRequest) SetTrashItemId(v int32) {
	o.TrashItemId = &v
}

// GetParentTrashItemId returns the ParentTrashItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTrashEntryRequest) GetParentTrashItemId() int32 {
	if o == nil || IsNil(o.ParentTrashItemId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentTrashItemId.Get()
}

// GetParentTrashItemIdOk returns a tuple with the ParentTrashItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTrashEntryRequest) GetParentTrashItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTrashItemId.Get(), o.ParentTrashItemId.IsSet()
}

// HasParentTrashItemId returns a boolean if a field has been set.
func (o *PatchedTrashEntryRequest) HasParentTrashItemId() bool {
	if o != nil && o.ParentTrashItemId.IsSet() {
		return true
	}

	return false
}

// SetParentTrashItemId gets a reference to the given NullableInt32 and assigns it to the ParentTrashItemId field.
func (o *PatchedTrashEntryRequest) SetParentTrashItemId(v int32) {
	o.ParentTrashItemId.Set(&v)
}
// SetParentTrashItemIdNil sets the value for ParentTrashItemId to be an explicit nil
func (o *PatchedTrashEntryRequest) SetParentTrashItemIdNil() {
	o.ParentTrashItemId.Set(nil)
}

// UnsetParentTrashItemId ensures that no value is present for ParentTrashItemId, not even an explicit nil
func (o *PatchedTrashEntryRequest) UnsetParentTrashItemId() {
	o.ParentTrashItemId.Unset()
}

// GetTrashItemType returns the TrashItemType field value if set, zero value otherwise.
func (o *PatchedTrashEntryRequest) GetTrashItemType() TrashItemTypeEnum {
	if o == nil || IsNil(o.TrashItemType) {
		var ret TrashItemTypeEnum
		return ret
	}
	return *o.TrashItemType
}

// GetTrashItemTypeOk returns a tuple with the TrashItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTrashEntryRequest) GetTrashItemTypeOk() (*TrashItemTypeEnum, bool) {
	if o == nil || IsNil(o.TrashItemType) {
		return nil, false
	}
	return o.TrashItemType, true
}

// HasTrashItemType returns a boolean if a field has been set.
func (o *PatchedTrashEntryRequest) HasTrashItemType() bool {
	if o != nil && !IsNil(o.TrashItemType) {
		return true
	}

	return false
}

// SetTrashItemType gets a reference to the given TrashItemTypeEnum and assigns it to the TrashItemType field.
func (o *PatchedTrashEntryRequest) SetTrashItemType(v TrashItemTypeEnum) {
	o.TrashItemType = &v
}

func (o PatchedTrashEntryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedTrashEntryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrashItemId) {
		toSerialize["trash_item_id"] = o.TrashItemId
	}
	if o.ParentTrashItemId.IsSet() {
		toSerialize["parent_trash_item_id"] = o.ParentTrashItemId.Get()
	}
	if !IsNil(o.TrashItemType) {
		toSerialize["trash_item_type"] = o.TrashItemType
	}
	return toSerialize, nil
}

type NullablePatchedTrashEntryRequest struct {
	value *PatchedTrashEntryRequest
	isSet bool
}

func (v NullablePatchedTrashEntryRequest) Get() *PatchedTrashEntryRequest {
	return v.value
}

func (v *NullablePatchedTrashEntryRequest) Set(val *PatchedTrashEntryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTrashEntryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTrashEntryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTrashEntryRequest(val *PatchedTrashEntryRequest) *NullablePatchedTrashEntryRequest {
	return &NullablePatchedTrashEntryRequest{value: val, isSet: true}
}

func (v NullablePatchedTrashEntryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTrashEntryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


