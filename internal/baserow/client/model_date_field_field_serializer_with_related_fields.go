/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DateFieldFieldSerializerWithRelatedFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateFieldFieldSerializerWithRelatedFields{}

// DateFieldFieldSerializerWithRelatedFields struct for DateFieldFieldSerializerWithRelatedFields
type DateFieldFieldSerializerWithRelatedFields struct {
	Id int32 `json:"id"`
	TableId int32 `json:"table_id"`
	Name *string `json:"name,omitempty"`
	// Lowest first.
	Order int32 `json:"order"`
	// The type of the related field.
	Type string `json:"type"`
	// Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
	Primary *bool `json:"primary,omitempty"`
	// Indicates whether the field is a read only field. If true, it's not possible to update the cell value.
	ReadOnly bool `json:"read_only"`
	// A list of related fields which also changed.
	RelatedFields []Field `json:"related_fields"`
	DateFormat *DateFormatEnum `json:"date_format,omitempty"`
	// Indicates if the field also includes a time.
	DateIncludeTime *bool `json:"date_include_time,omitempty"`
	DateTimeFormat *DateTimeFormatEnum `json:"date_time_format,omitempty"`
	// Indicates if the timezone should be shown.
	DateShowTzinfo *bool `json:"date_show_tzinfo,omitempty"`
	// Force a timezone for the field overriding user profile settings.
	DateForceTimezone NullableString `json:"date_force_timezone,omitempty"`
}

// NewDateFieldFieldSerializerWithRelatedFields instantiates a new DateFieldFieldSerializerWithRelatedFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateFieldFieldSerializerWithRelatedFields(id int32, tableId int32, order int32, type_ string, readOnly bool, relatedFields []Field) *DateFieldFieldSerializerWithRelatedFields {
	this := DateFieldFieldSerializerWithRelatedFields{}
	this.Id = id
	this.TableId = tableId
	this.Order = order
	this.Type = type_
	this.ReadOnly = readOnly
	this.RelatedFields = relatedFields
	return &this
}

// NewDateFieldFieldSerializerWithRelatedFieldsWithDefaults instantiates a new DateFieldFieldSerializerWithRelatedFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateFieldFieldSerializerWithRelatedFieldsWithDefaults() *DateFieldFieldSerializerWithRelatedFields {
	this := DateFieldFieldSerializerWithRelatedFields{}
	return &this
}

// GetId returns the Id field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetId(v int32) {
	o.Id = v
}

// GetTableId returns the TableId field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetTableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetTableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableId, true
}

// SetTableId sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetTableId(v int32) {
	o.TableId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetOrder(v int32) {
	o.Order = v
}

// GetType returns the Type field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetType(v string) {
	o.Type = v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetPrimary(v bool) {
	o.Primary = &v
}

// GetReadOnly returns the ReadOnly field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetRelatedFields returns the RelatedFields field value
func (o *DateFieldFieldSerializerWithRelatedFields) GetRelatedFields() []Field {
	if o == nil {
		var ret []Field
		return ret
	}

	return o.RelatedFields
}

// GetRelatedFieldsOk returns a tuple with the RelatedFields field value
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetRelatedFieldsOk() ([]Field, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelatedFields, true
}

// SetRelatedFields sets field value
func (o *DateFieldFieldSerializerWithRelatedFields) SetRelatedFields(v []Field) {
	o.RelatedFields = v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateFormat() DateFormatEnum {
	if o == nil || IsNil(o.DateFormat) {
		var ret DateFormatEnum
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateFormatOk() (*DateFormatEnum, bool) {
	if o == nil || IsNil(o.DateFormat) {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasDateFormat() bool {
	if o != nil && !IsNil(o.DateFormat) {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given DateFormatEnum and assigns it to the DateFormat field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateFormat(v DateFormatEnum) {
	o.DateFormat = &v
}

// GetDateIncludeTime returns the DateIncludeTime field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateIncludeTime() bool {
	if o == nil || IsNil(o.DateIncludeTime) {
		var ret bool
		return ret
	}
	return *o.DateIncludeTime
}

// GetDateIncludeTimeOk returns a tuple with the DateIncludeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateIncludeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.DateIncludeTime) {
		return nil, false
	}
	return o.DateIncludeTime, true
}

// HasDateIncludeTime returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasDateIncludeTime() bool {
	if o != nil && !IsNil(o.DateIncludeTime) {
		return true
	}

	return false
}

// SetDateIncludeTime gets a reference to the given bool and assigns it to the DateIncludeTime field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateIncludeTime(v bool) {
	o.DateIncludeTime = &v
}

// GetDateTimeFormat returns the DateTimeFormat field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateTimeFormat() DateTimeFormatEnum {
	if o == nil || IsNil(o.DateTimeFormat) {
		var ret DateTimeFormatEnum
		return ret
	}
	return *o.DateTimeFormat
}

// GetDateTimeFormatOk returns a tuple with the DateTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateTimeFormatOk() (*DateTimeFormatEnum, bool) {
	if o == nil || IsNil(o.DateTimeFormat) {
		return nil, false
	}
	return o.DateTimeFormat, true
}

// HasDateTimeFormat returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasDateTimeFormat() bool {
	if o != nil && !IsNil(o.DateTimeFormat) {
		return true
	}

	return false
}

// SetDateTimeFormat gets a reference to the given DateTimeFormatEnum and assigns it to the DateTimeFormat field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateTimeFormat(v DateTimeFormatEnum) {
	o.DateTimeFormat = &v
}

// GetDateShowTzinfo returns the DateShowTzinfo field value if set, zero value otherwise.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateShowTzinfo() bool {
	if o == nil || IsNil(o.DateShowTzinfo) {
		var ret bool
		return ret
	}
	return *o.DateShowTzinfo
}

// GetDateShowTzinfoOk returns a tuple with the DateShowTzinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateShowTzinfoOk() (*bool, bool) {
	if o == nil || IsNil(o.DateShowTzinfo) {
		return nil, false
	}
	return o.DateShowTzinfo, true
}

// HasDateShowTzinfo returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasDateShowTzinfo() bool {
	if o != nil && !IsNil(o.DateShowTzinfo) {
		return true
	}

	return false
}

// SetDateShowTzinfo gets a reference to the given bool and assigns it to the DateShowTzinfo field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateShowTzinfo(v bool) {
	o.DateShowTzinfo = &v
}

// GetDateForceTimezone returns the DateForceTimezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateForceTimezone() string {
	if o == nil || IsNil(o.DateForceTimezone.Get()) {
		var ret string
		return ret
	}
	return *o.DateForceTimezone.Get()
}

// GetDateForceTimezoneOk returns a tuple with the DateForceTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DateFieldFieldSerializerWithRelatedFields) GetDateForceTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateForceTimezone.Get(), o.DateForceTimezone.IsSet()
}

// HasDateForceTimezone returns a boolean if a field has been set.
func (o *DateFieldFieldSerializerWithRelatedFields) HasDateForceTimezone() bool {
	if o != nil && o.DateForceTimezone.IsSet() {
		return true
	}

	return false
}

// SetDateForceTimezone gets a reference to the given NullableString and assigns it to the DateForceTimezone field.
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateForceTimezone(v string) {
	o.DateForceTimezone.Set(&v)
}
// SetDateForceTimezoneNil sets the value for DateForceTimezone to be an explicit nil
func (o *DateFieldFieldSerializerWithRelatedFields) SetDateForceTimezoneNil() {
	o.DateForceTimezone.Set(nil)
}

// UnsetDateForceTimezone ensures that no value is present for DateForceTimezone, not even an explicit nil
func (o *DateFieldFieldSerializerWithRelatedFields) UnsetDateForceTimezone() {
	o.DateForceTimezone.Unset()
}

func (o DateFieldFieldSerializerWithRelatedFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateFieldFieldSerializerWithRelatedFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: table_id is readOnly
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["order"] = o.Order
	// skip: type is readOnly
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	// skip: read_only is readOnly
	// skip: related_fields is readOnly
	if !IsNil(o.DateFormat) {
		toSerialize["date_format"] = o.DateFormat
	}
	if !IsNil(o.DateIncludeTime) {
		toSerialize["date_include_time"] = o.DateIncludeTime
	}
	if !IsNil(o.DateTimeFormat) {
		toSerialize["date_time_format"] = o.DateTimeFormat
	}
	if !IsNil(o.DateShowTzinfo) {
		toSerialize["date_show_tzinfo"] = o.DateShowTzinfo
	}
	if o.DateForceTimezone.IsSet() {
		toSerialize["date_force_timezone"] = o.DateForceTimezone.Get()
	}
	return toSerialize, nil
}

type NullableDateFieldFieldSerializerWithRelatedFields struct {
	value *DateFieldFieldSerializerWithRelatedFields
	isSet bool
}

func (v NullableDateFieldFieldSerializerWithRelatedFields) Get() *DateFieldFieldSerializerWithRelatedFields {
	return v.value
}

func (v *NullableDateFieldFieldSerializerWithRelatedFields) Set(val *DateFieldFieldSerializerWithRelatedFields) {
	v.value = val
	v.isSet = true
}

func (v NullableDateFieldFieldSerializerWithRelatedFields) IsSet() bool {
	return v.isSet
}

func (v *NullableDateFieldFieldSerializerWithRelatedFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateFieldFieldSerializerWithRelatedFields(val *DateFieldFieldSerializerWithRelatedFields) *NullableDateFieldFieldSerializerWithRelatedFields {
	return &NullableDateFieldFieldSerializerWithRelatedFields{value: val, isSet: true}
}

func (v NullableDateFieldFieldSerializerWithRelatedFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateFieldFieldSerializerWithRelatedFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


