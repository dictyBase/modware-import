/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PublicViewSort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicViewSort{}

// PublicViewSort struct for PublicViewSort
type PublicViewSort struct {
	Id int32 `json:"id"`
	View string `json:"view"`
	// The field that must be sorted on.
	Field int32 `json:"field"`
	Order *OrderEnum `json:"order,omitempty"`
}

// NewPublicViewSort instantiates a new PublicViewSort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicViewSort(id int32, view string, field int32) *PublicViewSort {
	this := PublicViewSort{}
	this.Id = id
	this.View = view
	this.Field = field
	return &this
}

// NewPublicViewSortWithDefaults instantiates a new PublicViewSort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicViewSortWithDefaults() *PublicViewSort {
	this := PublicViewSort{}
	return &this
}

// GetId returns the Id field value
func (o *PublicViewSort) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicViewSort) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicViewSort) SetId(v int32) {
	o.Id = v
}

// GetView returns the View field value
func (o *PublicViewSort) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *PublicViewSort) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *PublicViewSort) SetView(v string) {
	o.View = v
}

// GetField returns the Field field value
func (o *PublicViewSort) GetField() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *PublicViewSort) GetFieldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *PublicViewSort) SetField(v int32) {
	o.Field = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PublicViewSort) GetOrder() OrderEnum {
	if o == nil || IsNil(o.Order) {
		var ret OrderEnum
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicViewSort) GetOrderOk() (*OrderEnum, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PublicViewSort) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given OrderEnum and assigns it to the Order field.
func (o *PublicViewSort) SetOrder(v OrderEnum) {
	o.Order = &v
}

func (o PublicViewSort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicViewSort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["view"] = o.View
	toSerialize["field"] = o.Field
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullablePublicViewSort struct {
	value *PublicViewSort
	isSet bool
}

func (v NullablePublicViewSort) Get() *PublicViewSort {
	return v.value
}

func (v *NullablePublicViewSort) Set(val *PublicViewSort) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicViewSort) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicViewSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicViewSort(val *PublicViewSort) *NullablePublicViewSort {
	return &NullablePublicViewSort{value: val, isSet: true}
}

func (v NullablePublicViewSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicViewSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


