/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PatchedUpdateViewFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedUpdateViewFilter{}

// PatchedUpdateViewFilter struct for PatchedUpdateViewFilter
type PatchedUpdateViewFilter struct {
	// The field of which the value must be compared to the filter value.
	Field *int32 `json:"field,omitempty"`
	Type *Type51aEnum `json:"type,omitempty"`
	// The filter value that must be compared to the field's value.
	Value *string `json:"value,omitempty"`
}

// NewPatchedUpdateViewFilter instantiates a new PatchedUpdateViewFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedUpdateViewFilter() *PatchedUpdateViewFilter {
	this := PatchedUpdateViewFilter{}
	return &this
}

// NewPatchedUpdateViewFilterWithDefaults instantiates a new PatchedUpdateViewFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedUpdateViewFilterWithDefaults() *PatchedUpdateViewFilter {
	this := PatchedUpdateViewFilter{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *PatchedUpdateViewFilter) GetField() int32 {
	if o == nil || IsNil(o.Field) {
		var ret int32
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUpdateViewFilter) GetFieldOk() (*int32, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *PatchedUpdateViewFilter) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given int32 and assigns it to the Field field.
func (o *PatchedUpdateViewFilter) SetField(v int32) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedUpdateViewFilter) GetType() Type51aEnum {
	if o == nil || IsNil(o.Type) {
		var ret Type51aEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUpdateViewFilter) GetTypeOk() (*Type51aEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedUpdateViewFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Type51aEnum and assigns it to the Type field.
func (o *PatchedUpdateViewFilter) SetType(v Type51aEnum) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PatchedUpdateViewFilter) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUpdateViewFilter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PatchedUpdateViewFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PatchedUpdateViewFilter) SetValue(v string) {
	o.Value = &v
}

func (o PatchedUpdateViewFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedUpdateViewFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePatchedUpdateViewFilter struct {
	value *PatchedUpdateViewFilter
	isSet bool
}

func (v NullablePatchedUpdateViewFilter) Get() *PatchedUpdateViewFilter {
	return v.value
}

func (v *NullablePatchedUpdateViewFilter) Set(val *PatchedUpdateViewFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedUpdateViewFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedUpdateViewFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedUpdateViewFilter(val *PatchedUpdateViewFilter) *NullablePatchedUpdateViewFilter {
	return &NullablePatchedUpdateViewFilter{value: val, isSet: true}
}

func (v NullablePatchedUpdateViewFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedUpdateViewFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


