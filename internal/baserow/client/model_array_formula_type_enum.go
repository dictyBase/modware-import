/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ArrayFormulaTypeEnum * `invalid` - invalid * `text` - text * `char` - char * `link` - link * `date_interval` - date_interval * `date` - date * `boolean` - boolean * `number` - number * `single_select` - single_select
type ArrayFormulaTypeEnum string

// List of ArrayFormulaTypeEnum

// All allowed values of ArrayFormulaTypeEnum enum
var AllowedArrayFormulaTypeEnumEnumValues = []ArrayFormulaTypeEnum{
	"invalid",
	"text",
	"char",
	"link",
	"date_interval",
	"date",
	"boolean",
	"number",
	"single_select",
}

func (v *ArrayFormulaTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArrayFormulaTypeEnum(value)
	for _, existing := range AllowedArrayFormulaTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArrayFormulaTypeEnum", value)
}

// NewArrayFormulaTypeEnumFromValue returns a pointer to a valid ArrayFormulaTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArrayFormulaTypeEnumFromValue(v string) (*ArrayFormulaTypeEnum, error) {
	ev := ArrayFormulaTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArrayFormulaTypeEnum: valid values are %v", v, AllowedArrayFormulaTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArrayFormulaTypeEnum) IsValid() bool {
	for _, existing := range AllowedArrayFormulaTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArrayFormulaTypeEnum value
func (v ArrayFormulaTypeEnum) Ptr() *ArrayFormulaTypeEnum {
	return &v
}

type NullableArrayFormulaTypeEnum struct {
	value *ArrayFormulaTypeEnum
	isSet bool
}

func (v NullableArrayFormulaTypeEnum) Get() *ArrayFormulaTypeEnum {
	return v.value
}

func (v *NullableArrayFormulaTypeEnum) Set(val *ArrayFormulaTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayFormulaTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayFormulaTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayFormulaTypeEnum(val *ArrayFormulaTypeEnum) *NullableArrayFormulaTypeEnum {
	return &NullableArrayFormulaTypeEnum{value: val, isSet: true}
}

func (v NullableArrayFormulaTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayFormulaTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

