/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ScopeTypeEnum * `core` - core * `application` - application * `workspace` - workspace * `workspace_invitation` - workspace_invitation * `snapshot` - snapshot * `workspace_user` - workspace_user * `database` - database * `database_table` - database_table * `database_field` - database_field * `database_view` - database_view * `database_view_decoration` - database_view_decoration * `database_view_sort` - database_view_sort * `database_view_filter` - database_view_filter * `token` - token * `team` - team * `team_subject` - team_subject * `license` - license
type ScopeTypeEnum string

// List of ScopeTypeEnum
const (
	CORE ScopeTypeEnum = "core"
	WORKSPACE_INVITATION ScopeTypeEnum = "workspace_invitation"
	SNAPSHOT ScopeTypeEnum = "snapshot"
	WORKSPACE_USER ScopeTypeEnum = "workspace_user"
	DATABASE_TABLE ScopeTypeEnum = "database_table"
	DATABASE_FIELD ScopeTypeEnum = "database_field"
	DATABASE_VIEW ScopeTypeEnum = "database_view"
	DATABASE_VIEW_DECORATION ScopeTypeEnum = "database_view_decoration"
	DATABASE_VIEW_SORT ScopeTypeEnum = "database_view_sort"
	DATABASE_VIEW_FILTER ScopeTypeEnum = "database_view_filter"
	TOKEN ScopeTypeEnum = "token"
	TEAM_SUBJECT ScopeTypeEnum = "team_subject"
	LICENSE ScopeTypeEnum = "license"
)

// All allowed values of ScopeTypeEnum enum
var AllowedScopeTypeEnumEnumValues = []ScopeTypeEnum{
	"core",
	"application",
	"workspace",
	"workspace_invitation",
	"snapshot",
	"workspace_user",
	"database",
	"database_table",
	"database_field",
	"database_view",
	"database_view_decoration",
	"database_view_sort",
	"database_view_filter",
	"token",
	"team",
	"team_subject",
	"license",
}

func (v *ScopeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScopeTypeEnum(value)
	for _, existing := range AllowedScopeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScopeTypeEnum", value)
}

// NewScopeTypeEnumFromValue returns a pointer to a valid ScopeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScopeTypeEnumFromValue(v string) (*ScopeTypeEnum, error) {
	ev := ScopeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScopeTypeEnum: valid values are %v", v, AllowedScopeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScopeTypeEnum) IsValid() bool {
	for _, existing := range AllowedScopeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScopeTypeEnum value
func (v ScopeTypeEnum) Ptr() *ScopeTypeEnum {
	return &v
}

type NullableScopeTypeEnum struct {
	value *ScopeTypeEnum
	isSet bool
}

func (v NullableScopeTypeEnum) Get() *ScopeTypeEnum {
	return v.value
}

func (v *NullableScopeTypeEnum) Set(val *ScopeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeTypeEnum(val *ScopeTypeEnum) *NullableScopeTypeEnum {
	return &NullableScopeTypeEnum{value: val, isSet: true}
}

func (v NullableScopeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

