/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EventTypeEnum * `rows.created` - rows.created * `row.created` - row.created * `rows.updated` - rows.updated * `row.updated` - row.updated * `rows.deleted` - rows.deleted * `row.deleted` - row.deleted
type EventTypeEnum string

// List of EventTypeEnum

// All allowed values of EventTypeEnum enum
var AllowedEventTypeEnumEnumValues = []EventTypeEnum{
	"rows.created",
	"row.created",
	"rows.updated",
	"row.updated",
	"rows.deleted",
	"row.deleted",
}

func (v *EventTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventTypeEnum(value)
	for _, existing := range AllowedEventTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventTypeEnum", value)
}

// NewEventTypeEnumFromValue returns a pointer to a valid EventTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeEnumFromValue(v string) (*EventTypeEnum, error) {
	ev := EventTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventTypeEnum: valid values are %v", v, AllowedEventTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventTypeEnum) IsValid() bool {
	for _, existing := range AllowedEventTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventTypeEnum value
func (v EventTypeEnum) Ptr() *EventTypeEnum {
	return &v
}

type NullableEventTypeEnum struct {
	value *EventTypeEnum
	isSet bool
}

func (v NullableEventTypeEnum) Get() *EventTypeEnum {
	return v.value
}

func (v *NullableEventTypeEnum) Set(val *EventTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeEnum(val *EventTypeEnum) *NullableEventTypeEnum {
	return &NullableEventTypeEnum{value: val, isSet: true}
}

func (v NullableEventTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

