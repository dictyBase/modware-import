/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the TeamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamResponse{}

// TeamResponse struct for TeamResponse
type TeamResponse struct {
	Id int32 `json:"id"`
	// A human friendly name for this team.
	Name string `json:"name"`
	// DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
	Group int32 `json:"group"`
	// The workspace that this team belongs to.
	Workspace int32 `json:"workspace"`
	CreatedOn time.Time `json:"created_on"`
	UpdatedOn time.Time `json:"updated_on"`
	// The uid of the role this team has in its workspace.
	DefaultRole *string `json:"default_role,omitempty"`
	// The amount of subjects (e.g. users) that are currently assigned to this team.
	SubjectCount int32 `json:"subject_count"`
	// A sample, by default 10, of the most recent subjects to join this team.
	SubjectSample []TeamSampleSubject `json:"subject_sample,omitempty"`
}

// NewTeamResponse instantiates a new TeamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamResponse(id int32, name string, group int32, workspace int32, createdOn time.Time, updatedOn time.Time, subjectCount int32) *TeamResponse {
	this := TeamResponse{}
	this.Id = id
	this.Name = name
	this.Group = group
	this.Workspace = workspace
	this.CreatedOn = createdOn
	this.UpdatedOn = updatedOn
	this.SubjectCount = subjectCount
	return &this
}

// NewTeamResponseWithDefaults instantiates a new TeamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamResponseWithDefaults() *TeamResponse {
	this := TeamResponse{}
	return &this
}

// GetId returns the Id field value
func (o *TeamResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamResponse) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TeamResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamResponse) SetName(v string) {
	o.Name = v
}

// GetGroup returns the Group field value
func (o *TeamResponse) GetGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *TeamResponse) SetGroup(v int32) {
	o.Group = v
}

// GetWorkspace returns the Workspace field value
func (o *TeamResponse) GetWorkspace() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetWorkspaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace, true
}

// SetWorkspace sets field value
func (o *TeamResponse) SetWorkspace(v int32) {
	o.Workspace = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *TeamResponse) GetCreatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *TeamResponse) SetCreatedOn(v time.Time) {
	o.CreatedOn = v
}

// GetUpdatedOn returns the UpdatedOn field value
func (o *TeamResponse) GetUpdatedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedOn
}

// GetUpdatedOnOk returns a tuple with the UpdatedOn field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetUpdatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedOn, true
}

// SetUpdatedOn sets field value
func (o *TeamResponse) SetUpdatedOn(v time.Time) {
	o.UpdatedOn = v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise.
func (o *TeamResponse) GetDefaultRole() string {
	if o == nil || IsNil(o.DefaultRole) {
		var ret string
		return ret
	}
	return *o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetDefaultRoleOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRole) {
		return nil, false
	}
	return o.DefaultRole, true
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *TeamResponse) HasDefaultRole() bool {
	if o != nil && !IsNil(o.DefaultRole) {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given string and assigns it to the DefaultRole field.
func (o *TeamResponse) SetDefaultRole(v string) {
	o.DefaultRole = &v
}

// GetSubjectCount returns the SubjectCount field value
func (o *TeamResponse) GetSubjectCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubjectCount
}

// GetSubjectCountOk returns a tuple with the SubjectCount field value
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetSubjectCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectCount, true
}

// SetSubjectCount sets field value
func (o *TeamResponse) SetSubjectCount(v int32) {
	o.SubjectCount = v
}

// GetSubjectSample returns the SubjectSample field value if set, zero value otherwise.
func (o *TeamResponse) GetSubjectSample() []TeamSampleSubject {
	if o == nil || IsNil(o.SubjectSample) {
		var ret []TeamSampleSubject
		return ret
	}
	return o.SubjectSample
}

// GetSubjectSampleOk returns a tuple with the SubjectSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamResponse) GetSubjectSampleOk() ([]TeamSampleSubject, bool) {
	if o == nil || IsNil(o.SubjectSample) {
		return nil, false
	}
	return o.SubjectSample, true
}

// HasSubjectSample returns a boolean if a field has been set.
func (o *TeamResponse) HasSubjectSample() bool {
	if o != nil && !IsNil(o.SubjectSample) {
		return true
	}

	return false
}

// SetSubjectSample gets a reference to the given []TeamSampleSubject and assigns it to the SubjectSample field.
func (o *TeamResponse) SetSubjectSample(v []TeamSampleSubject) {
	o.SubjectSample = v
}

func (o TeamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["group"] = o.Group
	toSerialize["workspace"] = o.Workspace
	// skip: created_on is readOnly
	// skip: updated_on is readOnly
	if !IsNil(o.DefaultRole) {
		toSerialize["default_role"] = o.DefaultRole
	}
	toSerialize["subject_count"] = o.SubjectCount
	if !IsNil(o.SubjectSample) {
		toSerialize["subject_sample"] = o.SubjectSample
	}
	return toSerialize, nil
}

type NullableTeamResponse struct {
	value *TeamResponse
	isSet bool
}

func (v NullableTeamResponse) Get() *TeamResponse {
	return v.value
}

func (v *NullableTeamResponse) Set(val *TeamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamResponse(val *TeamResponse) *NullableTeamResponse {
	return &NullableTeamResponse{value: val, isSet: true}
}

func (v NullableTeamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


