/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Table type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Table{}

// Table struct for Table
type Table struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	// Lowest first.
	Order int32 `json:"order"`
	DatabaseId int32 `json:"database_id"`
}

// NewTable instantiates a new Table object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTable(id int32, name string, order int32, databaseId int32) *Table {
	this := Table{}
	this.Id = id
	this.Name = name
	this.Order = order
	this.DatabaseId = databaseId
	return &this
}

// NewTableWithDefaults instantiates a new Table object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableWithDefaults() *Table {
	this := Table{}
	return &this
}

// GetId returns the Id field value
func (o *Table) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Table) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Table) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Table) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Table) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Table) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value
func (o *Table) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *Table) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *Table) SetOrder(v int32) {
	o.Order = v
}

// GetDatabaseId returns the DatabaseId field value
func (o *Table) GetDatabaseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DatabaseId
}

// GetDatabaseIdOk returns a tuple with the DatabaseId field value
// and a boolean to check if the value has been set.
func (o *Table) GetDatabaseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseId, true
}

// SetDatabaseId sets field value
func (o *Table) SetDatabaseId(v int32) {
	o.DatabaseId = v
}

func (o Table) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Table) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["order"] = o.Order
	// skip: database_id is readOnly
	return toSerialize, nil
}

type NullableTable struct {
	value *Table
	isSet bool
}

func (v NullableTable) Get() *Table {
	return v.value
}

func (v *NullableTable) Set(val *Table) {
	v.value = val
	v.isSet = true
}

func (v NullableTable) IsSet() bool {
	return v.isSet
}

func (v *NullableTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTable(val *Table) *NullableTable {
	return &NullableTable{value: val, isSet: true}
}

func (v NullableTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


