/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TrashItemTypeEnum * `workspace` - workspace * `application` - application * `group` - group * `table` - table * `field` - field * `row` - row * `rows` - rows * `view` - view * `team` - team
type TrashItemTypeEnum string

// List of TrashItemTypeEnum
const (
	WORKSPACE TrashItemTypeEnum = "workspace"
	APPLICATION TrashItemTypeEnum = "application"
	GROUP TrashItemTypeEnum = "group"
	TABLE TrashItemTypeEnum = "table"
	FIELD TrashItemTypeEnum = "field"
	ROW TrashItemTypeEnum = "row"
	ROWS TrashItemTypeEnum = "rows"
	VIEW TrashItemTypeEnum = "view"
	TEAM TrashItemTypeEnum = "team"
)

// All allowed values of TrashItemTypeEnum enum
var AllowedTrashItemTypeEnumEnumValues = []TrashItemTypeEnum{
	"workspace",
	"application",
	"group",
	"table",
	"field",
	"row",
	"rows",
	"view",
	"team",
}

func (v *TrashItemTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrashItemTypeEnum(value)
	for _, existing := range AllowedTrashItemTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrashItemTypeEnum", value)
}

// NewTrashItemTypeEnumFromValue returns a pointer to a valid TrashItemTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrashItemTypeEnumFromValue(v string) (*TrashItemTypeEnum, error) {
	ev := TrashItemTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrashItemTypeEnum: valid values are %v", v, AllowedTrashItemTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrashItemTypeEnum) IsValid() bool {
	for _, existing := range AllowedTrashItemTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrashItemTypeEnum value
func (v TrashItemTypeEnum) Ptr() *TrashItemTypeEnum {
	return &v
}

type NullableTrashItemTypeEnum struct {
	value *TrashItemTypeEnum
	isSet bool
}

func (v NullableTrashItemTypeEnum) Get() *TrashItemTypeEnum {
	return v.value
}

func (v *NullableTrashItemTypeEnum) Set(val *TrashItemTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashItemTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashItemTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashItemTypeEnum(val *TrashItemTypeEnum) *NullableTrashItemTypeEnum {
	return &NullableTrashItemTypeEnum{value: val, isSet: true}
}

func (v NullableTrashItemTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashItemTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

