/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PublicFormViewFieldOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicFormViewFieldOptions{}

// PublicFormViewFieldOptions struct for PublicFormViewFieldOptions
type PublicFormViewFieldOptions struct {
	// If provided, then this value will be visible above the field input.
	Name string `json:"name"`
	// If provided, then this value be will be shown under the field name.
	Description *string `json:"description,omitempty"`
	// Indicates whether the field is required for the visitor to fill out.
	Required *bool `json:"required,omitempty"`
	// The order that the field has in the form. Lower value is first.
	Order *int32 `json:"order,omitempty"`
	Field PublicFormViewFieldOptionsField `json:"field"`
	// Indicates whether this field is visible when the conditions are met.
	ShowWhenMatchingConditions *bool `json:"show_when_matching_conditions,omitempty"`
	ConditionType *ConditionTypeEnum `json:"condition_type,omitempty"`
	Conditions []FormViewFieldOptionsCondition `json:"conditions,omitempty"`
}

// NewPublicFormViewFieldOptions instantiates a new PublicFormViewFieldOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFormViewFieldOptions(name string, field PublicFormViewFieldOptionsField) *PublicFormViewFieldOptions {
	this := PublicFormViewFieldOptions{}
	this.Name = name
	this.Field = field
	return &this
}

// NewPublicFormViewFieldOptionsWithDefaults instantiates a new PublicFormViewFieldOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFormViewFieldOptionsWithDefaults() *PublicFormViewFieldOptions {
	this := PublicFormViewFieldOptions{}
	return &this
}

// GetName returns the Name field value
func (o *PublicFormViewFieldOptions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicFormViewFieldOptions) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PublicFormViewFieldOptions) SetDescription(v string) {
	o.Description = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *PublicFormViewFieldOptions) SetRequired(v bool) {
	o.Required = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *PublicFormViewFieldOptions) SetOrder(v int32) {
	o.Order = &v
}

// GetField returns the Field field value
func (o *PublicFormViewFieldOptions) GetField() PublicFormViewFieldOptionsField {
	if o == nil {
		var ret PublicFormViewFieldOptionsField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetFieldOk() (*PublicFormViewFieldOptionsField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *PublicFormViewFieldOptions) SetField(v PublicFormViewFieldOptionsField) {
	o.Field = v
}

// GetShowWhenMatchingConditions returns the ShowWhenMatchingConditions field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetShowWhenMatchingConditions() bool {
	if o == nil || IsNil(o.ShowWhenMatchingConditions) {
		var ret bool
		return ret
	}
	return *o.ShowWhenMatchingConditions
}

// GetShowWhenMatchingConditionsOk returns a tuple with the ShowWhenMatchingConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetShowWhenMatchingConditionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowWhenMatchingConditions) {
		return nil, false
	}
	return o.ShowWhenMatchingConditions, true
}

// HasShowWhenMatchingConditions returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasShowWhenMatchingConditions() bool {
	if o != nil && !IsNil(o.ShowWhenMatchingConditions) {
		return true
	}

	return false
}

// SetShowWhenMatchingConditions gets a reference to the given bool and assigns it to the ShowWhenMatchingConditions field.
func (o *PublicFormViewFieldOptions) SetShowWhenMatchingConditions(v bool) {
	o.ShowWhenMatchingConditions = &v
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetConditionType() ConditionTypeEnum {
	if o == nil || IsNil(o.ConditionType) {
		var ret ConditionTypeEnum
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetConditionTypeOk() (*ConditionTypeEnum, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given ConditionTypeEnum and assigns it to the ConditionType field.
func (o *PublicFormViewFieldOptions) SetConditionType(v ConditionTypeEnum) {
	o.ConditionType = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *PublicFormViewFieldOptions) GetConditions() []FormViewFieldOptionsCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []FormViewFieldOptionsCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFormViewFieldOptions) GetConditionsOk() ([]FormViewFieldOptionsCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *PublicFormViewFieldOptions) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []FormViewFieldOptionsCondition and assigns it to the Conditions field.
func (o *PublicFormViewFieldOptions) SetConditions(v []FormViewFieldOptionsCondition) {
	o.Conditions = v
}

func (o PublicFormViewFieldOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicFormViewFieldOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: name is readOnly
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	toSerialize["field"] = o.Field
	if !IsNil(o.ShowWhenMatchingConditions) {
		toSerialize["show_when_matching_conditions"] = o.ShowWhenMatchingConditions
	}
	if !IsNil(o.ConditionType) {
		toSerialize["condition_type"] = o.ConditionType
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullablePublicFormViewFieldOptions struct {
	value *PublicFormViewFieldOptions
	isSet bool
}

func (v NullablePublicFormViewFieldOptions) Get() *PublicFormViewFieldOptions {
	return v.value
}

func (v *NullablePublicFormViewFieldOptions) Set(val *PublicFormViewFieldOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFormViewFieldOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFormViewFieldOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFormViewFieldOptions(val *PublicFormViewFieldOptions) *NullablePublicFormViewFieldOptions {
	return &NullablePublicFormViewFieldOptions{value: val, isSet: true}
}

func (v NullablePublicFormViewFieldOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFormViewFieldOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


