/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Template type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Template{}

// Template struct for Template
type Template struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	// The font awesome class name that can be used for displaying purposes.
	Icon string `json:"icon"`
	// Keywords related to the template that can be used for search.
	Keywords *string `json:"keywords,omitempty"`
	GroupId string `json:"group_id"`
	// The group containing the applications related to the template. The read endpoints related to that group are publicly accessible for preview purposes.
	WorkspaceId NullableInt32 `json:"workspace_id"`
	// Indicates if the template must be selected by default. The web-frontend automatically selects the first `is_default` template that it can find.
	IsDefault string `json:"is_default"`
}

// NewTemplate instantiates a new Template object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplate(id int32, name string, icon string, groupId string, workspaceId NullableInt32, isDefault string) *Template {
	this := Template{}
	this.Id = id
	this.Name = name
	this.Icon = icon
	this.GroupId = groupId
	this.WorkspaceId = workspaceId
	this.IsDefault = isDefault
	return &this
}

// NewTemplateWithDefaults instantiates a new Template object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateWithDefaults() *Template {
	this := Template{}
	return &this
}

// GetId returns the Id field value
func (o *Template) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Template) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Template) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Template) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Template) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Template) SetName(v string) {
	o.Name = v
}

// GetIcon returns the Icon field value
func (o *Template) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *Template) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *Template) SetIcon(v string) {
	o.Icon = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *Template) GetKeywords() string {
	if o == nil || IsNil(o.Keywords) {
		var ret string
		return ret
	}
	return *o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Template) GetKeywordsOk() (*string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *Template) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given string and assigns it to the Keywords field.
func (o *Template) SetKeywords(v string) {
	o.Keywords = &v
}

// GetGroupId returns the GroupId field value
func (o *Template) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *Template) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *Template) SetGroupId(v string) {
	o.GroupId = v
}

// GetWorkspaceId returns the WorkspaceId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Template) GetWorkspaceId() int32 {
	if o == nil || o.WorkspaceId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.WorkspaceId.Get()
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetWorkspaceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkspaceId.Get(), o.WorkspaceId.IsSet()
}

// SetWorkspaceId sets field value
func (o *Template) SetWorkspaceId(v int32) {
	o.WorkspaceId.Set(&v)
}

// GetIsDefault returns the IsDefault field value
func (o *Template) GetIsDefault() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *Template) GetIsDefaultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *Template) SetIsDefault(v string) {
	o.IsDefault = v
}

func (o Template) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Template) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["icon"] = o.Icon
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	// skip: group_id is readOnly
	toSerialize["workspace_id"] = o.WorkspaceId.Get()
	// skip: is_default is readOnly
	return toSerialize, nil
}

type NullableTemplate struct {
	value *Template
	isSet bool
}

func (v NullableTemplate) Get() *Template {
	return v.value
}

func (v *NullableTemplate) Set(val *Template) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplate(val *Template) *NullableTemplate {
	return &NullableTemplate{value: val, isSet: true}
}

func (v NullableTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


