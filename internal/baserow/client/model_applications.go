/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Applications - struct for Applications
type Applications struct {
	DatabaseApplication *DatabaseApplication
}

// DatabaseApplicationAsApplications is a convenience function that returns DatabaseApplication wrapped in Applications
func DatabaseApplicationAsApplications(v *DatabaseApplication) Applications {
	return Applications{
		DatabaseApplication: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Applications) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DatabaseApplication
	err = newStrictDecoder(data).Decode(&dst.DatabaseApplication)
	if err == nil {
		jsonDatabaseApplication, _ := json.Marshal(dst.DatabaseApplication)
		if string(jsonDatabaseApplication) == "{}" { // empty struct
			dst.DatabaseApplication = nil
		} else {
			match++
		}
	} else {
		dst.DatabaseApplication = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DatabaseApplication = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Applications)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Applications)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Applications) MarshalJSON() ([]byte, error) {
	if src.DatabaseApplication != nil {
		return json.Marshal(&src.DatabaseApplication)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Applications) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DatabaseApplication != nil {
		return obj.DatabaseApplication
	}

	// all schemas are nil
	return nil
}

type NullableApplications struct {
	value *Applications
	isSet bool
}

func (v NullableApplications) Get() *Applications {
	return v.value
}

func (v *NullableApplications) Set(val *Applications) {
	v.value = val
	v.isSet = true
}

func (v NullableApplications) IsSet() bool {
	return v.isSet
}

func (v *NullableApplications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplications(val *Applications) *NullableApplications {
	return &NullableApplications{value: val, isSet: true}
}

func (v NullableApplications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


