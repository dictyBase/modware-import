/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TypeFc4Enum * `left_border_color` - left_border_color * `background_color` - background_color
type TypeFc4Enum string

// List of TypeFc4Enum
const (
	LEFT_BORDER_COLOR TypeFc4Enum = "left_border_color"
	BACKGROUND_COLOR TypeFc4Enum = "background_color"
)

// All allowed values of TypeFc4Enum enum
var AllowedTypeFc4EnumEnumValues = []TypeFc4Enum{
	"left_border_color",
	"background_color",
}

func (v *TypeFc4Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypeFc4Enum(value)
	for _, existing := range AllowedTypeFc4EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypeFc4Enum", value)
}

// NewTypeFc4EnumFromValue returns a pointer to a valid TypeFc4Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypeFc4EnumFromValue(v string) (*TypeFc4Enum, error) {
	ev := TypeFc4Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypeFc4Enum: valid values are %v", v, AllowedTypeFc4EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypeFc4Enum) IsValid() bool {
	for _, existing := range AllowedTypeFc4EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeFc4Enum value
func (v TypeFc4Enum) Ptr() *TypeFc4Enum {
	return &v
}

type NullableTypeFc4Enum struct {
	value *TypeFc4Enum
	isSet bool
}

func (v NullableTypeFc4Enum) Get() *TypeFc4Enum {
	return v.value
}

func (v *NullableTypeFc4Enum) Set(val *TypeFc4Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeFc4Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeFc4Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeFc4Enum(val *TypeFc4Enum) *NullableTypeFc4Enum {
	return &NullableTypeFc4Enum{value: val, isSet: true}
}

func (v NullableTypeFc4Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeFc4Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

