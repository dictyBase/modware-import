/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PatchedTokenUpdatePermissionsCreate struct for PatchedTokenUpdatePermissionsCreate
type PatchedTokenUpdatePermissionsCreate struct {
	PatchedTokenUpdatePermissionsCreateAnyOfInnerInner *[][]PatchedTokenUpdatePermissionsCreateAnyOfInnerInner
	bool *bool
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PatchedTokenUpdatePermissionsCreate) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into [][]PatchedTokenUpdatePermissionsCreateAnyOfInnerInner
	err = json.Unmarshal(data, &dst.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner);
	if err == nil {
		PatchedTokenUpdatePermissionsCreateAnyOfInnerInner, _ := json.Marshal(dst.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner)
		if string(PatchedTokenUpdatePermissionsCreateAnyOfInnerInner) == "{}" { // empty struct
			dst.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner = nil
		} else {
			return nil // data stored in dst.[][]PatchedTokenUpdatePermissionsCreateAnyOfInnerInner, return on the first match
		}
	} else {
		dst.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner = nil
	}

	// try to unmarshal JSON data into bool
	err = json.Unmarshal(data, &dst.bool);
	if err == nil {
		jsonbool, _ := json.Marshal(dst.bool)
		if string(jsonbool) == "{}" { // empty struct
			dst.bool = nil
		} else {
			return nil // data stored in dst.bool, return on the first match
		}
	} else {
		dst.bool = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PatchedTokenUpdatePermissionsCreate)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PatchedTokenUpdatePermissionsCreate) MarshalJSON() ([]byte, error) {
	if src.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner != nil {
		return json.Marshal(&src.PatchedTokenUpdatePermissionsCreateAnyOfInnerInner)
	}

	if src.bool != nil {
		return json.Marshal(&src.bool)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePatchedTokenUpdatePermissionsCreate struct {
	value *PatchedTokenUpdatePermissionsCreate
	isSet bool
}

func (v NullablePatchedTokenUpdatePermissionsCreate) Get() *PatchedTokenUpdatePermissionsCreate {
	return v.value
}

func (v *NullablePatchedTokenUpdatePermissionsCreate) Set(val *PatchedTokenUpdatePermissionsCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTokenUpdatePermissionsCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTokenUpdatePermissionsCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTokenUpdatePermissionsCreate(val *PatchedTokenUpdatePermissionsCreate) *NullablePatchedTokenUpdatePermissionsCreate {
	return &NullablePatchedTokenUpdatePermissionsCreate{value: val, isSet: true}
}

func (v NullablePatchedTokenUpdatePermissionsCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTokenUpdatePermissionsCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


