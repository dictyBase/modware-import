/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GalleryViewUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GalleryViewUpdate{}

// GalleryViewUpdate struct for GalleryViewUpdate
type GalleryViewUpdate struct {
	Name *string `json:"name,omitempty"`
	FilterType *ConditionTypeEnum `json:"filter_type,omitempty"`
	// Allows users to see results unfiltered while still keeping the filters saved for the view.
	FiltersDisabled *bool `json:"filters_disabled,omitempty"`
	// The password required to access the public view URL.
	PublicViewPassword *string `json:"public_view_password,omitempty"`
	// References a file field of which the first image must be shown as card cover image.
	CardCoverImageField NullableInt32 `json:"card_cover_image_field,omitempty"`
	// Indicates whether the view is publicly accessible to visitors.
	Public *bool `json:"public,omitempty"`
	// The unique slug that can be used to construct a public URL.
	Slug string `json:"slug"`
}

// NewGalleryViewUpdate instantiates a new GalleryViewUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGalleryViewUpdate(slug string) *GalleryViewUpdate {
	this := GalleryViewUpdate{}
	this.Slug = slug
	return &this
}

// NewGalleryViewUpdateWithDefaults instantiates a new GalleryViewUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGalleryViewUpdateWithDefaults() *GalleryViewUpdate {
	this := GalleryViewUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GalleryViewUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GalleryViewUpdate) SetName(v string) {
	o.Name = &v
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *GalleryViewUpdate) GetFilterType() ConditionTypeEnum {
	if o == nil || IsNil(o.FilterType) {
		var ret ConditionTypeEnum
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetFilterTypeOk() (*ConditionTypeEnum, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given ConditionTypeEnum and assigns it to the FilterType field.
func (o *GalleryViewUpdate) SetFilterType(v ConditionTypeEnum) {
	o.FilterType = &v
}

// GetFiltersDisabled returns the FiltersDisabled field value if set, zero value otherwise.
func (o *GalleryViewUpdate) GetFiltersDisabled() bool {
	if o == nil || IsNil(o.FiltersDisabled) {
		var ret bool
		return ret
	}
	return *o.FiltersDisabled
}

// GetFiltersDisabledOk returns a tuple with the FiltersDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetFiltersDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FiltersDisabled) {
		return nil, false
	}
	return o.FiltersDisabled, true
}

// HasFiltersDisabled returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasFiltersDisabled() bool {
	if o != nil && !IsNil(o.FiltersDisabled) {
		return true
	}

	return false
}

// SetFiltersDisabled gets a reference to the given bool and assigns it to the FiltersDisabled field.
func (o *GalleryViewUpdate) SetFiltersDisabled(v bool) {
	o.FiltersDisabled = &v
}

// GetPublicViewPassword returns the PublicViewPassword field value if set, zero value otherwise.
func (o *GalleryViewUpdate) GetPublicViewPassword() string {
	if o == nil || IsNil(o.PublicViewPassword) {
		var ret string
		return ret
	}
	return *o.PublicViewPassword
}

// GetPublicViewPasswordOk returns a tuple with the PublicViewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetPublicViewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PublicViewPassword) {
		return nil, false
	}
	return o.PublicViewPassword, true
}

// HasPublicViewPassword returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasPublicViewPassword() bool {
	if o != nil && !IsNil(o.PublicViewPassword) {
		return true
	}

	return false
}

// SetPublicViewPassword gets a reference to the given string and assigns it to the PublicViewPassword field.
func (o *GalleryViewUpdate) SetPublicViewPassword(v string) {
	o.PublicViewPassword = &v
}

// GetCardCoverImageField returns the CardCoverImageField field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GalleryViewUpdate) GetCardCoverImageField() int32 {
	if o == nil || IsNil(o.CardCoverImageField.Get()) {
		var ret int32
		return ret
	}
	return *o.CardCoverImageField.Get()
}

// GetCardCoverImageFieldOk returns a tuple with the CardCoverImageField field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GalleryViewUpdate) GetCardCoverImageFieldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardCoverImageField.Get(), o.CardCoverImageField.IsSet()
}

// HasCardCoverImageField returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasCardCoverImageField() bool {
	if o != nil && o.CardCoverImageField.IsSet() {
		return true
	}

	return false
}

// SetCardCoverImageField gets a reference to the given NullableInt32 and assigns it to the CardCoverImageField field.
func (o *GalleryViewUpdate) SetCardCoverImageField(v int32) {
	o.CardCoverImageField.Set(&v)
}
// SetCardCoverImageFieldNil sets the value for CardCoverImageField to be an explicit nil
func (o *GalleryViewUpdate) SetCardCoverImageFieldNil() {
	o.CardCoverImageField.Set(nil)
}

// UnsetCardCoverImageField ensures that no value is present for CardCoverImageField, not even an explicit nil
func (o *GalleryViewUpdate) UnsetCardCoverImageField() {
	o.CardCoverImageField.Unset()
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *GalleryViewUpdate) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *GalleryViewUpdate) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *GalleryViewUpdate) SetPublic(v bool) {
	o.Public = &v
}

// GetSlug returns the Slug field value
func (o *GalleryViewUpdate) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *GalleryViewUpdate) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *GalleryViewUpdate) SetSlug(v string) {
	o.Slug = v
}

func (o GalleryViewUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GalleryViewUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FilterType) {
		toSerialize["filter_type"] = o.FilterType
	}
	if !IsNil(o.FiltersDisabled) {
		toSerialize["filters_disabled"] = o.FiltersDisabled
	}
	if !IsNil(o.PublicViewPassword) {
		toSerialize["public_view_password"] = o.PublicViewPassword
	}
	if o.CardCoverImageField.IsSet() {
		toSerialize["card_cover_image_field"] = o.CardCoverImageField.Get()
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	// skip: slug is readOnly
	return toSerialize, nil
}

type NullableGalleryViewUpdate struct {
	value *GalleryViewUpdate
	isSet bool
}

func (v NullableGalleryViewUpdate) Get() *GalleryViewUpdate {
	return v.value
}

func (v *NullableGalleryViewUpdate) Set(val *GalleryViewUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGalleryViewUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGalleryViewUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGalleryViewUpdate(val *GalleryViewUpdate) *NullableGalleryViewUpdate {
	return &NullableGalleryViewUpdate{value: val, isSet: true}
}

func (v NullableGalleryViewUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGalleryViewUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


