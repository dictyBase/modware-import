/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CountFieldCreateFieldDateTimeFormat - 24 (14:30) or 12 (02:30 PM)  * `24` - 24 hour * `12` - 12 hour
type CountFieldCreateFieldDateTimeFormat struct {
	DateTimeFormatEnum *DateTimeFormatEnum
	NullEnum *NullEnum
}

// DateTimeFormatEnumAsCountFieldCreateFieldDateTimeFormat is a convenience function that returns DateTimeFormatEnum wrapped in CountFieldCreateFieldDateTimeFormat
func DateTimeFormatEnumAsCountFieldCreateFieldDateTimeFormat(v *DateTimeFormatEnum) CountFieldCreateFieldDateTimeFormat {
	return CountFieldCreateFieldDateTimeFormat{
		DateTimeFormatEnum: v,
	}
}

// NullEnumAsCountFieldCreateFieldDateTimeFormat is a convenience function that returns NullEnum wrapped in CountFieldCreateFieldDateTimeFormat
func NullEnumAsCountFieldCreateFieldDateTimeFormat(v *NullEnum) CountFieldCreateFieldDateTimeFormat {
	return CountFieldCreateFieldDateTimeFormat{
		NullEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CountFieldCreateFieldDateTimeFormat) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into DateTimeFormatEnum
	err = newStrictDecoder(data).Decode(&dst.DateTimeFormatEnum)
	if err == nil {
		jsonDateTimeFormatEnum, _ := json.Marshal(dst.DateTimeFormatEnum)
		if string(jsonDateTimeFormatEnum) == "{}" { // empty struct
			dst.DateTimeFormatEnum = nil
		} else {
			match++
		}
	} else {
		dst.DateTimeFormatEnum = nil
	}

	// try to unmarshal data into NullEnum
	err = newStrictDecoder(data).Decode(&dst.NullEnum)
	if err == nil {
		jsonNullEnum, _ := json.Marshal(dst.NullEnum)
		if string(jsonNullEnum) == "{}" { // empty struct
			dst.NullEnum = nil
		} else {
			match++
		}
	} else {
		dst.NullEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DateTimeFormatEnum = nil
		dst.NullEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CountFieldCreateFieldDateTimeFormat)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CountFieldCreateFieldDateTimeFormat)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CountFieldCreateFieldDateTimeFormat) MarshalJSON() ([]byte, error) {
	if src.DateTimeFormatEnum != nil {
		return json.Marshal(&src.DateTimeFormatEnum)
	}

	if src.NullEnum != nil {
		return json.Marshal(&src.NullEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CountFieldCreateFieldDateTimeFormat) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DateTimeFormatEnum != nil {
		return obj.DateTimeFormatEnum
	}

	if obj.NullEnum != nil {
		return obj.NullEnum
	}

	// all schemas are nil
	return nil
}

type NullableCountFieldCreateFieldDateTimeFormat struct {
	value *CountFieldCreateFieldDateTimeFormat
	isSet bool
}

func (v NullableCountFieldCreateFieldDateTimeFormat) Get() *CountFieldCreateFieldDateTimeFormat {
	return v.value
}

func (v *NullableCountFieldCreateFieldDateTimeFormat) Set(val *CountFieldCreateFieldDateTimeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCountFieldCreateFieldDateTimeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCountFieldCreateFieldDateTimeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountFieldCreateFieldDateTimeFormat(val *CountFieldCreateFieldDateTimeFormat) *NullableCountFieldCreateFieldDateTimeFormat {
	return &NullableCountFieldCreateFieldDateTimeFormat{value: val, isSet: true}
}

func (v NullableCountFieldCreateFieldDateTimeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountFieldCreateFieldDateTimeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


