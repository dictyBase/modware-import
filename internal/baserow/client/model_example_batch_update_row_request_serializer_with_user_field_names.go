/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ExampleBatchUpdateRowRequestSerializerWithUserFieldNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExampleBatchUpdateRowRequestSerializerWithUserFieldNames{}

// ExampleBatchUpdateRowRequestSerializerWithUserFieldNames struct for ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
type ExampleBatchUpdateRowRequestSerializerWithUserFieldNames struct {
	// The unique identifier of the row in the table.
	Id int32 `json:"id"`
	// This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field1 NullableString `json:"field_1,omitempty"`
	// This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field2 NullableString `json:"field_2,omitempty"`
	// This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field3 NullableString `json:"field_3,omitempty"`
	// This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field4 NullableString `json:"field_4,omitempty"`
	// This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field5 NullableFloat64 `json:"field_5,omitempty"`
	// This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field6 *int32 `json:"field_6,omitempty"`
	// This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field7 *bool `json:"field_7,omitempty"`
	// This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field8 NullableString `json:"field_8,omitempty"`
	// This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids or the names of the related rows. In case of names, if the name is not found, this name is ignored. A name is the value of the primary key of the related row.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.
	Field11 []*int32 `json:"field_11,omitempty"`
	// This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.
	Field12 []FileFieldRequest `json:"field_12,omitempty"`
	// This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.
	Field13 NullableInt32 `json:"field_13,omitempty"`
	// This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.
	Field14 []*int32 `json:"field_14,omitempty"`
	// This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
	Field15 NullableString `json:"field_15,omitempty"`
	// This field represents the `multiple_collaborators` field. The number in field_20 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of objects representing the chosen collaborators through the object's `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id.
	Field20 []Collaborator `json:"field_20,omitempty"`
}

// NewExampleBatchUpdateRowRequestSerializerWithUserFieldNames instantiates a new ExampleBatchUpdateRowRequestSerializerWithUserFieldNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExampleBatchUpdateRowRequestSerializerWithUserFieldNames(id int32) *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames {
	this := ExampleBatchUpdateRowRequestSerializerWithUserFieldNames{}
	this.Id = id
	var field6 int32 = 0
	this.Field6 = &field6
	var field7 bool = false
	this.Field7 = &field7
	return &this
}

// NewExampleBatchUpdateRowRequestSerializerWithUserFieldNamesWithDefaults instantiates a new ExampleBatchUpdateRowRequestSerializerWithUserFieldNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExampleBatchUpdateRowRequestSerializerWithUserFieldNamesWithDefaults() *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames {
	this := ExampleBatchUpdateRowRequestSerializerWithUserFieldNames{}
	var field6 int32 = 0
	this.Field6 = &field6
	var field7 bool = false
	this.Field7 = &field7
	return &this
}

// GetId returns the Id field value
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetId(v int32) {
	o.Id = v
}

// GetField1 returns the Field1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField1() string {
	if o == nil || IsNil(o.Field1.Get()) {
		var ret string
		return ret
	}
	return *o.Field1.Get()
}

// GetField1Ok returns a tuple with the Field1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field1.Get(), o.Field1.IsSet()
}

// HasField1 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField1() bool {
	if o != nil && o.Field1.IsSet() {
		return true
	}

	return false
}

// SetField1 gets a reference to the given NullableString and assigns it to the Field1 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField1(v string) {
	o.Field1.Set(&v)
}
// SetField1Nil sets the value for Field1 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField1Nil() {
	o.Field1.Set(nil)
}

// UnsetField1 ensures that no value is present for Field1, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField1() {
	o.Field1.Unset()
}

// GetField2 returns the Field2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField2() string {
	if o == nil || IsNil(o.Field2.Get()) {
		var ret string
		return ret
	}
	return *o.Field2.Get()
}

// GetField2Ok returns a tuple with the Field2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field2.Get(), o.Field2.IsSet()
}

// HasField2 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField2() bool {
	if o != nil && o.Field2.IsSet() {
		return true
	}

	return false
}

// SetField2 gets a reference to the given NullableString and assigns it to the Field2 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField2(v string) {
	o.Field2.Set(&v)
}
// SetField2Nil sets the value for Field2 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField2Nil() {
	o.Field2.Set(nil)
}

// UnsetField2 ensures that no value is present for Field2, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField2() {
	o.Field2.Unset()
}

// GetField3 returns the Field3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField3() string {
	if o == nil || IsNil(o.Field3.Get()) {
		var ret string
		return ret
	}
	return *o.Field3.Get()
}

// GetField3Ok returns a tuple with the Field3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field3.Get(), o.Field3.IsSet()
}

// HasField3 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField3() bool {
	if o != nil && o.Field3.IsSet() {
		return true
	}

	return false
}

// SetField3 gets a reference to the given NullableString and assigns it to the Field3 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField3(v string) {
	o.Field3.Set(&v)
}
// SetField3Nil sets the value for Field3 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField3Nil() {
	o.Field3.Set(nil)
}

// UnsetField3 ensures that no value is present for Field3, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField3() {
	o.Field3.Unset()
}

// GetField4 returns the Field4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField4() string {
	if o == nil || IsNil(o.Field4.Get()) {
		var ret string
		return ret
	}
	return *o.Field4.Get()
}

// GetField4Ok returns a tuple with the Field4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field4.Get(), o.Field4.IsSet()
}

// HasField4 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField4() bool {
	if o != nil && o.Field4.IsSet() {
		return true
	}

	return false
}

// SetField4 gets a reference to the given NullableString and assigns it to the Field4 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField4(v string) {
	o.Field4.Set(&v)
}
// SetField4Nil sets the value for Field4 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField4Nil() {
	o.Field4.Set(nil)
}

// UnsetField4 ensures that no value is present for Field4, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField4() {
	o.Field4.Unset()
}

// GetField5 returns the Field5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField5() float64 {
	if o == nil || IsNil(o.Field5.Get()) {
		var ret float64
		return ret
	}
	return *o.Field5.Get()
}

// GetField5Ok returns a tuple with the Field5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField5Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field5.Get(), o.Field5.IsSet()
}

// HasField5 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField5() bool {
	if o != nil && o.Field5.IsSet() {
		return true
	}

	return false
}

// SetField5 gets a reference to the given NullableFloat64 and assigns it to the Field5 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField5(v float64) {
	o.Field5.Set(&v)
}
// SetField5Nil sets the value for Field5 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField5Nil() {
	o.Field5.Set(nil)
}

// UnsetField5 ensures that no value is present for Field5, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField5() {
	o.Field5.Unset()
}

// GetField6 returns the Field6 field value if set, zero value otherwise.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField6() int32 {
	if o == nil || IsNil(o.Field6) {
		var ret int32
		return ret
	}
	return *o.Field6
}

// GetField6Ok returns a tuple with the Field6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField6Ok() (*int32, bool) {
	if o == nil || IsNil(o.Field6) {
		return nil, false
	}
	return o.Field6, true
}

// HasField6 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField6() bool {
	if o != nil && !IsNil(o.Field6) {
		return true
	}

	return false
}

// SetField6 gets a reference to the given int32 and assigns it to the Field6 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField6(v int32) {
	o.Field6 = &v
}

// GetField7 returns the Field7 field value if set, zero value otherwise.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField7() bool {
	if o == nil || IsNil(o.Field7) {
		var ret bool
		return ret
	}
	return *o.Field7
}

// GetField7Ok returns a tuple with the Field7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField7Ok() (*bool, bool) {
	if o == nil || IsNil(o.Field7) {
		return nil, false
	}
	return o.Field7, true
}

// HasField7 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField7() bool {
	if o != nil && !IsNil(o.Field7) {
		return true
	}

	return false
}

// SetField7 gets a reference to the given bool and assigns it to the Field7 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField7(v bool) {
	o.Field7 = &v
}

// GetField8 returns the Field8 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField8() string {
	if o == nil || IsNil(o.Field8.Get()) {
		var ret string
		return ret
	}
	return *o.Field8.Get()
}

// GetField8Ok returns a tuple with the Field8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField8Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field8.Get(), o.Field8.IsSet()
}

// HasField8 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField8() bool {
	if o != nil && o.Field8.IsSet() {
		return true
	}

	return false
}

// SetField8 gets a reference to the given NullableString and assigns it to the Field8 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField8(v string) {
	o.Field8.Set(&v)
}
// SetField8Nil sets the value for Field8 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField8Nil() {
	o.Field8.Set(nil)
}

// UnsetField8 ensures that no value is present for Field8, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField8() {
	o.Field8.Unset()
}

// GetField11 returns the Field11 field value if set, zero value otherwise.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField11() []*int32 {
	if o == nil || IsNil(o.Field11) {
		var ret []*int32
		return ret
	}
	return o.Field11
}

// GetField11Ok returns a tuple with the Field11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField11Ok() ([]*int32, bool) {
	if o == nil || IsNil(o.Field11) {
		return nil, false
	}
	return o.Field11, true
}

// HasField11 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField11() bool {
	if o != nil && !IsNil(o.Field11) {
		return true
	}

	return false
}

// SetField11 gets a reference to the given []*int32 and assigns it to the Field11 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField11(v []*int32) {
	o.Field11 = v
}

// GetField12 returns the Field12 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField12() []FileFieldRequest {
	if o == nil {
		var ret []FileFieldRequest
		return ret
	}
	return o.Field12
}

// GetField12Ok returns a tuple with the Field12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField12Ok() ([]FileFieldRequest, bool) {
	if o == nil || IsNil(o.Field12) {
		return nil, false
	}
	return o.Field12, true
}

// HasField12 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField12() bool {
	if o != nil && IsNil(o.Field12) {
		return true
	}

	return false
}

// SetField12 gets a reference to the given []FileFieldRequest and assigns it to the Field12 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField12(v []FileFieldRequest) {
	o.Field12 = v
}

// GetField13 returns the Field13 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField13() int32 {
	if o == nil || IsNil(o.Field13.Get()) {
		var ret int32
		return ret
	}
	return *o.Field13.Get()
}

// GetField13Ok returns a tuple with the Field13 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField13Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field13.Get(), o.Field13.IsSet()
}

// HasField13 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField13() bool {
	if o != nil && o.Field13.IsSet() {
		return true
	}

	return false
}

// SetField13 gets a reference to the given NullableInt32 and assigns it to the Field13 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField13(v int32) {
	o.Field13.Set(&v)
}
// SetField13Nil sets the value for Field13 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField13Nil() {
	o.Field13.Set(nil)
}

// UnsetField13 ensures that no value is present for Field13, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField13() {
	o.Field13.Unset()
}

// GetField14 returns the Field14 field value if set, zero value otherwise.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField14() []*int32 {
	if o == nil || IsNil(o.Field14) {
		var ret []*int32
		return ret
	}
	return o.Field14
}

// GetField14Ok returns a tuple with the Field14 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField14Ok() ([]*int32, bool) {
	if o == nil || IsNil(o.Field14) {
		return nil, false
	}
	return o.Field14, true
}

// HasField14 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField14() bool {
	if o != nil && !IsNil(o.Field14) {
		return true
	}

	return false
}

// SetField14 gets a reference to the given []*int32 and assigns it to the Field14 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField14(v []*int32) {
	o.Field14 = v
}

// GetField15 returns the Field15 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField15() string {
	if o == nil || IsNil(o.Field15.Get()) {
		var ret string
		return ret
	}
	return *o.Field15.Get()
}

// GetField15Ok returns a tuple with the Field15 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField15Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field15.Get(), o.Field15.IsSet()
}

// HasField15 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField15() bool {
	if o != nil && o.Field15.IsSet() {
		return true
	}

	return false
}

// SetField15 gets a reference to the given NullableString and assigns it to the Field15 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField15(v string) {
	o.Field15.Set(&v)
}
// SetField15Nil sets the value for Field15 to be an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField15Nil() {
	o.Field15.Set(nil)
}

// UnsetField15 ensures that no value is present for Field15, not even an explicit nil
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnsetField15() {
	o.Field15.Unset()
}

// GetField20 returns the Field20 field value if set, zero value otherwise.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField20() []Collaborator {
	if o == nil || IsNil(o.Field20) {
		var ret []Collaborator
		return ret
	}
	return o.Field20
}

// GetField20Ok returns a tuple with the Field20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) GetField20Ok() ([]Collaborator, bool) {
	if o == nil || IsNil(o.Field20) {
		return nil, false
	}
	return o.Field20, true
}

// HasField20 returns a boolean if a field has been set.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) HasField20() bool {
	if o != nil && !IsNil(o.Field20) {
		return true
	}

	return false
}

// SetField20 gets a reference to the given []Collaborator and assigns it to the Field20 field.
func (o *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) SetField20(v []Collaborator) {
	o.Field20 = v
}

func (o ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Field1.IsSet() {
		toSerialize["field_1"] = o.Field1.Get()
	}
	if o.Field2.IsSet() {
		toSerialize["field_2"] = o.Field2.Get()
	}
	if o.Field3.IsSet() {
		toSerialize["field_3"] = o.Field3.Get()
	}
	if o.Field4.IsSet() {
		toSerialize["field_4"] = o.Field4.Get()
	}
	if o.Field5.IsSet() {
		toSerialize["field_5"] = o.Field5.Get()
	}
	if !IsNil(o.Field6) {
		toSerialize["field_6"] = o.Field6
	}
	if !IsNil(o.Field7) {
		toSerialize["field_7"] = o.Field7
	}
	if o.Field8.IsSet() {
		toSerialize["field_8"] = o.Field8.Get()
	}
	if !IsNil(o.Field11) {
		toSerialize["field_11"] = o.Field11
	}
	if o.Field12 != nil {
		toSerialize["field_12"] = o.Field12
	}
	if o.Field13.IsSet() {
		toSerialize["field_13"] = o.Field13.Get()
	}
	if !IsNil(o.Field14) {
		toSerialize["field_14"] = o.Field14
	}
	if o.Field15.IsSet() {
		toSerialize["field_15"] = o.Field15.Get()
	}
	if !IsNil(o.Field20) {
		toSerialize["field_20"] = o.Field20
	}
	return toSerialize, nil
}

type NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames struct {
	value *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames
	isSet bool
}

func (v NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) Get() *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames {
	return v.value
}

func (v *NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) Set(val *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) {
	v.value = val
	v.isSet = true
}

func (v NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) IsSet() bool {
	return v.isSet
}

func (v *NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames(val *ExampleBatchUpdateRowRequestSerializerWithUserFieldNames) *NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames {
	return &NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames{value: val, isSet: true}
}

func (v NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExampleBatchUpdateRowRequestSerializerWithUserFieldNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


