/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the KanbanViewFieldOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KanbanViewFieldOptions{}

// KanbanViewFieldOptions struct for KanbanViewFieldOptions
type KanbanViewFieldOptions struct {
	// An object containing the field id as key and the properties related to view as value.
	FieldOptions map[string]KanbanViewFieldOptions `json:"field_options"`
}

// NewKanbanViewFieldOptions instantiates a new KanbanViewFieldOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKanbanViewFieldOptions(fieldOptions map[string]KanbanViewFieldOptions) *KanbanViewFieldOptions {
	this := KanbanViewFieldOptions{}
	this.FieldOptions = fieldOptions
	return &this
}

// NewKanbanViewFieldOptionsWithDefaults instantiates a new KanbanViewFieldOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKanbanViewFieldOptionsWithDefaults() *KanbanViewFieldOptions {
	this := KanbanViewFieldOptions{}
	return &this
}

// GetFieldOptions returns the FieldOptions field value
func (o *KanbanViewFieldOptions) GetFieldOptions() map[string]KanbanViewFieldOptions {
	if o == nil {
		var ret map[string]KanbanViewFieldOptions
		return ret
	}

	return o.FieldOptions
}

// GetFieldOptionsOk returns a tuple with the FieldOptions field value
// and a boolean to check if the value has been set.
func (o *KanbanViewFieldOptions) GetFieldOptionsOk() (*map[string]KanbanViewFieldOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldOptions, true
}

// SetFieldOptions sets field value
func (o *KanbanViewFieldOptions) SetFieldOptions(v map[string]KanbanViewFieldOptions) {
	o.FieldOptions = v
}

func (o KanbanViewFieldOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KanbanViewFieldOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field_options"] = o.FieldOptions
	return toSerialize, nil
}

type NullableKanbanViewFieldOptions struct {
	value *KanbanViewFieldOptions
	isSet bool
}

func (v NullableKanbanViewFieldOptions) Get() *KanbanViewFieldOptions {
	return v.value
}

func (v *NullableKanbanViewFieldOptions) Set(val *KanbanViewFieldOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableKanbanViewFieldOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableKanbanViewFieldOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKanbanViewFieldOptions(val *KanbanViewFieldOptions) *NullableKanbanViewFieldOptions {
	return &NullableKanbanViewFieldOptions{value: val, isSet: true}
}

func (v NullableKanbanViewFieldOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKanbanViewFieldOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


