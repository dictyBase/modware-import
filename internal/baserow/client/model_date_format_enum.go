/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DateFormatEnum * `EU` - European (D/M/Y) * `US` - US (M/D/Y) * `ISO` - ISO (Y-M-D)
type DateFormatEnum string

// List of DateFormatEnum
const (
	EU DateFormatEnum = "EU"
	US DateFormatEnum = "US"
	ISO DateFormatEnum = "ISO"
)

// All allowed values of DateFormatEnum enum
var AllowedDateFormatEnumEnumValues = []DateFormatEnum{
	"EU",
	"US",
	"ISO",
}

func (v *DateFormatEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DateFormatEnum(value)
	for _, existing := range AllowedDateFormatEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DateFormatEnum", value)
}

// NewDateFormatEnumFromValue returns a pointer to a valid DateFormatEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDateFormatEnumFromValue(v string) (*DateFormatEnum, error) {
	ev := DateFormatEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DateFormatEnum: valid values are %v", v, AllowedDateFormatEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DateFormatEnum) IsValid() bool {
	for _, existing := range AllowedDateFormatEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DateFormatEnum value
func (v DateFormatEnum) Ptr() *DateFormatEnum {
	return &v
}

type NullableDateFormatEnum struct {
	value *DateFormatEnum
	isSet bool
}

func (v NullableDateFormatEnum) Get() *DateFormatEnum {
	return v.value
}

func (v *NullableDateFormatEnum) Set(val *DateFormatEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDateFormatEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDateFormatEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateFormatEnum(val *DateFormatEnum) *NullableDateFormatEnum {
	return &NullableDateFormatEnum{value: val, isSet: true}
}

func (v NullableDateFormatEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateFormatEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

