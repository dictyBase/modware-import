/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Type4afEnum * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_snapshot` - create_snapshot * `restore_snapshot` - restore_snapshot * `airtable` - airtable * `file_import` - file_import * `duplicate_table` - duplicate_table * `duplicate_field` - duplicate_field * `audit_log_export` - audit_log_export
type Type4afEnum string

// List of Type4afEnum
const (
	AIRTABLE Type4afEnum = "airtable"
	FILE_IMPORT Type4afEnum = "file_import"
	AUDIT_LOG_EXPORT Type4afEnum = "audit_log_export"
)

// All allowed values of Type4afEnum enum
var AllowedType4afEnumEnumValues = []Type4afEnum{
	"duplicate_application",
	"install_template",
	"create_snapshot",
	"restore_snapshot",
	"airtable",
	"file_import",
	"duplicate_table",
	"duplicate_field",
	"audit_log_export",
}

func (v *Type4afEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Type4afEnum(value)
	for _, existing := range AllowedType4afEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Type4afEnum", value)
}

// NewType4afEnumFromValue returns a pointer to a valid Type4afEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewType4afEnumFromValue(v string) (*Type4afEnum, error) {
	ev := Type4afEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Type4afEnum: valid values are %v", v, AllowedType4afEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Type4afEnum) IsValid() bool {
	for _, existing := range AllowedType4afEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Type4afEnum value
func (v Type4afEnum) Ptr() *Type4afEnum {
	return &v
}

type NullableType4afEnum struct {
	value *Type4afEnum
	isSet bool
}

func (v NullableType4afEnum) Get() *Type4afEnum {
	return v.value
}

func (v *NullableType4afEnum) Set(val *Type4afEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableType4afEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableType4afEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType4afEnum(val *Type4afEnum) *NullableType4afEnum {
	return &NullableType4afEnum{value: val, isSet: true}
}

func (v NullableType4afEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType4afEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

