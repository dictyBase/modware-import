/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TokenObtainPairWithUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenObtainPairWithUser{}

// TokenObtainPairWithUser struct for TokenObtainPairWithUser
type TokenObtainPairWithUser struct {
	Email *string `json:"email,omitempty"`
	// Deprecated. Use `email` instead.
	// Deprecated
	Username *string `json:"username,omitempty"`
	Password string `json:"password"`
}

// NewTokenObtainPairWithUser instantiates a new TokenObtainPairWithUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenObtainPairWithUser(password string) *TokenObtainPairWithUser {
	this := TokenObtainPairWithUser{}
	this.Password = password
	return &this
}

// NewTokenObtainPairWithUserWithDefaults instantiates a new TokenObtainPairWithUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenObtainPairWithUserWithDefaults() *TokenObtainPairWithUser {
	this := TokenObtainPairWithUser{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *TokenObtainPairWithUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenObtainPairWithUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *TokenObtainPairWithUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *TokenObtainPairWithUser) SetEmail(v string) {
	o.Email = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
// Deprecated
func (o *TokenObtainPairWithUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TokenObtainPairWithUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *TokenObtainPairWithUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
// Deprecated
func (o *TokenObtainPairWithUser) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value
func (o *TokenObtainPairWithUser) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *TokenObtainPairWithUser) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *TokenObtainPairWithUser) SetPassword(v string) {
	o.Password = v
}

func (o TokenObtainPairWithUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenObtainPairWithUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableTokenObtainPairWithUser struct {
	value *TokenObtainPairWithUser
	isSet bool
}

func (v NullableTokenObtainPairWithUser) Get() *TokenObtainPairWithUser {
	return v.value
}

func (v *NullableTokenObtainPairWithUser) Set(val *TokenObtainPairWithUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenObtainPairWithUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenObtainPairWithUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenObtainPairWithUser(val *TokenObtainPairWithUser) *NullableTokenObtainPairWithUser {
	return &NullableTokenObtainPairWithUser{value: val, isSet: true}
}

func (v NullableTokenObtainPairWithUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenObtainPairWithUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


