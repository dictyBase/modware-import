/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// IdEnum * `create_group` - create_group * `delete_group` - delete_group * `update_group` - update_group * `order_groups` - order_groups * `create_application` - create_application * `update_application` - update_application * `delete_application` - delete_application * `order_applications` - order_applications * `duplicate_application` - duplicate_application * `install_template` - install_template * `create_group_invitation` - create_group_invitation * `delete_group_invitation` - delete_group_invitation * `accept_group_invitation` - accept_group_invitation * `reject_group_invitation` - reject_group_invitation * `update_group_invitation_permissions` - update_group_invitation_permissions * `leave_group` - leave_group * `create_snapshot` - create_snapshot * `delete_snapshot` - delete_snapshot * `restore_snapshot` - restore_snapshot * `empty_trash` - empty_trash * `restore_from_trash` - restore_from_trash * `create_user` - create_user * `update_user` - update_user * `schedule_user_deletion` - schedule_user_deletion * `cancel_user_deletion` - cancel_user_deletion * `sign_in_user` - sign_in_user * `change_user_password` - change_user_password * `send_reset_user_password` - send_reset_user_password * `reset_user_password` - reset_user_password * `create_db_token` - create_db_token * `update_db_token_name` - update_db_token_name * `update_db_token_permissions` - update_db_token_permissions * `rotate_db_token_key` - rotate_db_token_key * `delete_db_token_key` - delete_db_token_key * `create_webhook` - create_webhook * `delete_webhook` - delete_webhook * `update_webhook` - update_webhook * `export_table` - export_table * `import_database_from_airtable` - import_database_from_airtable * `create_table` - create_table * `delete_table` - delete_table * `order_tables` - order_tables * `update_table` - update_table * `duplicate_table` - duplicate_table * `create_row` - create_row * `create_rows` - create_rows * `import_rows` - import_rows * `delete_row` - delete_row * `delete_rows` - delete_rows * `move_row` - move_row * `update_row` - update_row * `update_rows` - update_rows * `create_view` - create_view * `duplicate_view` - duplicate_view * `delete_view` - delete_view * `order_views` - order_views * `update_view` - update_view * `create_view_filter` - create_view_filter * `update_view_filter` - update_view_filter * `delete_view_filter` - delete_view_filter * `create_view_sort` - create_view_sort * `update_view_sort` - update_view_sort * `delete_view_sort` - delete_view_sort * `rotate_view_slug` - rotate_view_slug * `update_view_field_options` - update_view_field_options * `create_decoration` - create_decoration * `update_decoration` - update_decoration * `delete_decoration` - delete_decoration * `create_field` - create_field * `delete_field` - delete_field * `update_field` - update_field * `duplicate_field` - duplicate_field * `create_row_comment` - create_row_comment * `create_team` - create_team * `update_team` - update_team * `delete_team` - delete_team * `create_team_subject` - create_team_subject * `delete_team_subject` - delete_team_subject * `batch_assign_role` - batch_assign_role
type IdEnum string

// List of IdEnum
const (
	CREATE_GROUP IdEnum = "create_group"
	DELETE_GROUP IdEnum = "delete_group"
	UPDATE_GROUP IdEnum = "update_group"
	ORDER_GROUPS IdEnum = "order_groups"
	CREATE_APPLICATION IdEnum = "create_application"
	UPDATE_APPLICATION IdEnum = "update_application"
	DELETE_APPLICATION IdEnum = "delete_application"
	ORDER_APPLICATIONS IdEnum = "order_applications"
	DUPLICATE_APPLICATION IdEnum = "duplicate_application"
	INSTALL_TEMPLATE IdEnum = "install_template"
	CREATE_GROUP_INVITATION IdEnum = "create_group_invitation"
	DELETE_GROUP_INVITATION IdEnum = "delete_group_invitation"
	ACCEPT_GROUP_INVITATION IdEnum = "accept_group_invitation"
	REJECT_GROUP_INVITATION IdEnum = "reject_group_invitation"
	UPDATE_GROUP_INVITATION_PERMISSIONS IdEnum = "update_group_invitation_permissions"
	LEAVE_GROUP IdEnum = "leave_group"
	CREATE_SNAPSHOT IdEnum = "create_snapshot"
	DELETE_SNAPSHOT IdEnum = "delete_snapshot"
	RESTORE_SNAPSHOT IdEnum = "restore_snapshot"
	EMPTY_TRASH IdEnum = "empty_trash"
	RESTORE_FROM_TRASH IdEnum = "restore_from_trash"
	CREATE_USER IdEnum = "create_user"
	UPDATE_USER IdEnum = "update_user"
	SCHEDULE_USER_DELETION IdEnum = "schedule_user_deletion"
	CANCEL_USER_DELETION IdEnum = "cancel_user_deletion"
	SIGN_IN_USER IdEnum = "sign_in_user"
	CHANGE_USER_PASSWORD IdEnum = "change_user_password"
	SEND_RESET_USER_PASSWORD IdEnum = "send_reset_user_password"
	RESET_USER_PASSWORD IdEnum = "reset_user_password"
	CREATE_DB_TOKEN IdEnum = "create_db_token"
	UPDATE_DB_TOKEN_NAME IdEnum = "update_db_token_name"
	UPDATE_DB_TOKEN_PERMISSIONS IdEnum = "update_db_token_permissions"
	ROTATE_DB_TOKEN_KEY IdEnum = "rotate_db_token_key"
	DELETE_DB_TOKEN_KEY IdEnum = "delete_db_token_key"
	CREATE_WEBHOOK IdEnum = "create_webhook"
	DELETE_WEBHOOK IdEnum = "delete_webhook"
	UPDATE_WEBHOOK IdEnum = "update_webhook"
	EXPORT_TABLE IdEnum = "export_table"
	IMPORT_DATABASE_FROM_AIRTABLE IdEnum = "import_database_from_airtable"
	CREATE_TABLE IdEnum = "create_table"
	DELETE_TABLE IdEnum = "delete_table"
	ORDER_TABLES IdEnum = "order_tables"
	UPDATE_TABLE IdEnum = "update_table"
	DUPLICATE_TABLE IdEnum = "duplicate_table"
	CREATE_ROW IdEnum = "create_row"
	CREATE_ROWS IdEnum = "create_rows"
	IMPORT_ROWS IdEnum = "import_rows"
	DELETE_ROW IdEnum = "delete_row"
	DELETE_ROWS IdEnum = "delete_rows"
	MOVE_ROW IdEnum = "move_row"
	UPDATE_ROW IdEnum = "update_row"
	UPDATE_ROWS IdEnum = "update_rows"
	CREATE_VIEW IdEnum = "create_view"
	DUPLICATE_VIEW IdEnum = "duplicate_view"
	DELETE_VIEW IdEnum = "delete_view"
	ORDER_VIEWS IdEnum = "order_views"
	UPDATE_VIEW IdEnum = "update_view"
	CREATE_VIEW_FILTER IdEnum = "create_view_filter"
	UPDATE_VIEW_FILTER IdEnum = "update_view_filter"
	DELETE_VIEW_FILTER IdEnum = "delete_view_filter"
	CREATE_VIEW_SORT IdEnum = "create_view_sort"
	UPDATE_VIEW_SORT IdEnum = "update_view_sort"
	DELETE_VIEW_SORT IdEnum = "delete_view_sort"
	ROTATE_VIEW_SLUG IdEnum = "rotate_view_slug"
	UPDATE_VIEW_FIELD_OPTIONS IdEnum = "update_view_field_options"
	CREATE_DECORATION IdEnum = "create_decoration"
	UPDATE_DECORATION IdEnum = "update_decoration"
	DELETE_DECORATION IdEnum = "delete_decoration"
	CREATE_FIELD IdEnum = "create_field"
	DELETE_FIELD IdEnum = "delete_field"
	UPDATE_FIELD IdEnum = "update_field"
	DUPLICATE_FIELD IdEnum = "duplicate_field"
	CREATE_ROW_COMMENT IdEnum = "create_row_comment"
	CREATE_TEAM IdEnum = "create_team"
	UPDATE_TEAM IdEnum = "update_team"
	DELETE_TEAM IdEnum = "delete_team"
	CREATE_TEAM_SUBJECT IdEnum = "create_team_subject"
	DELETE_TEAM_SUBJECT IdEnum = "delete_team_subject"
	BATCH_ASSIGN_ROLE IdEnum = "batch_assign_role"
)

// All allowed values of IdEnum enum
var AllowedIdEnumEnumValues = []IdEnum{
	"create_group",
	"delete_group",
	"update_group",
	"order_groups",
	"create_application",
	"update_application",
	"delete_application",
	"order_applications",
	"duplicate_application",
	"install_template",
	"create_group_invitation",
	"delete_group_invitation",
	"accept_group_invitation",
	"reject_group_invitation",
	"update_group_invitation_permissions",
	"leave_group",
	"create_snapshot",
	"delete_snapshot",
	"restore_snapshot",
	"empty_trash",
	"restore_from_trash",
	"create_user",
	"update_user",
	"schedule_user_deletion",
	"cancel_user_deletion",
	"sign_in_user",
	"change_user_password",
	"send_reset_user_password",
	"reset_user_password",
	"create_db_token",
	"update_db_token_name",
	"update_db_token_permissions",
	"rotate_db_token_key",
	"delete_db_token_key",
	"create_webhook",
	"delete_webhook",
	"update_webhook",
	"export_table",
	"import_database_from_airtable",
	"create_table",
	"delete_table",
	"order_tables",
	"update_table",
	"duplicate_table",
	"create_row",
	"create_rows",
	"import_rows",
	"delete_row",
	"delete_rows",
	"move_row",
	"update_row",
	"update_rows",
	"create_view",
	"duplicate_view",
	"delete_view",
	"order_views",
	"update_view",
	"create_view_filter",
	"update_view_filter",
	"delete_view_filter",
	"create_view_sort",
	"update_view_sort",
	"delete_view_sort",
	"rotate_view_slug",
	"update_view_field_options",
	"create_decoration",
	"update_decoration",
	"delete_decoration",
	"create_field",
	"delete_field",
	"update_field",
	"duplicate_field",
	"create_row_comment",
	"create_team",
	"update_team",
	"delete_team",
	"create_team_subject",
	"delete_team_subject",
	"batch_assign_role",
}

func (v *IdEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdEnum(value)
	for _, existing := range AllowedIdEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdEnum", value)
}

// NewIdEnumFromValue returns a pointer to a valid IdEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdEnumFromValue(v string) (*IdEnum, error) {
	ev := IdEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdEnum: valid values are %v", v, AllowedIdEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdEnum) IsValid() bool {
	for _, existing := range AllowedIdEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdEnum value
func (v IdEnum) Ptr() *IdEnum {
	return &v
}

type NullableIdEnum struct {
	value *IdEnum
	isSet bool
}

func (v NullableIdEnum) Get() *IdEnum {
	return v.value
}

func (v *NullableIdEnum) Set(val *IdEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableIdEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableIdEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdEnum(val *IdEnum) *NullableIdEnum {
	return &NullableIdEnum{value: val, isSet: true}
}

func (v NullableIdEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

