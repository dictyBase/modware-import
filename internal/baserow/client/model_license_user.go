/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the LicenseUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseUser{}

// LicenseUser struct for LicenseUser
type LicenseUser struct {
	Id int32 `json:"id"`
	FirstName *string `json:"first_name,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewLicenseUser instantiates a new LicenseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseUser(id int32) *LicenseUser {
	this := LicenseUser{}
	this.Id = id
	return &this
}

// NewLicenseUserWithDefaults instantiates a new LicenseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseUserWithDefaults() *LicenseUser {
	this := LicenseUser{}
	return &this
}

// GetId returns the Id field value
func (o *LicenseUser) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LicenseUser) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LicenseUser) SetId(v int32) {
	o.Id = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *LicenseUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *LicenseUser) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *LicenseUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *LicenseUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *LicenseUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *LicenseUser) SetEmail(v string) {
	o.Email = &v
}

func (o LicenseUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableLicenseUser struct {
	value *LicenseUser
	isSet bool
}

func (v NullableLicenseUser) Get() *LicenseUser {
	return v.value
}

func (v *NullableLicenseUser) Set(val *LicenseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseUser(val *LicenseUser) *NullableLicenseUser {
	return &NullableLicenseUser{value: val, isSet: true}
}

func (v NullableLicenseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


