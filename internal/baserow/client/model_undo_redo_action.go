/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UndoRedoAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UndoRedoAction{}

// UndoRedoAction struct for UndoRedoAction
type UndoRedoAction struct {
	// If an action was undone/redone/skipped due to an error this field will contain the type of the action that was undone/redone.
	ActionType NullableString `json:"action_type,omitempty"`
	// If an action was undone/redone/skipped due to an error this field will contain the scope of the action that was undone/redone.
	ActionScope NullableString `json:"action_scope,omitempty"`
}

// NewUndoRedoAction instantiates a new UndoRedoAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUndoRedoAction() *UndoRedoAction {
	this := UndoRedoAction{}
	return &this
}

// NewUndoRedoActionWithDefaults instantiates a new UndoRedoAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUndoRedoActionWithDefaults() *UndoRedoAction {
	this := UndoRedoAction{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UndoRedoAction) GetActionType() string {
	if o == nil || IsNil(o.ActionType.Get()) {
		var ret string
		return ret
	}
	return *o.ActionType.Get()
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UndoRedoAction) GetActionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionType.Get(), o.ActionType.IsSet()
}

// HasActionType returns a boolean if a field has been set.
func (o *UndoRedoAction) HasActionType() bool {
	if o != nil && o.ActionType.IsSet() {
		return true
	}

	return false
}

// SetActionType gets a reference to the given NullableString and assigns it to the ActionType field.
func (o *UndoRedoAction) SetActionType(v string) {
	o.ActionType.Set(&v)
}
// SetActionTypeNil sets the value for ActionType to be an explicit nil
func (o *UndoRedoAction) SetActionTypeNil() {
	o.ActionType.Set(nil)
}

// UnsetActionType ensures that no value is present for ActionType, not even an explicit nil
func (o *UndoRedoAction) UnsetActionType() {
	o.ActionType.Unset()
}

// GetActionScope returns the ActionScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UndoRedoAction) GetActionScope() string {
	if o == nil || IsNil(o.ActionScope.Get()) {
		var ret string
		return ret
	}
	return *o.ActionScope.Get()
}

// GetActionScopeOk returns a tuple with the ActionScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UndoRedoAction) GetActionScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionScope.Get(), o.ActionScope.IsSet()
}

// HasActionScope returns a boolean if a field has been set.
func (o *UndoRedoAction) HasActionScope() bool {
	if o != nil && o.ActionScope.IsSet() {
		return true
	}

	return false
}

// SetActionScope gets a reference to the given NullableString and assigns it to the ActionScope field.
func (o *UndoRedoAction) SetActionScope(v string) {
	o.ActionScope.Set(&v)
}
// SetActionScopeNil sets the value for ActionScope to be an explicit nil
func (o *UndoRedoAction) SetActionScopeNil() {
	o.ActionScope.Set(nil)
}

// UnsetActionScope ensures that no value is present for ActionScope, not even an explicit nil
func (o *UndoRedoAction) UnsetActionScope() {
	o.ActionScope.Unset()
}

func (o UndoRedoAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UndoRedoAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionType.IsSet() {
		toSerialize["action_type"] = o.ActionType.Get()
	}
	if o.ActionScope.IsSet() {
		toSerialize["action_scope"] = o.ActionScope.Get()
	}
	return toSerialize, nil
}

type NullableUndoRedoAction struct {
	value *UndoRedoAction
	isSet bool
}

func (v NullableUndoRedoAction) Get() *UndoRedoAction {
	return v.value
}

func (v *NullableUndoRedoAction) Set(val *UndoRedoAction) {
	v.value = val
	v.isSet = true
}

func (v NullableUndoRedoAction) IsSet() bool {
	return v.isSet
}

func (v *NullableUndoRedoAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUndoRedoAction(val *UndoRedoAction) *NullableUndoRedoAction {
	return &NullableUndoRedoAction{value: val, isSet: true}
}

func (v NullableUndoRedoAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUndoRedoAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


