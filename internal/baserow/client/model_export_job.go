/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ExportJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportJob{}

// ExportJob When mixed in to a model serializer for an ExportJob this will add an url field with the actual usable url of the export job's file (if it has one).
type ExportJob struct {
	Id int32 `json:"id"`
	Table NullableInt32 `json:"table,omitempty"`
	View NullableInt32 `json:"view,omitempty"`
	ExporterType string `json:"exporter_type"`
	State StateEnum `json:"state"`
	// DEPRECATED: Use state instead
	Status string `json:"status"`
	ExportedFileName NullableString `json:"exported_file_name,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	ProgressPercentage *float64 `json:"progress_percentage,omitempty"`
	Url string `json:"url"`
}

// NewExportJob instantiates a new ExportJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportJob(id int32, exporterType string, state StateEnum, status string, createdAt time.Time, url string) *ExportJob {
	this := ExportJob{}
	this.Id = id
	this.ExporterType = exporterType
	this.State = state
	this.Status = status
	this.CreatedAt = createdAt
	this.Url = url
	return &this
}

// NewExportJobWithDefaults instantiates a new ExportJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportJobWithDefaults() *ExportJob {
	this := ExportJob{}
	return &this
}

// GetId returns the Id field value
func (o *ExportJob) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExportJob) SetId(v int32) {
	o.Id = v
}

// GetTable returns the Table field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportJob) GetTable() int32 {
	if o == nil || IsNil(o.Table.Get()) {
		var ret int32
		return ret
	}
	return *o.Table.Get()
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportJob) GetTableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Table.Get(), o.Table.IsSet()
}

// HasTable returns a boolean if a field has been set.
func (o *ExportJob) HasTable() bool {
	if o != nil && o.Table.IsSet() {
		return true
	}

	return false
}

// SetTable gets a reference to the given NullableInt32 and assigns it to the Table field.
func (o *ExportJob) SetTable(v int32) {
	o.Table.Set(&v)
}
// SetTableNil sets the value for Table to be an explicit nil
func (o *ExportJob) SetTableNil() {
	o.Table.Set(nil)
}

// UnsetTable ensures that no value is present for Table, not even an explicit nil
func (o *ExportJob) UnsetTable() {
	o.Table.Unset()
}

// GetView returns the View field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportJob) GetView() int32 {
	if o == nil || IsNil(o.View.Get()) {
		var ret int32
		return ret
	}
	return *o.View.Get()
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportJob) GetViewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.View.Get(), o.View.IsSet()
}

// HasView returns a boolean if a field has been set.
func (o *ExportJob) HasView() bool {
	if o != nil && o.View.IsSet() {
		return true
	}

	return false
}

// SetView gets a reference to the given NullableInt32 and assigns it to the View field.
func (o *ExportJob) SetView(v int32) {
	o.View.Set(&v)
}
// SetViewNil sets the value for View to be an explicit nil
func (o *ExportJob) SetViewNil() {
	o.View.Set(nil)
}

// UnsetView ensures that no value is present for View, not even an explicit nil
func (o *ExportJob) UnsetView() {
	o.View.Unset()
}

// GetExporterType returns the ExporterType field value
func (o *ExportJob) GetExporterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExporterType
}

// GetExporterTypeOk returns a tuple with the ExporterType field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetExporterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExporterType, true
}

// SetExporterType sets field value
func (o *ExportJob) SetExporterType(v string) {
	o.ExporterType = v
}

// GetState returns the State field value
func (o *ExportJob) GetState() StateEnum {
	if o == nil {
		var ret StateEnum
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetStateOk() (*StateEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ExportJob) SetState(v StateEnum) {
	o.State = v
}

// GetStatus returns the Status field value
func (o *ExportJob) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExportJob) SetStatus(v string) {
	o.Status = v
}

// GetExportedFileName returns the ExportedFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportJob) GetExportedFileName() string {
	if o == nil || IsNil(o.ExportedFileName.Get()) {
		var ret string
		return ret
	}
	return *o.ExportedFileName.Get()
}

// GetExportedFileNameOk returns a tuple with the ExportedFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportJob) GetExportedFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportedFileName.Get(), o.ExportedFileName.IsSet()
}

// HasExportedFileName returns a boolean if a field has been set.
func (o *ExportJob) HasExportedFileName() bool {
	if o != nil && o.ExportedFileName.IsSet() {
		return true
	}

	return false
}

// SetExportedFileName gets a reference to the given NullableString and assigns it to the ExportedFileName field.
func (o *ExportJob) SetExportedFileName(v string) {
	o.ExportedFileName.Set(&v)
}
// SetExportedFileNameNil sets the value for ExportedFileName to be an explicit nil
func (o *ExportJob) SetExportedFileNameNil() {
	o.ExportedFileName.Set(nil)
}

// UnsetExportedFileName ensures that no value is present for ExportedFileName, not even an explicit nil
func (o *ExportJob) UnsetExportedFileName() {
	o.ExportedFileName.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *ExportJob) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ExportJob) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise.
func (o *ExportJob) GetProgressPercentage() float64 {
	if o == nil || IsNil(o.ProgressPercentage) {
		var ret float64
		return ret
	}
	return *o.ProgressPercentage
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportJob) GetProgressPercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.ProgressPercentage) {
		return nil, false
	}
	return o.ProgressPercentage, true
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *ExportJob) HasProgressPercentage() bool {
	if o != nil && !IsNil(o.ProgressPercentage) {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given float64 and assigns it to the ProgressPercentage field.
func (o *ExportJob) SetProgressPercentage(v float64) {
	o.ProgressPercentage = &v
}

// GetUrl returns the Url field value
func (o *ExportJob) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ExportJob) SetUrl(v string) {
	o.Url = v
}

func (o ExportJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if o.Table.IsSet() {
		toSerialize["table"] = o.Table.Get()
	}
	if o.View.IsSet() {
		toSerialize["view"] = o.View.Get()
	}
	toSerialize["exporter_type"] = o.ExporterType
	toSerialize["state"] = o.State
	// skip: status is readOnly
	if o.ExportedFileName.IsSet() {
		toSerialize["exported_file_name"] = o.ExportedFileName.Get()
	}
	// skip: created_at is readOnly
	if !IsNil(o.ProgressPercentage) {
		toSerialize["progress_percentage"] = o.ProgressPercentage
	}
	// skip: url is readOnly
	return toSerialize, nil
}

type NullableExportJob struct {
	value *ExportJob
	isSet bool
}

func (v NullableExportJob) Get() *ExportJob {
	return v.value
}

func (v *NullableExportJob) Set(val *ExportJob) {
	v.value = val
	v.isSet = true
}

func (v NullableExportJob) IsSet() bool {
	return v.isSet
}

func (v *NullableExportJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportJob(val *ExportJob) *NullableExportJob {
	return &NullableExportJob{value: val, isSet: true}
}

func (v NullableExportJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


