/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FormViewFieldOptionsCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormViewFieldOptionsCondition{}

// FormViewFieldOptionsCondition struct for FormViewFieldOptionsCondition
type FormViewFieldOptionsCondition struct {
	Id int32 `json:"id"`
	Field int32 `json:"field"`
	// Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
	Type string `json:"type"`
	// The filter value that must be compared to the field's value.
	Value *string `json:"value,omitempty"`
}

// NewFormViewFieldOptionsCondition instantiates a new FormViewFieldOptionsCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormViewFieldOptionsCondition(id int32, field int32, type_ string) *FormViewFieldOptionsCondition {
	this := FormViewFieldOptionsCondition{}
	this.Id = id
	this.Field = field
	this.Type = type_
	return &this
}

// NewFormViewFieldOptionsConditionWithDefaults instantiates a new FormViewFieldOptionsCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormViewFieldOptionsConditionWithDefaults() *FormViewFieldOptionsCondition {
	this := FormViewFieldOptionsCondition{}
	return &this
}

// GetId returns the Id field value
func (o *FormViewFieldOptionsCondition) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FormViewFieldOptionsCondition) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FormViewFieldOptionsCondition) SetId(v int32) {
	o.Id = v
}

// GetField returns the Field field value
func (o *FormViewFieldOptionsCondition) GetField() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *FormViewFieldOptionsCondition) GetFieldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *FormViewFieldOptionsCondition) SetField(v int32) {
	o.Field = v
}

// GetType returns the Type field value
func (o *FormViewFieldOptionsCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FormViewFieldOptionsCondition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FormViewFieldOptionsCondition) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FormViewFieldOptionsCondition) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewFieldOptionsCondition) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FormViewFieldOptionsCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FormViewFieldOptionsCondition) SetValue(v string) {
	o.Value = &v
}

func (o FormViewFieldOptionsCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormViewFieldOptionsCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["field"] = o.Field
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFormViewFieldOptionsCondition struct {
	value *FormViewFieldOptionsCondition
	isSet bool
}

func (v NullableFormViewFieldOptionsCondition) Get() *FormViewFieldOptionsCondition {
	return v.value
}

func (v *NullableFormViewFieldOptionsCondition) Set(val *FormViewFieldOptionsCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableFormViewFieldOptionsCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableFormViewFieldOptionsCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormViewFieldOptionsCondition(val *FormViewFieldOptionsCondition) *NullableFormViewFieldOptionsCondition {
	return &NullableFormViewFieldOptionsCondition{value: val, isSet: true}
}

func (v NullableFormViewFieldOptionsCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormViewFieldOptionsCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


