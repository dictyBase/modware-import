/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SubjectType6dcEnum * `auth.User` - auth.User * `anonymous` - anonymous * `core.Token` - core.Token * `baserow_enterprise.Team` - baserow_enterprise.Team
type SubjectType6dcEnum string

// List of SubjectType6dcEnum
const (
	ANONYMOUS SubjectType6dcEnum = "anonymous"
	CORE_TOKEN SubjectType6dcEnum = "core.Token"
	BASEROW_ENTERPRISE_TEAM SubjectType6dcEnum = "baserow_enterprise.Team"
)

// All allowed values of SubjectType6dcEnum enum
var AllowedSubjectType6dcEnumEnumValues = []SubjectType6dcEnum{
	"auth.User",
	"anonymous",
	"core.Token",
	"baserow_enterprise.Team",
}

func (v *SubjectType6dcEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubjectType6dcEnum(value)
	for _, existing := range AllowedSubjectType6dcEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubjectType6dcEnum", value)
}

// NewSubjectType6dcEnumFromValue returns a pointer to a valid SubjectType6dcEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubjectType6dcEnumFromValue(v string) (*SubjectType6dcEnum, error) {
	ev := SubjectType6dcEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubjectType6dcEnum: valid values are %v", v, AllowedSubjectType6dcEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubjectType6dcEnum) IsValid() bool {
	for _, existing := range AllowedSubjectType6dcEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubjectType6dcEnum value
func (v SubjectType6dcEnum) Ptr() *SubjectType6dcEnum {
	return &v
}

type NullableSubjectType6dcEnum struct {
	value *SubjectType6dcEnum
	isSet bool
}

func (v NullableSubjectType6dcEnum) Get() *SubjectType6dcEnum {
	return v.value
}

func (v *NullableSubjectType6dcEnum) Set(val *SubjectType6dcEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectType6dcEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectType6dcEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectType6dcEnum(val *SubjectType6dcEnum) *NullableSubjectType6dcEnum {
	return &NullableSubjectType6dcEnum{value: val, isSet: true}
}

func (v NullableSubjectType6dcEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectType6dcEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

