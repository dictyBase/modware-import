/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CsvColumnSeparatorEnum * `,` - , * `;` - ; * `|` - | * `tab` -   * `record_separator` -  * `unit_separator` - 
type CsvColumnSeparatorEnum string

// List of CsvColumnSeparatorEnum
const (
	COMMA CsvColumnSeparatorEnum = ","
	SEMICOLON CsvColumnSeparatorEnum = ";"
	PIPE CsvColumnSeparatorEnum = "|"
	TAB CsvColumnSeparatorEnum = "tab"
	RECORD_SEPARATOR CsvColumnSeparatorEnum = "record_separator"
	UNIT_SEPARATOR CsvColumnSeparatorEnum = "unit_separator"
)

// All allowed values of CsvColumnSeparatorEnum enum
var AllowedCsvColumnSeparatorEnumEnumValues = []CsvColumnSeparatorEnum{
	",",
	";",
	"|",
	"tab",
	"record_separator",
	"unit_separator",
}

func (v *CsvColumnSeparatorEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CsvColumnSeparatorEnum(value)
	for _, existing := range AllowedCsvColumnSeparatorEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CsvColumnSeparatorEnum", value)
}

// NewCsvColumnSeparatorEnumFromValue returns a pointer to a valid CsvColumnSeparatorEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCsvColumnSeparatorEnumFromValue(v string) (*CsvColumnSeparatorEnum, error) {
	ev := CsvColumnSeparatorEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CsvColumnSeparatorEnum: valid values are %v", v, AllowedCsvColumnSeparatorEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CsvColumnSeparatorEnum) IsValid() bool {
	for _, existing := range AllowedCsvColumnSeparatorEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CsvColumnSeparatorEnum value
func (v CsvColumnSeparatorEnum) Ptr() *CsvColumnSeparatorEnum {
	return &v
}

type NullableCsvColumnSeparatorEnum struct {
	value *CsvColumnSeparatorEnum
	isSet bool
}

func (v NullableCsvColumnSeparatorEnum) Get() *CsvColumnSeparatorEnum {
	return v.value
}

func (v *NullableCsvColumnSeparatorEnum) Set(val *CsvColumnSeparatorEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCsvColumnSeparatorEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCsvColumnSeparatorEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsvColumnSeparatorEnum(val *CsvColumnSeparatorEnum) *NullableCsvColumnSeparatorEnum {
	return &NullableCsvColumnSeparatorEnum{value: val, isSet: true}
}

func (v NullableCsvColumnSeparatorEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsvColumnSeparatorEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

