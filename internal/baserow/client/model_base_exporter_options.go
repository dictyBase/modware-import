/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BaseExporterOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseExporterOptions{}

// BaseExporterOptions struct for BaseExporterOptions
type BaseExporterOptions struct {
	// Optional: The view for this table to export using its filters, sorts and other view specific settings.
	ViewId NullableInt32 `json:"view_id,omitempty"`
	ExporterType ExporterTypeEnum `json:"exporter_type"`
	ExportCharset *ExportCharsetEnum `json:"export_charset,omitempty"`
}

// NewBaseExporterOptions instantiates a new BaseExporterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseExporterOptions(exporterType ExporterTypeEnum) *BaseExporterOptions {
	this := BaseExporterOptions{}
	this.ExporterType = exporterType
	var exportCharset ExportCharsetEnum = UTF_8
	this.ExportCharset = &exportCharset
	return &this
}

// NewBaseExporterOptionsWithDefaults instantiates a new BaseExporterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseExporterOptionsWithDefaults() *BaseExporterOptions {
	this := BaseExporterOptions{}
	var exportCharset ExportCharsetEnum = UTF_8
	this.ExportCharset = &exportCharset
	return &this
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseExporterOptions) GetViewId() int32 {
	if o == nil || IsNil(o.ViewId.Get()) {
		var ret int32
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseExporterOptions) GetViewIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *BaseExporterOptions) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt32 and assigns it to the ViewId field.
func (o *BaseExporterOptions) SetViewId(v int32) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *BaseExporterOptions) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *BaseExporterOptions) UnsetViewId() {
	o.ViewId.Unset()
}

// GetExporterType returns the ExporterType field value
func (o *BaseExporterOptions) GetExporterType() ExporterTypeEnum {
	if o == nil {
		var ret ExporterTypeEnum
		return ret
	}

	return o.ExporterType
}

// GetExporterTypeOk returns a tuple with the ExporterType field value
// and a boolean to check if the value has been set.
func (o *BaseExporterOptions) GetExporterTypeOk() (*ExporterTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExporterType, true
}

// SetExporterType sets field value
func (o *BaseExporterOptions) SetExporterType(v ExporterTypeEnum) {
	o.ExporterType = v
}

// GetExportCharset returns the ExportCharset field value if set, zero value otherwise.
func (o *BaseExporterOptions) GetExportCharset() ExportCharsetEnum {
	if o == nil || IsNil(o.ExportCharset) {
		var ret ExportCharsetEnum
		return ret
	}
	return *o.ExportCharset
}

// GetExportCharsetOk returns a tuple with the ExportCharset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseExporterOptions) GetExportCharsetOk() (*ExportCharsetEnum, bool) {
	if o == nil || IsNil(o.ExportCharset) {
		return nil, false
	}
	return o.ExportCharset, true
}

// HasExportCharset returns a boolean if a field has been set.
func (o *BaseExporterOptions) HasExportCharset() bool {
	if o != nil && !IsNil(o.ExportCharset) {
		return true
	}

	return false
}

// SetExportCharset gets a reference to the given ExportCharsetEnum and assigns it to the ExportCharset field.
func (o *BaseExporterOptions) SetExportCharset(v ExportCharsetEnum) {
	o.ExportCharset = &v
}

func (o BaseExporterOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseExporterOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewId.IsSet() {
		toSerialize["view_id"] = o.ViewId.Get()
	}
	toSerialize["exporter_type"] = o.ExporterType
	if !IsNil(o.ExportCharset) {
		toSerialize["export_charset"] = o.ExportCharset
	}
	return toSerialize, nil
}

type NullableBaseExporterOptions struct {
	value *BaseExporterOptions
	isSet bool
}

func (v NullableBaseExporterOptions) Get() *BaseExporterOptions {
	return v.value
}

func (v *NullableBaseExporterOptions) Set(val *BaseExporterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseExporterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseExporterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseExporterOptions(val *BaseExporterOptions) *NullableBaseExporterOptions {
	return &NullableBaseExporterOptions{value: val, isSet: true}
}

func (v NullableBaseExporterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseExporterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


