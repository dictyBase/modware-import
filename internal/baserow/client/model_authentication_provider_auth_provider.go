/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AuthenticationProviderAuthProvider - struct for AuthenticationProviderAuthProvider
type AuthenticationProviderAuthProvider struct {
	FacebookAuthProviderModelAuthProvider *FacebookAuthProviderModelAuthProvider
	GitHubAuthProviderModelAuthProvider *GitHubAuthProviderModelAuthProvider
	GitLabAuthProviderModelAuthProvider *GitLabAuthProviderModelAuthProvider
	GoogleAuthProviderModelAuthProvider *GoogleAuthProviderModelAuthProvider
	OpenIdConnectAuthProviderModelAuthProvider *OpenIdConnectAuthProviderModelAuthProvider
	PasswordAuthProviderModelAuthProvider *PasswordAuthProviderModelAuthProvider
	SamlAuthProviderModelAuthProvider *SamlAuthProviderModelAuthProvider
}

// FacebookAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns FacebookAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func FacebookAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *FacebookAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		FacebookAuthProviderModelAuthProvider: v,
	}
}

// GitHubAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns GitHubAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func GitHubAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *GitHubAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		GitHubAuthProviderModelAuthProvider: v,
	}
}

// GitLabAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns GitLabAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func GitLabAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *GitLabAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		GitLabAuthProviderModelAuthProvider: v,
	}
}

// GoogleAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns GoogleAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func GoogleAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *GoogleAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		GoogleAuthProviderModelAuthProvider: v,
	}
}

// OpenIdConnectAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns OpenIdConnectAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func OpenIdConnectAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *OpenIdConnectAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		OpenIdConnectAuthProviderModelAuthProvider: v,
	}
}

// PasswordAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns PasswordAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func PasswordAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *PasswordAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		PasswordAuthProviderModelAuthProvider: v,
	}
}

// SamlAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider is a convenience function that returns SamlAuthProviderModelAuthProvider wrapped in AuthenticationProviderAuthProvider
func SamlAuthProviderModelAuthProviderAsAuthenticationProviderAuthProvider(v *SamlAuthProviderModelAuthProvider) AuthenticationProviderAuthProvider {
	return AuthenticationProviderAuthProvider{
		SamlAuthProviderModelAuthProvider: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthenticationProviderAuthProvider) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FacebookAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.FacebookAuthProviderModelAuthProvider)
	if err == nil {
		jsonFacebookAuthProviderModelAuthProvider, _ := json.Marshal(dst.FacebookAuthProviderModelAuthProvider)
		if string(jsonFacebookAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.FacebookAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.FacebookAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into GitHubAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.GitHubAuthProviderModelAuthProvider)
	if err == nil {
		jsonGitHubAuthProviderModelAuthProvider, _ := json.Marshal(dst.GitHubAuthProviderModelAuthProvider)
		if string(jsonGitHubAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.GitHubAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.GitHubAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into GitLabAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.GitLabAuthProviderModelAuthProvider)
	if err == nil {
		jsonGitLabAuthProviderModelAuthProvider, _ := json.Marshal(dst.GitLabAuthProviderModelAuthProvider)
		if string(jsonGitLabAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.GitLabAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.GitLabAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into GoogleAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.GoogleAuthProviderModelAuthProvider)
	if err == nil {
		jsonGoogleAuthProviderModelAuthProvider, _ := json.Marshal(dst.GoogleAuthProviderModelAuthProvider)
		if string(jsonGoogleAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.GoogleAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.GoogleAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into OpenIdConnectAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.OpenIdConnectAuthProviderModelAuthProvider)
	if err == nil {
		jsonOpenIdConnectAuthProviderModelAuthProvider, _ := json.Marshal(dst.OpenIdConnectAuthProviderModelAuthProvider)
		if string(jsonOpenIdConnectAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.OpenIdConnectAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into PasswordAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.PasswordAuthProviderModelAuthProvider)
	if err == nil {
		jsonPasswordAuthProviderModelAuthProvider, _ := json.Marshal(dst.PasswordAuthProviderModelAuthProvider)
		if string(jsonPasswordAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.PasswordAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.PasswordAuthProviderModelAuthProvider = nil
	}

	// try to unmarshal data into SamlAuthProviderModelAuthProvider
	err = newStrictDecoder(data).Decode(&dst.SamlAuthProviderModelAuthProvider)
	if err == nil {
		jsonSamlAuthProviderModelAuthProvider, _ := json.Marshal(dst.SamlAuthProviderModelAuthProvider)
		if string(jsonSamlAuthProviderModelAuthProvider) == "{}" { // empty struct
			dst.SamlAuthProviderModelAuthProvider = nil
		} else {
			match++
		}
	} else {
		dst.SamlAuthProviderModelAuthProvider = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FacebookAuthProviderModelAuthProvider = nil
		dst.GitHubAuthProviderModelAuthProvider = nil
		dst.GitLabAuthProviderModelAuthProvider = nil
		dst.GoogleAuthProviderModelAuthProvider = nil
		dst.OpenIdConnectAuthProviderModelAuthProvider = nil
		dst.PasswordAuthProviderModelAuthProvider = nil
		dst.SamlAuthProviderModelAuthProvider = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuthenticationProviderAuthProvider)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuthenticationProviderAuthProvider)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthenticationProviderAuthProvider) MarshalJSON() ([]byte, error) {
	if src.FacebookAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.FacebookAuthProviderModelAuthProvider)
	}

	if src.GitHubAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.GitHubAuthProviderModelAuthProvider)
	}

	if src.GitLabAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.GitLabAuthProviderModelAuthProvider)
	}

	if src.GoogleAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.GoogleAuthProviderModelAuthProvider)
	}

	if src.OpenIdConnectAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.OpenIdConnectAuthProviderModelAuthProvider)
	}

	if src.PasswordAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.PasswordAuthProviderModelAuthProvider)
	}

	if src.SamlAuthProviderModelAuthProvider != nil {
		return json.Marshal(&src.SamlAuthProviderModelAuthProvider)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthenticationProviderAuthProvider) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FacebookAuthProviderModelAuthProvider != nil {
		return obj.FacebookAuthProviderModelAuthProvider
	}

	if obj.GitHubAuthProviderModelAuthProvider != nil {
		return obj.GitHubAuthProviderModelAuthProvider
	}

	if obj.GitLabAuthProviderModelAuthProvider != nil {
		return obj.GitLabAuthProviderModelAuthProvider
	}

	if obj.GoogleAuthProviderModelAuthProvider != nil {
		return obj.GoogleAuthProviderModelAuthProvider
	}

	if obj.OpenIdConnectAuthProviderModelAuthProvider != nil {
		return obj.OpenIdConnectAuthProviderModelAuthProvider
	}

	if obj.PasswordAuthProviderModelAuthProvider != nil {
		return obj.PasswordAuthProviderModelAuthProvider
	}

	if obj.SamlAuthProviderModelAuthProvider != nil {
		return obj.SamlAuthProviderModelAuthProvider
	}

	// all schemas are nil
	return nil
}

type NullableAuthenticationProviderAuthProvider struct {
	value *AuthenticationProviderAuthProvider
	isSet bool
}

func (v NullableAuthenticationProviderAuthProvider) Get() *AuthenticationProviderAuthProvider {
	return v.value
}

func (v *NullableAuthenticationProviderAuthProvider) Set(val *AuthenticationProviderAuthProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderAuthProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderAuthProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderAuthProvider(val *AuthenticationProviderAuthProvider) *NullableAuthenticationProviderAuthProvider {
	return &NullableAuthenticationProviderAuthProvider{value: val, isSet: true}
}

func (v NullableAuthenticationProviderAuthProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderAuthProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


