/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PatchedTokenUpdatePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedTokenUpdatePermissions{}

// PatchedTokenUpdatePermissions Indicates per operation which permissions the database token has within the whole workspace. If the value of for example `create` is `true`, then the token can create rows in all tables related to the workspace. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[['database', 1]]` means create permissions for all tables in the database with id 1.  Example: ```json {   \"create\": true// Allows creating rows in all tables.   // Allows reading rows from database 1 and table 10.   \"read\": [[\"database\", 1], [\"table\", 10]],   \"update\": false  // Denies updating rows in all tables.   \"delete\": []  // Denies deleting rows in all tables.  } ```
type PatchedTokenUpdatePermissions struct {
	Create *PatchedTokenUpdatePermissionsCreate `json:"create,omitempty"`
	Read *PatchedTokenUpdatePermissionsCreate `json:"read,omitempty"`
	Update *PatchedTokenUpdatePermissionsCreate `json:"update,omitempty"`
	Delete *PatchedTokenUpdatePermissionsCreate `json:"delete,omitempty"`
}

// NewPatchedTokenUpdatePermissions instantiates a new PatchedTokenUpdatePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedTokenUpdatePermissions() *PatchedTokenUpdatePermissions {
	this := PatchedTokenUpdatePermissions{}
	return &this
}

// NewPatchedTokenUpdatePermissionsWithDefaults instantiates a new PatchedTokenUpdatePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedTokenUpdatePermissionsWithDefaults() *PatchedTokenUpdatePermissions {
	this := PatchedTokenUpdatePermissions{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PatchedTokenUpdatePermissions) GetCreate() PatchedTokenUpdatePermissionsCreate {
	if o == nil || IsNil(o.Create) {
		var ret PatchedTokenUpdatePermissionsCreate
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTokenUpdatePermissions) GetCreateOk() (*PatchedTokenUpdatePermissionsCreate, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PatchedTokenUpdatePermissions) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given PatchedTokenUpdatePermissionsCreate and assigns it to the Create field.
func (o *PatchedTokenUpdatePermissions) SetCreate(v PatchedTokenUpdatePermissionsCreate) {
	o.Create = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *PatchedTokenUpdatePermissions) GetRead() PatchedTokenUpdatePermissionsCreate {
	if o == nil || IsNil(o.Read) {
		var ret PatchedTokenUpdatePermissionsCreate
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTokenUpdatePermissions) GetReadOk() (*PatchedTokenUpdatePermissionsCreate, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *PatchedTokenUpdatePermissions) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given PatchedTokenUpdatePermissionsCreate and assigns it to the Read field.
func (o *PatchedTokenUpdatePermissions) SetRead(v PatchedTokenUpdatePermissionsCreate) {
	o.Read = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *PatchedTokenUpdatePermissions) GetUpdate() PatchedTokenUpdatePermissionsCreate {
	if o == nil || IsNil(o.Update) {
		var ret PatchedTokenUpdatePermissionsCreate
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTokenUpdatePermissions) GetUpdateOk() (*PatchedTokenUpdatePermissionsCreate, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *PatchedTokenUpdatePermissions) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given PatchedTokenUpdatePermissionsCreate and assigns it to the Update field.
func (o *PatchedTokenUpdatePermissions) SetUpdate(v PatchedTokenUpdatePermissionsCreate) {
	o.Update = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *PatchedTokenUpdatePermissions) GetDelete() PatchedTokenUpdatePermissionsCreate {
	if o == nil || IsNil(o.Delete) {
		var ret PatchedTokenUpdatePermissionsCreate
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTokenUpdatePermissions) GetDeleteOk() (*PatchedTokenUpdatePermissionsCreate, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *PatchedTokenUpdatePermissions) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given PatchedTokenUpdatePermissionsCreate and assigns it to the Delete field.
func (o *PatchedTokenUpdatePermissions) SetDelete(v PatchedTokenUpdatePermissionsCreate) {
	o.Delete = &v
}

func (o PatchedTokenUpdatePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedTokenUpdatePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	return toSerialize, nil
}

type NullablePatchedTokenUpdatePermissions struct {
	value *PatchedTokenUpdatePermissions
	isSet bool
}

func (v NullablePatchedTokenUpdatePermissions) Get() *PatchedTokenUpdatePermissions {
	return v.value
}

func (v *NullablePatchedTokenUpdatePermissions) Set(val *PatchedTokenUpdatePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTokenUpdatePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTokenUpdatePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTokenUpdatePermissions(val *PatchedTokenUpdatePermissions) *NullablePatchedTokenUpdatePermissions {
	return &NullablePatchedTokenUpdatePermissions{value: val, isSet: true}
}

func (v NullablePatchedTokenUpdatePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTokenUpdatePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


