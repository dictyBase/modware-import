/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SelectOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectOption{}

// SelectOption struct for SelectOption
type SelectOption struct {
	Id *int32 `json:"id,omitempty"`
	Value string `json:"value"`
	Color string `json:"color"`
}

// NewSelectOption instantiates a new SelectOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectOption(value string, color string) *SelectOption {
	this := SelectOption{}
	this.Value = value
	this.Color = color
	return &this
}

// NewSelectOptionWithDefaults instantiates a new SelectOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectOptionWithDefaults() *SelectOption {
	this := SelectOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SelectOption) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectOption) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SelectOption) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SelectOption) SetId(v int32) {
	o.Id = &v
}

// GetValue returns the Value field value
func (o *SelectOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SelectOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SelectOption) SetValue(v string) {
	o.Value = v
}

// GetColor returns the Color field value
func (o *SelectOption) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *SelectOption) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *SelectOption) SetColor(v string) {
	o.Color = v
}

func (o SelectOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["value"] = o.Value
	toSerialize["color"] = o.Color
	return toSerialize, nil
}

type NullableSelectOption struct {
	value *SelectOption
	isSet bool
}

func (v NullableSelectOption) Get() *SelectOption {
	return v.value
}

func (v *NullableSelectOption) Set(val *SelectOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectOption(val *SelectOption) *NullableSelectOption {
	return &NullableSelectOption{value: val, isSet: true}
}

func (v NullableSelectOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


