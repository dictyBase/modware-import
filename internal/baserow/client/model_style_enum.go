/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// StyleEnum * `star` - Star * `heart` - Heart * `thumbs-up` - Thumbs-up * `flag` - Flags * `smile` - Smile
type StyleEnum string

// List of StyleEnum
const (
	STAR StyleEnum = "star"
	HEART StyleEnum = "heart"
	THUMBS_UP StyleEnum = "thumbs-up"
	FLAG StyleEnum = "flag"
	SMILE StyleEnum = "smile"
)

// All allowed values of StyleEnum enum
var AllowedStyleEnumEnumValues = []StyleEnum{
	"star",
	"heart",
	"thumbs-up",
	"flag",
	"smile",
}

func (v *StyleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StyleEnum(value)
	for _, existing := range AllowedStyleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StyleEnum", value)
}

// NewStyleEnumFromValue returns a pointer to a valid StyleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStyleEnumFromValue(v string) (*StyleEnum, error) {
	ev := StyleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StyleEnum: valid values are %v", v, AllowedStyleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StyleEnum) IsValid() bool {
	for _, existing := range AllowedStyleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StyleEnum value
func (v StyleEnum) Ptr() *StyleEnum {
	return &v
}

type NullableStyleEnum struct {
	value *StyleEnum
	isSet bool
}

func (v NullableStyleEnum) Get() *StyleEnum {
	return v.value
}

func (v *NullableStyleEnum) Set(val *StyleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStyleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStyleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStyleEnum(val *StyleEnum) *NullableStyleEnum {
	return &NullableStyleEnum{value: val, isSet: true}
}

func (v NullableStyleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStyleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

