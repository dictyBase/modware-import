/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SubmitActionEnum * `MESSAGE` - Message * `REDIRECT` - Redirect
type SubmitActionEnum string

// List of SubmitActionEnum
const (
	MESSAGE SubmitActionEnum = "MESSAGE"
	REDIRECT SubmitActionEnum = "REDIRECT"
)

// All allowed values of SubmitActionEnum enum
var AllowedSubmitActionEnumEnumValues = []SubmitActionEnum{
	"MESSAGE",
	"REDIRECT",
}

func (v *SubmitActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubmitActionEnum(value)
	for _, existing := range AllowedSubmitActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubmitActionEnum", value)
}

// NewSubmitActionEnumFromValue returns a pointer to a valid SubmitActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubmitActionEnumFromValue(v string) (*SubmitActionEnum, error) {
	ev := SubmitActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubmitActionEnum: valid values are %v", v, AllowedSubmitActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubmitActionEnum) IsValid() bool {
	for _, existing := range AllowedSubmitActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubmitActionEnum value
func (v SubmitActionEnum) Ptr() *SubmitActionEnum {
	return &v
}

type NullableSubmitActionEnum struct {
	value *SubmitActionEnum
	isSet bool
}

func (v NullableSubmitActionEnum) Get() *SubmitActionEnum {
	return v.value
}

func (v *NullableSubmitActionEnum) Set(val *SubmitActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitActionEnum(val *SubmitActionEnum) *NullableSubmitActionEnum {
	return &NullableSubmitActionEnum{value: val, isSet: true}
}

func (v NullableSubmitActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

