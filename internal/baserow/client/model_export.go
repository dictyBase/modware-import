/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Export - struct for Export
type Export struct {
	BaseExporterOptions *BaseExporterOptions
	CsvExporterOptions *CsvExporterOptions
}

// BaseExporterOptionsAsExport is a convenience function that returns BaseExporterOptions wrapped in Export
func BaseExporterOptionsAsExport(v *BaseExporterOptions) Export {
	return Export{
		BaseExporterOptions: v,
	}
}

// CsvExporterOptionsAsExport is a convenience function that returns CsvExporterOptions wrapped in Export
func CsvExporterOptionsAsExport(v *CsvExporterOptions) Export {
	return Export{
		CsvExporterOptions: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Export) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BaseExporterOptions
	err = newStrictDecoder(data).Decode(&dst.BaseExporterOptions)
	if err == nil {
		jsonBaseExporterOptions, _ := json.Marshal(dst.BaseExporterOptions)
		if string(jsonBaseExporterOptions) == "{}" { // empty struct
			dst.BaseExporterOptions = nil
		} else {
			match++
		}
	} else {
		dst.BaseExporterOptions = nil
	}

	// try to unmarshal data into CsvExporterOptions
	err = newStrictDecoder(data).Decode(&dst.CsvExporterOptions)
	if err == nil {
		jsonCsvExporterOptions, _ := json.Marshal(dst.CsvExporterOptions)
		if string(jsonCsvExporterOptions) == "{}" { // empty struct
			dst.CsvExporterOptions = nil
		} else {
			match++
		}
	} else {
		dst.CsvExporterOptions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BaseExporterOptions = nil
		dst.CsvExporterOptions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Export)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Export)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Export) MarshalJSON() ([]byte, error) {
	if src.BaseExporterOptions != nil {
		return json.Marshal(&src.BaseExporterOptions)
	}

	if src.CsvExporterOptions != nil {
		return json.Marshal(&src.CsvExporterOptions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Export) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BaseExporterOptions != nil {
		return obj.BaseExporterOptions
	}

	if obj.CsvExporterOptions != nil {
		return obj.CsvExporterOptions
	}

	// all schemas are nil
	return nil
}

type NullableExport struct {
	value *Export
	isSet bool
}

func (v NullableExport) Get() *Export {
	return v.value
}

func (v *NullableExport) Set(val *Export) {
	v.value = val
	v.isSet = true
}

func (v NullableExport) IsSet() bool {
	return v.isSet
}

func (v *NullableExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExport(val *Export) *NullableExport {
	return &NullableExport{value: val, isSet: true}
}

func (v NullableExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


