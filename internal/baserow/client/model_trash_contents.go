/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the TrashContents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrashContents{}

// TrashContents struct for TrashContents
type TrashContents struct {
	Id int32 `json:"id"`
	UserWhoTrashed string `json:"user_who_trashed"`
	// If an API consumer hasn't yet adopted the \"workspace\" `trash_item_type`, give them the option to return \"group\" by testing the `respond_with_workspace_rename` querystring.
	TrashItemType string `json:"trash_item_type"`
	TrashItemId int32 `json:"trash_item_id"`
	ParentTrashItemId NullableInt32 `json:"parent_trash_item_id,omitempty"`
	TrashedAt time.Time `json:"trashed_at"`
	Application NullableInt32 `json:"application,omitempty"`
	Group int32 `json:"group"`
	Workspace int32 `json:"workspace"`
	Name string `json:"name"`
	Names []string `json:"names,omitempty"`
	ParentName NullableString `json:"parent_name,omitempty"`
}

// NewTrashContents instantiates a new TrashContents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrashContents(id int32, userWhoTrashed string, trashItemType string, trashItemId int32, trashedAt time.Time, group int32, workspace int32, name string) *TrashContents {
	this := TrashContents{}
	this.Id = id
	this.UserWhoTrashed = userWhoTrashed
	this.TrashItemType = trashItemType
	this.TrashItemId = trashItemId
	this.TrashedAt = trashedAt
	this.Group = group
	this.Workspace = workspace
	this.Name = name
	return &this
}

// NewTrashContentsWithDefaults instantiates a new TrashContents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashContentsWithDefaults() *TrashContents {
	this := TrashContents{}
	return &this
}

// GetId returns the Id field value
func (o *TrashContents) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrashContents) SetId(v int32) {
	o.Id = v
}

// GetUserWhoTrashed returns the UserWhoTrashed field value
func (o *TrashContents) GetUserWhoTrashed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserWhoTrashed
}

// GetUserWhoTrashedOk returns a tuple with the UserWhoTrashed field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetUserWhoTrashedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserWhoTrashed, true
}

// SetUserWhoTrashed sets field value
func (o *TrashContents) SetUserWhoTrashed(v string) {
	o.UserWhoTrashed = v
}

// GetTrashItemType returns the TrashItemType field value
func (o *TrashContents) GetTrashItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrashItemType
}

// GetTrashItemTypeOk returns a tuple with the TrashItemType field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetTrashItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrashItemType, true
}

// SetTrashItemType sets field value
func (o *TrashContents) SetTrashItemType(v string) {
	o.TrashItemType = v
}

// GetTrashItemId returns the TrashItemId field value
func (o *TrashContents) GetTrashItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrashItemId
}

// GetTrashItemIdOk returns a tuple with the TrashItemId field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetTrashItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrashItemId, true
}

// SetTrashItemId sets field value
func (o *TrashContents) SetTrashItemId(v int32) {
	o.TrashItemId = v
}

// GetParentTrashItemId returns the ParentTrashItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrashContents) GetParentTrashItemId() int32 {
	if o == nil || IsNil(o.ParentTrashItemId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentTrashItemId.Get()
}

// GetParentTrashItemIdOk returns a tuple with the ParentTrashItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrashContents) GetParentTrashItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTrashItemId.Get(), o.ParentTrashItemId.IsSet()
}

// HasParentTrashItemId returns a boolean if a field has been set.
func (o *TrashContents) HasParentTrashItemId() bool {
	if o != nil && o.ParentTrashItemId.IsSet() {
		return true
	}

	return false
}

// SetParentTrashItemId gets a reference to the given NullableInt32 and assigns it to the ParentTrashItemId field.
func (o *TrashContents) SetParentTrashItemId(v int32) {
	o.ParentTrashItemId.Set(&v)
}
// SetParentTrashItemIdNil sets the value for ParentTrashItemId to be an explicit nil
func (o *TrashContents) SetParentTrashItemIdNil() {
	o.ParentTrashItemId.Set(nil)
}

// UnsetParentTrashItemId ensures that no value is present for ParentTrashItemId, not even an explicit nil
func (o *TrashContents) UnsetParentTrashItemId() {
	o.ParentTrashItemId.Unset()
}

// GetTrashedAt returns the TrashedAt field value
func (o *TrashContents) GetTrashedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TrashedAt
}

// GetTrashedAtOk returns a tuple with the TrashedAt field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetTrashedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrashedAt, true
}

// SetTrashedAt sets field value
func (o *TrashContents) SetTrashedAt(v time.Time) {
	o.TrashedAt = v
}

// GetApplication returns the Application field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrashContents) GetApplication() int32 {
	if o == nil || IsNil(o.Application.Get()) {
		var ret int32
		return ret
	}
	return *o.Application.Get()
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrashContents) GetApplicationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Application.Get(), o.Application.IsSet()
}

// HasApplication returns a boolean if a field has been set.
func (o *TrashContents) HasApplication() bool {
	if o != nil && o.Application.IsSet() {
		return true
	}

	return false
}

// SetApplication gets a reference to the given NullableInt32 and assigns it to the Application field.
func (o *TrashContents) SetApplication(v int32) {
	o.Application.Set(&v)
}
// SetApplicationNil sets the value for Application to be an explicit nil
func (o *TrashContents) SetApplicationNil() {
	o.Application.Set(nil)
}

// UnsetApplication ensures that no value is present for Application, not even an explicit nil
func (o *TrashContents) UnsetApplication() {
	o.Application.Unset()
}

// GetGroup returns the Group field value
func (o *TrashContents) GetGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *TrashContents) SetGroup(v int32) {
	o.Group = v
}

// GetWorkspace returns the Workspace field value
func (o *TrashContents) GetWorkspace() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetWorkspaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace, true
}

// SetWorkspace sets field value
func (o *TrashContents) SetWorkspace(v int32) {
	o.Workspace = v
}

// GetName returns the Name field value
func (o *TrashContents) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrashContents) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrashContents) SetName(v string) {
	o.Name = v
}

// GetNames returns the Names field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrashContents) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrashContents) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *TrashContents) HasNames() bool {
	if o != nil && IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *TrashContents) SetNames(v []string) {
	o.Names = v
}

// GetParentName returns the ParentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrashContents) GetParentName() string {
	if o == nil || IsNil(o.ParentName.Get()) {
		var ret string
		return ret
	}
	return *o.ParentName.Get()
}

// GetParentNameOk returns a tuple with the ParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrashContents) GetParentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentName.Get(), o.ParentName.IsSet()
}

// HasParentName returns a boolean if a field has been set.
func (o *TrashContents) HasParentName() bool {
	if o != nil && o.ParentName.IsSet() {
		return true
	}

	return false
}

// SetParentName gets a reference to the given NullableString and assigns it to the ParentName field.
func (o *TrashContents) SetParentName(v string) {
	o.ParentName.Set(&v)
}
// SetParentNameNil sets the value for ParentName to be an explicit nil
func (o *TrashContents) SetParentNameNil() {
	o.ParentName.Set(nil)
}

// UnsetParentName ensures that no value is present for ParentName, not even an explicit nil
func (o *TrashContents) UnsetParentName() {
	o.ParentName.Unset()
}

func (o TrashContents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrashContents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: user_who_trashed is readOnly
	// skip: trash_item_type is readOnly
	toSerialize["trash_item_id"] = o.TrashItemId
	if o.ParentTrashItemId.IsSet() {
		toSerialize["parent_trash_item_id"] = o.ParentTrashItemId.Get()
	}
	// skip: trashed_at is readOnly
	if o.Application.IsSet() {
		toSerialize["application"] = o.Application.Get()
	}
	toSerialize["group"] = o.Group
	toSerialize["workspace"] = o.Workspace
	toSerialize["name"] = o.Name
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.ParentName.IsSet() {
		toSerialize["parent_name"] = o.ParentName.Get()
	}
	return toSerialize, nil
}

type NullableTrashContents struct {
	value *TrashContents
	isSet bool
}

func (v NullableTrashContents) Get() *TrashContents {
	return v.value
}

func (v *NullableTrashContents) Set(val *TrashContents) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashContents) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashContents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashContents(val *TrashContents) *NullableTrashContents {
	return &NullableTrashContents{value: val, isSet: true}
}

func (v NullableTrashContents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashContents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


