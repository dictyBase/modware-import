/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DatabaseApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseApplication{}

// DatabaseApplication struct for DatabaseApplication
type DatabaseApplication struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Order int32 `json:"order"`
	Type string `json:"type"`
	Group ApplicationGroup `json:"group"`
	Workspace ApplicationWorkspace `json:"workspace"`
	// This field is specific to the `database` application and contains an array of tables that are in the database.
	Tables []Table `json:"tables"`
}

// NewDatabaseApplication instantiates a new DatabaseApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseApplication(id int32, name string, order int32, type_ string, group ApplicationGroup, workspace ApplicationWorkspace, tables []Table) *DatabaseApplication {
	this := DatabaseApplication{}
	this.Id = id
	this.Name = name
	this.Order = order
	this.Type = type_
	this.Group = group
	this.Workspace = workspace
	this.Tables = tables
	return &this
}

// NewDatabaseApplicationWithDefaults instantiates a new DatabaseApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseApplicationWithDefaults() *DatabaseApplication {
	this := DatabaseApplication{}
	return &this
}

// GetId returns the Id field value
func (o *DatabaseApplication) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DatabaseApplication) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DatabaseApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseApplication) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value
func (o *DatabaseApplication) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *DatabaseApplication) SetOrder(v int32) {
	o.Order = v
}

// GetType returns the Type field value
func (o *DatabaseApplication) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatabaseApplication) SetType(v string) {
	o.Type = v
}

// GetGroup returns the Group field value
func (o *DatabaseApplication) GetGroup() ApplicationGroup {
	if o == nil {
		var ret ApplicationGroup
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetGroupOk() (*ApplicationGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *DatabaseApplication) SetGroup(v ApplicationGroup) {
	o.Group = v
}

// GetWorkspace returns the Workspace field value
func (o *DatabaseApplication) GetWorkspace() ApplicationWorkspace {
	if o == nil {
		var ret ApplicationWorkspace
		return ret
	}

	return o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetWorkspaceOk() (*ApplicationWorkspace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace, true
}

// SetWorkspace sets field value
func (o *DatabaseApplication) SetWorkspace(v ApplicationWorkspace) {
	o.Workspace = v
}

// GetTables returns the Tables field value
func (o *DatabaseApplication) GetTables() []Table {
	if o == nil {
		var ret []Table
		return ret
	}

	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value
// and a boolean to check if the value has been set.
func (o *DatabaseApplication) GetTablesOk() ([]Table, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tables, true
}

// SetTables sets field value
func (o *DatabaseApplication) SetTables(v []Table) {
	o.Tables = v
}

func (o DatabaseApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["order"] = o.Order
	// skip: type is readOnly
	toSerialize["group"] = o.Group
	toSerialize["workspace"] = o.Workspace
	// skip: tables is readOnly
	return toSerialize, nil
}

type NullableDatabaseApplication struct {
	value *DatabaseApplication
	isSet bool
}

func (v NullableDatabaseApplication) Get() *DatabaseApplication {
	return v.value
}

func (v *NullableDatabaseApplication) Set(val *DatabaseApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseApplication(val *DatabaseApplication) *NullableDatabaseApplication {
	return &NullableDatabaseApplication{value: val, isSet: true}
}

func (v NullableDatabaseApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


