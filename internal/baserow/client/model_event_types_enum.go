/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EventTypesEnum * `rows.created` - rows.created * `rows.updated` - rows.updated * `rows.deleted` - rows.deleted
type EventTypesEnum string

// List of EventTypesEnum
const (
	CREATED EventTypesEnum = "rows.created"
	UPDATED EventTypesEnum = "rows.updated"
	DELETED EventTypesEnum = "rows.deleted"
)

// All allowed values of EventTypesEnum enum
var AllowedEventTypesEnumEnumValues = []EventTypesEnum{
	"rows.created",
	"rows.updated",
	"rows.deleted",
}

func (v *EventTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventTypesEnum(value)
	for _, existing := range AllowedEventTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventTypesEnum", value)
}

// NewEventTypesEnumFromValue returns a pointer to a valid EventTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypesEnumFromValue(v string) (*EventTypesEnum, error) {
	ev := EventTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventTypesEnum: valid values are %v", v, AllowedEventTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventTypesEnum) IsValid() bool {
	for _, existing := range AllowedEventTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventTypesEnum value
func (v EventTypesEnum) Ptr() *EventTypesEnum {
	return &v
}

type NullableEventTypesEnum struct {
	value *EventTypesEnum
	isSet bool
}

func (v NullableEventTypesEnum) Get() *EventTypesEnum {
	return v.value
}

func (v *NullableEventTypesEnum) Set(val *EventTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypesEnum(val *EventTypesEnum) *NullableEventTypesEnum {
	return &NullableEventTypesEnum{value: val, isSet: true}
}

func (v NullableEventTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

