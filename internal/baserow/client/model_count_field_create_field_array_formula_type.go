/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CountFieldCreateFieldArrayFormulaType - struct for CountFieldCreateFieldArrayFormulaType
type CountFieldCreateFieldArrayFormulaType struct {
	ArrayFormulaTypeEnum *ArrayFormulaTypeEnum
	NullEnum *NullEnum
}

// ArrayFormulaTypeEnumAsCountFieldCreateFieldArrayFormulaType is a convenience function that returns ArrayFormulaTypeEnum wrapped in CountFieldCreateFieldArrayFormulaType
func ArrayFormulaTypeEnumAsCountFieldCreateFieldArrayFormulaType(v *ArrayFormulaTypeEnum) CountFieldCreateFieldArrayFormulaType {
	return CountFieldCreateFieldArrayFormulaType{
		ArrayFormulaTypeEnum: v,
	}
}

// NullEnumAsCountFieldCreateFieldArrayFormulaType is a convenience function that returns NullEnum wrapped in CountFieldCreateFieldArrayFormulaType
func NullEnumAsCountFieldCreateFieldArrayFormulaType(v *NullEnum) CountFieldCreateFieldArrayFormulaType {
	return CountFieldCreateFieldArrayFormulaType{
		NullEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CountFieldCreateFieldArrayFormulaType) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayFormulaTypeEnum
	err = newStrictDecoder(data).Decode(&dst.ArrayFormulaTypeEnum)
	if err == nil {
		jsonArrayFormulaTypeEnum, _ := json.Marshal(dst.ArrayFormulaTypeEnum)
		if string(jsonArrayFormulaTypeEnum) == "{}" { // empty struct
			dst.ArrayFormulaTypeEnum = nil
		} else {
			match++
		}
	} else {
		dst.ArrayFormulaTypeEnum = nil
	}

	// try to unmarshal data into NullEnum
	err = newStrictDecoder(data).Decode(&dst.NullEnum)
	if err == nil {
		jsonNullEnum, _ := json.Marshal(dst.NullEnum)
		if string(jsonNullEnum) == "{}" { // empty struct
			dst.NullEnum = nil
		} else {
			match++
		}
	} else {
		dst.NullEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayFormulaTypeEnum = nil
		dst.NullEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CountFieldCreateFieldArrayFormulaType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CountFieldCreateFieldArrayFormulaType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CountFieldCreateFieldArrayFormulaType) MarshalJSON() ([]byte, error) {
	if src.ArrayFormulaTypeEnum != nil {
		return json.Marshal(&src.ArrayFormulaTypeEnum)
	}

	if src.NullEnum != nil {
		return json.Marshal(&src.NullEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CountFieldCreateFieldArrayFormulaType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayFormulaTypeEnum != nil {
		return obj.ArrayFormulaTypeEnum
	}

	if obj.NullEnum != nil {
		return obj.NullEnum
	}

	// all schemas are nil
	return nil
}

type NullableCountFieldCreateFieldArrayFormulaType struct {
	value *CountFieldCreateFieldArrayFormulaType
	isSet bool
}

func (v NullableCountFieldCreateFieldArrayFormulaType) Get() *CountFieldCreateFieldArrayFormulaType {
	return v.value
}

func (v *NullableCountFieldCreateFieldArrayFormulaType) Set(val *CountFieldCreateFieldArrayFormulaType) {
	v.value = val
	v.isSet = true
}

func (v NullableCountFieldCreateFieldArrayFormulaType) IsSet() bool {
	return v.isSet
}

func (v *NullableCountFieldCreateFieldArrayFormulaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountFieldCreateFieldArrayFormulaType(val *CountFieldCreateFieldArrayFormulaType) *NullableCountFieldCreateFieldArrayFormulaType {
	return &NullableCountFieldCreateFieldArrayFormulaType{value: val, isSet: true}
}

func (v NullableCountFieldCreateFieldArrayFormulaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountFieldCreateFieldArrayFormulaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


