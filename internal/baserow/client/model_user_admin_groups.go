/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UserAdminGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAdminGroups{}

// UserAdminGroups struct for UserAdminGroups
type UserAdminGroups struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	// The permissions that the user has within the workspace.
	Permissions *string `json:"permissions,omitempty"`
}

// NewUserAdminGroups instantiates a new UserAdminGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAdminGroups(id int32, name string) *UserAdminGroups {
	this := UserAdminGroups{}
	this.Id = id
	this.Name = name
	return &this
}

// NewUserAdminGroupsWithDefaults instantiates a new UserAdminGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAdminGroupsWithDefaults() *UserAdminGroups {
	this := UserAdminGroups{}
	return &this
}

// GetId returns the Id field value
func (o *UserAdminGroups) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserAdminGroups) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserAdminGroups) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UserAdminGroups) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserAdminGroups) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserAdminGroups) SetName(v string) {
	o.Name = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UserAdminGroups) GetPermissions() string {
	if o == nil || IsNil(o.Permissions) {
		var ret string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAdminGroups) GetPermissionsOk() (*string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UserAdminGroups) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given string and assigns it to the Permissions field.
func (o *UserAdminGroups) SetPermissions(v string) {
	o.Permissions = &v
}

func (o UserAdminGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAdminGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableUserAdminGroups struct {
	value *UserAdminGroups
	isSet bool
}

func (v NullableUserAdminGroups) Get() *UserAdminGroups {
	return v.value
}

func (v *NullableUserAdminGroups) Set(val *UserAdminGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAdminGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAdminGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAdminGroups(val *UserAdminGroups) *NullableUserAdminGroups {
	return &NullableUserAdminGroups{value: val, isSet: true}
}

func (v NullableUserAdminGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAdminGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


