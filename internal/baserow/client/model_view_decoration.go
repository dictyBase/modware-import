/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ViewDecoration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewDecoration{}

// ViewDecoration struct for ViewDecoration
type ViewDecoration struct {
	Id int32 `json:"id"`
	// The view to which the decoration applies. Each view can have his own decorations.
	View *int32 `json:"view,omitempty"`
	// The decorator type. This is then interpreted by the frontend to display the decoration.
	Type *string `json:"type,omitempty"`
	// The value provider type that gives the value to the decorator.
	ValueProviderType *string `json:"value_provider_type,omitempty"`
	// The configuration consumed by the value provider.
	ValueProviderConf map[string]interface{} `json:"value_provider_conf,omitempty"`
	// The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
	Order *int32 `json:"order,omitempty"`
}

// NewViewDecoration instantiates a new ViewDecoration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewDecoration(id int32) *ViewDecoration {
	this := ViewDecoration{}
	this.Id = id
	return &this
}

// NewViewDecorationWithDefaults instantiates a new ViewDecoration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewDecorationWithDefaults() *ViewDecoration {
	this := ViewDecoration{}
	return &this
}

// GetId returns the Id field value
func (o *ViewDecoration) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ViewDecoration) SetId(v int32) {
	o.Id = v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ViewDecoration) GetView() int32 {
	if o == nil || IsNil(o.View) {
		var ret int32
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetViewOk() (*int32, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ViewDecoration) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given int32 and assigns it to the View field.
func (o *ViewDecoration) SetView(v int32) {
	o.View = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewDecoration) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewDecoration) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewDecoration) SetType(v string) {
	o.Type = &v
}

// GetValueProviderType returns the ValueProviderType field value if set, zero value otherwise.
func (o *ViewDecoration) GetValueProviderType() string {
	if o == nil || IsNil(o.ValueProviderType) {
		var ret string
		return ret
	}
	return *o.ValueProviderType
}

// GetValueProviderTypeOk returns a tuple with the ValueProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetValueProviderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueProviderType) {
		return nil, false
	}
	return o.ValueProviderType, true
}

// HasValueProviderType returns a boolean if a field has been set.
func (o *ViewDecoration) HasValueProviderType() bool {
	if o != nil && !IsNil(o.ValueProviderType) {
		return true
	}

	return false
}

// SetValueProviderType gets a reference to the given string and assigns it to the ValueProviderType field.
func (o *ViewDecoration) SetValueProviderType(v string) {
	o.ValueProviderType = &v
}

// GetValueProviderConf returns the ValueProviderConf field value if set, zero value otherwise.
func (o *ViewDecoration) GetValueProviderConf() map[string]interface{} {
	if o == nil || IsNil(o.ValueProviderConf) {
		var ret map[string]interface{}
		return ret
	}
	return o.ValueProviderConf
}

// GetValueProviderConfOk returns a tuple with the ValueProviderConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetValueProviderConfOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ValueProviderConf) {
		return map[string]interface{}{}, false
	}
	return o.ValueProviderConf, true
}

// HasValueProviderConf returns a boolean if a field has been set.
func (o *ViewDecoration) HasValueProviderConf() bool {
	if o != nil && !IsNil(o.ValueProviderConf) {
		return true
	}

	return false
}

// SetValueProviderConf gets a reference to the given map[string]interface{} and assigns it to the ValueProviderConf field.
func (o *ViewDecoration) SetValueProviderConf(v map[string]interface{}) {
	o.ValueProviderConf = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ViewDecoration) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewDecoration) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ViewDecoration) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *ViewDecoration) SetOrder(v int32) {
	o.Order = &v
}

func (o ViewDecoration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewDecoration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ValueProviderType) {
		toSerialize["value_provider_type"] = o.ValueProviderType
	}
	if !IsNil(o.ValueProviderConf) {
		toSerialize["value_provider_conf"] = o.ValueProviderConf
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableViewDecoration struct {
	value *ViewDecoration
	isSet bool
}

func (v NullableViewDecoration) Get() *ViewDecoration {
	return v.value
}

func (v *NullableViewDecoration) Set(val *ViewDecoration) {
	v.value = val
	v.isSet = true
}

func (v NullableViewDecoration) IsSet() bool {
	return v.isSet
}

func (v *NullableViewDecoration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewDecoration(val *ViewDecoration) *NullableViewDecoration {
	return &NullableViewDecoration{value: val, isSet: true}
}

func (v NullableViewDecoration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewDecoration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


