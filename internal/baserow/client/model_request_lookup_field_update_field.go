/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RequestLookupFieldUpdateField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestLookupFieldUpdateField{}

// RequestLookupFieldUpdateField struct for RequestLookupFieldUpdateField
type RequestLookupFieldUpdateField struct {
	Name *string `json:"name,omitempty"`
	Type *Type712Enum `json:"type,omitempty"`
	// Indicates if the time zone should be shown.
	DateShowTzinfo NullableBool `json:"date_show_tzinfo,omitempty"`
	DateFormat NullableCountFieldCreateFieldDateFormat `json:"date_format,omitempty"`
	ArrayFormulaType NullableCountFieldCreateFieldArrayFormulaType `json:"array_formula_type,omitempty"`
	// Force a timezone for the field overriding user profile settings.
	DateForceTimezone NullableString `json:"date_force_timezone,omitempty"`
	// Indicates if the field also includes a time.
	DateIncludeTime NullableBool `json:"date_include_time,omitempty"`
	Nullable bool `json:"nullable"`
	DateTimeFormat NullableCountFieldCreateFieldDateTimeFormat `json:"date_time_format,omitempty"`
	NumberDecimalPlaces NullableCountFieldCreateFieldNumberDecimalPlaces `json:"number_decimal_places,omitempty"`
	Error NullableString `json:"error,omitempty"`
	// The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.
	ThroughFieldId NullableInt32 `json:"through_field_id,omitempty"`
	// The name of the link row field to lookup values for.
	ThroughFieldName NullableString `json:"through_field_name,omitempty"`
	// The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.
	TargetFieldId NullableInt32 `json:"target_field_id,omitempty"`
	// The name of the field in the table linked to by the through_field to lookup.
	TargetFieldName NullableString `json:"target_field_name,omitempty"`
	FormulaType *FormulaTypeEnum `json:"formula_type,omitempty"`
}

// NewRequestLookupFieldUpdateField instantiates a new RequestLookupFieldUpdateField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestLookupFieldUpdateField(nullable bool) *RequestLookupFieldUpdateField {
	this := RequestLookupFieldUpdateField{}
	this.Nullable = nullable
	return &this
}

// NewRequestLookupFieldUpdateFieldWithDefaults instantiates a new RequestLookupFieldUpdateField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestLookupFieldUpdateFieldWithDefaults() *RequestLookupFieldUpdateField {
	this := RequestLookupFieldUpdateField{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RequestLookupFieldUpdateField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestLookupFieldUpdateField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RequestLookupFieldUpdateField) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RequestLookupFieldUpdateField) GetType() Type712Enum {
	if o == nil || IsNil(o.Type) {
		var ret Type712Enum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestLookupFieldUpdateField) GetTypeOk() (*Type712Enum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Type712Enum and assigns it to the Type field.
func (o *RequestLookupFieldUpdateField) SetType(v Type712Enum) {
	o.Type = &v
}

// GetDateShowTzinfo returns the DateShowTzinfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetDateShowTzinfo() bool {
	if o == nil || IsNil(o.DateShowTzinfo.Get()) {
		var ret bool
		return ret
	}
	return *o.DateShowTzinfo.Get()
}

// GetDateShowTzinfoOk returns a tuple with the DateShowTzinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetDateShowTzinfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateShowTzinfo.Get(), o.DateShowTzinfo.IsSet()
}

// HasDateShowTzinfo returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasDateShowTzinfo() bool {
	if o != nil && o.DateShowTzinfo.IsSet() {
		return true
	}

	return false
}

// SetDateShowTzinfo gets a reference to the given NullableBool and assigns it to the DateShowTzinfo field.
func (o *RequestLookupFieldUpdateField) SetDateShowTzinfo(v bool) {
	o.DateShowTzinfo.Set(&v)
}
// SetDateShowTzinfoNil sets the value for DateShowTzinfo to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetDateShowTzinfoNil() {
	o.DateShowTzinfo.Set(nil)
}

// UnsetDateShowTzinfo ensures that no value is present for DateShowTzinfo, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetDateShowTzinfo() {
	o.DateShowTzinfo.Unset()
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetDateFormat() CountFieldCreateFieldDateFormat {
	if o == nil || IsNil(o.DateFormat.Get()) {
		var ret CountFieldCreateFieldDateFormat
		return ret
	}
	return *o.DateFormat.Get()
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetDateFormatOk() (*CountFieldCreateFieldDateFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateFormat.Get(), o.DateFormat.IsSet()
}

// HasDateFormat returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasDateFormat() bool {
	if o != nil && o.DateFormat.IsSet() {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given NullableCountFieldCreateFieldDateFormat and assigns it to the DateFormat field.
func (o *RequestLookupFieldUpdateField) SetDateFormat(v CountFieldCreateFieldDateFormat) {
	o.DateFormat.Set(&v)
}
// SetDateFormatNil sets the value for DateFormat to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetDateFormatNil() {
	o.DateFormat.Set(nil)
}

// UnsetDateFormat ensures that no value is present for DateFormat, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetDateFormat() {
	o.DateFormat.Unset()
}

// GetArrayFormulaType returns the ArrayFormulaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetArrayFormulaType() CountFieldCreateFieldArrayFormulaType {
	if o == nil || IsNil(o.ArrayFormulaType.Get()) {
		var ret CountFieldCreateFieldArrayFormulaType
		return ret
	}
	return *o.ArrayFormulaType.Get()
}

// GetArrayFormulaTypeOk returns a tuple with the ArrayFormulaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetArrayFormulaTypeOk() (*CountFieldCreateFieldArrayFormulaType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArrayFormulaType.Get(), o.ArrayFormulaType.IsSet()
}

// HasArrayFormulaType returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasArrayFormulaType() bool {
	if o != nil && o.ArrayFormulaType.IsSet() {
		return true
	}

	return false
}

// SetArrayFormulaType gets a reference to the given NullableCountFieldCreateFieldArrayFormulaType and assigns it to the ArrayFormulaType field.
func (o *RequestLookupFieldUpdateField) SetArrayFormulaType(v CountFieldCreateFieldArrayFormulaType) {
	o.ArrayFormulaType.Set(&v)
}
// SetArrayFormulaTypeNil sets the value for ArrayFormulaType to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetArrayFormulaTypeNil() {
	o.ArrayFormulaType.Set(nil)
}

// UnsetArrayFormulaType ensures that no value is present for ArrayFormulaType, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetArrayFormulaType() {
	o.ArrayFormulaType.Unset()
}

// GetDateForceTimezone returns the DateForceTimezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetDateForceTimezone() string {
	if o == nil || IsNil(o.DateForceTimezone.Get()) {
		var ret string
		return ret
	}
	return *o.DateForceTimezone.Get()
}

// GetDateForceTimezoneOk returns a tuple with the DateForceTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetDateForceTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateForceTimezone.Get(), o.DateForceTimezone.IsSet()
}

// HasDateForceTimezone returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasDateForceTimezone() bool {
	if o != nil && o.DateForceTimezone.IsSet() {
		return true
	}

	return false
}

// SetDateForceTimezone gets a reference to the given NullableString and assigns it to the DateForceTimezone field.
func (o *RequestLookupFieldUpdateField) SetDateForceTimezone(v string) {
	o.DateForceTimezone.Set(&v)
}
// SetDateForceTimezoneNil sets the value for DateForceTimezone to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetDateForceTimezoneNil() {
	o.DateForceTimezone.Set(nil)
}

// UnsetDateForceTimezone ensures that no value is present for DateForceTimezone, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetDateForceTimezone() {
	o.DateForceTimezone.Unset()
}

// GetDateIncludeTime returns the DateIncludeTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetDateIncludeTime() bool {
	if o == nil || IsNil(o.DateIncludeTime.Get()) {
		var ret bool
		return ret
	}
	return *o.DateIncludeTime.Get()
}

// GetDateIncludeTimeOk returns a tuple with the DateIncludeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetDateIncludeTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateIncludeTime.Get(), o.DateIncludeTime.IsSet()
}

// HasDateIncludeTime returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasDateIncludeTime() bool {
	if o != nil && o.DateIncludeTime.IsSet() {
		return true
	}

	return false
}

// SetDateIncludeTime gets a reference to the given NullableBool and assigns it to the DateIncludeTime field.
func (o *RequestLookupFieldUpdateField) SetDateIncludeTime(v bool) {
	o.DateIncludeTime.Set(&v)
}
// SetDateIncludeTimeNil sets the value for DateIncludeTime to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetDateIncludeTimeNil() {
	o.DateIncludeTime.Set(nil)
}

// UnsetDateIncludeTime ensures that no value is present for DateIncludeTime, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetDateIncludeTime() {
	o.DateIncludeTime.Unset()
}

// GetNullable returns the Nullable field value
func (o *RequestLookupFieldUpdateField) GetNullable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Nullable
}

// GetNullableOk returns a tuple with the Nullable field value
// and a boolean to check if the value has been set.
func (o *RequestLookupFieldUpdateField) GetNullableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nullable, true
}

// SetNullable sets field value
func (o *RequestLookupFieldUpdateField) SetNullable(v bool) {
	o.Nullable = v
}

// GetDateTimeFormat returns the DateTimeFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetDateTimeFormat() CountFieldCreateFieldDateTimeFormat {
	if o == nil || IsNil(o.DateTimeFormat.Get()) {
		var ret CountFieldCreateFieldDateTimeFormat
		return ret
	}
	return *o.DateTimeFormat.Get()
}

// GetDateTimeFormatOk returns a tuple with the DateTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetDateTimeFormatOk() (*CountFieldCreateFieldDateTimeFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateTimeFormat.Get(), o.DateTimeFormat.IsSet()
}

// HasDateTimeFormat returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasDateTimeFormat() bool {
	if o != nil && o.DateTimeFormat.IsSet() {
		return true
	}

	return false
}

// SetDateTimeFormat gets a reference to the given NullableCountFieldCreateFieldDateTimeFormat and assigns it to the DateTimeFormat field.
func (o *RequestLookupFieldUpdateField) SetDateTimeFormat(v CountFieldCreateFieldDateTimeFormat) {
	o.DateTimeFormat.Set(&v)
}
// SetDateTimeFormatNil sets the value for DateTimeFormat to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetDateTimeFormatNil() {
	o.DateTimeFormat.Set(nil)
}

// UnsetDateTimeFormat ensures that no value is present for DateTimeFormat, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetDateTimeFormat() {
	o.DateTimeFormat.Unset()
}

// GetNumberDecimalPlaces returns the NumberDecimalPlaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetNumberDecimalPlaces() CountFieldCreateFieldNumberDecimalPlaces {
	if o == nil || IsNil(o.NumberDecimalPlaces.Get()) {
		var ret CountFieldCreateFieldNumberDecimalPlaces
		return ret
	}
	return *o.NumberDecimalPlaces.Get()
}

// GetNumberDecimalPlacesOk returns a tuple with the NumberDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetNumberDecimalPlacesOk() (*CountFieldCreateFieldNumberDecimalPlaces, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberDecimalPlaces.Get(), o.NumberDecimalPlaces.IsSet()
}

// HasNumberDecimalPlaces returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasNumberDecimalPlaces() bool {
	if o != nil && o.NumberDecimalPlaces.IsSet() {
		return true
	}

	return false
}

// SetNumberDecimalPlaces gets a reference to the given NullableCountFieldCreateFieldNumberDecimalPlaces and assigns it to the NumberDecimalPlaces field.
func (o *RequestLookupFieldUpdateField) SetNumberDecimalPlaces(v CountFieldCreateFieldNumberDecimalPlaces) {
	o.NumberDecimalPlaces.Set(&v)
}
// SetNumberDecimalPlacesNil sets the value for NumberDecimalPlaces to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetNumberDecimalPlacesNil() {
	o.NumberDecimalPlaces.Set(nil)
}

// UnsetNumberDecimalPlaces ensures that no value is present for NumberDecimalPlaces, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetNumberDecimalPlaces() {
	o.NumberDecimalPlaces.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *RequestLookupFieldUpdateField) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetError() {
	o.Error.Unset()
}

// GetThroughFieldId returns the ThroughFieldId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetThroughFieldId() int32 {
	if o == nil || IsNil(o.ThroughFieldId.Get()) {
		var ret int32
		return ret
	}
	return *o.ThroughFieldId.Get()
}

// GetThroughFieldIdOk returns a tuple with the ThroughFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetThroughFieldIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThroughFieldId.Get(), o.ThroughFieldId.IsSet()
}

// HasThroughFieldId returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasThroughFieldId() bool {
	if o != nil && o.ThroughFieldId.IsSet() {
		return true
	}

	return false
}

// SetThroughFieldId gets a reference to the given NullableInt32 and assigns it to the ThroughFieldId field.
func (o *RequestLookupFieldUpdateField) SetThroughFieldId(v int32) {
	o.ThroughFieldId.Set(&v)
}
// SetThroughFieldIdNil sets the value for ThroughFieldId to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetThroughFieldIdNil() {
	o.ThroughFieldId.Set(nil)
}

// UnsetThroughFieldId ensures that no value is present for ThroughFieldId, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetThroughFieldId() {
	o.ThroughFieldId.Unset()
}

// GetThroughFieldName returns the ThroughFieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetThroughFieldName() string {
	if o == nil || IsNil(o.ThroughFieldName.Get()) {
		var ret string
		return ret
	}
	return *o.ThroughFieldName.Get()
}

// GetThroughFieldNameOk returns a tuple with the ThroughFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetThroughFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThroughFieldName.Get(), o.ThroughFieldName.IsSet()
}

// HasThroughFieldName returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasThroughFieldName() bool {
	if o != nil && o.ThroughFieldName.IsSet() {
		return true
	}

	return false
}

// SetThroughFieldName gets a reference to the given NullableString and assigns it to the ThroughFieldName field.
func (o *RequestLookupFieldUpdateField) SetThroughFieldName(v string) {
	o.ThroughFieldName.Set(&v)
}
// SetThroughFieldNameNil sets the value for ThroughFieldName to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetThroughFieldNameNil() {
	o.ThroughFieldName.Set(nil)
}

// UnsetThroughFieldName ensures that no value is present for ThroughFieldName, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetThroughFieldName() {
	o.ThroughFieldName.Unset()
}

// GetTargetFieldId returns the TargetFieldId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetTargetFieldId() int32 {
	if o == nil || IsNil(o.TargetFieldId.Get()) {
		var ret int32
		return ret
	}
	return *o.TargetFieldId.Get()
}

// GetTargetFieldIdOk returns a tuple with the TargetFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetTargetFieldIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetFieldId.Get(), o.TargetFieldId.IsSet()
}

// HasTargetFieldId returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasTargetFieldId() bool {
	if o != nil && o.TargetFieldId.IsSet() {
		return true
	}

	return false
}

// SetTargetFieldId gets a reference to the given NullableInt32 and assigns it to the TargetFieldId field.
func (o *RequestLookupFieldUpdateField) SetTargetFieldId(v int32) {
	o.TargetFieldId.Set(&v)
}
// SetTargetFieldIdNil sets the value for TargetFieldId to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetTargetFieldIdNil() {
	o.TargetFieldId.Set(nil)
}

// UnsetTargetFieldId ensures that no value is present for TargetFieldId, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetTargetFieldId() {
	o.TargetFieldId.Unset()
}

// GetTargetFieldName returns the TargetFieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestLookupFieldUpdateField) GetTargetFieldName() string {
	if o == nil || IsNil(o.TargetFieldName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetFieldName.Get()
}

// GetTargetFieldNameOk returns a tuple with the TargetFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestLookupFieldUpdateField) GetTargetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetFieldName.Get(), o.TargetFieldName.IsSet()
}

// HasTargetFieldName returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasTargetFieldName() bool {
	if o != nil && o.TargetFieldName.IsSet() {
		return true
	}

	return false
}

// SetTargetFieldName gets a reference to the given NullableString and assigns it to the TargetFieldName field.
func (o *RequestLookupFieldUpdateField) SetTargetFieldName(v string) {
	o.TargetFieldName.Set(&v)
}
// SetTargetFieldNameNil sets the value for TargetFieldName to be an explicit nil
func (o *RequestLookupFieldUpdateField) SetTargetFieldNameNil() {
	o.TargetFieldName.Set(nil)
}

// UnsetTargetFieldName ensures that no value is present for TargetFieldName, not even an explicit nil
func (o *RequestLookupFieldUpdateField) UnsetTargetFieldName() {
	o.TargetFieldName.Unset()
}

// GetFormulaType returns the FormulaType field value if set, zero value otherwise.
func (o *RequestLookupFieldUpdateField) GetFormulaType() FormulaTypeEnum {
	if o == nil || IsNil(o.FormulaType) {
		var ret FormulaTypeEnum
		return ret
	}
	return *o.FormulaType
}

// GetFormulaTypeOk returns a tuple with the FormulaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestLookupFieldUpdateField) GetFormulaTypeOk() (*FormulaTypeEnum, bool) {
	if o == nil || IsNil(o.FormulaType) {
		return nil, false
	}
	return o.FormulaType, true
}

// HasFormulaType returns a boolean if a field has been set.
func (o *RequestLookupFieldUpdateField) HasFormulaType() bool {
	if o != nil && !IsNil(o.FormulaType) {
		return true
	}

	return false
}

// SetFormulaType gets a reference to the given FormulaTypeEnum and assigns it to the FormulaType field.
func (o *RequestLookupFieldUpdateField) SetFormulaType(v FormulaTypeEnum) {
	o.FormulaType = &v
}

func (o RequestLookupFieldUpdateField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestLookupFieldUpdateField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DateShowTzinfo.IsSet() {
		toSerialize["date_show_tzinfo"] = o.DateShowTzinfo.Get()
	}
	if o.DateFormat.IsSet() {
		toSerialize["date_format"] = o.DateFormat.Get()
	}
	if o.ArrayFormulaType.IsSet() {
		toSerialize["array_formula_type"] = o.ArrayFormulaType.Get()
	}
	if o.DateForceTimezone.IsSet() {
		toSerialize["date_force_timezone"] = o.DateForceTimezone.Get()
	}
	if o.DateIncludeTime.IsSet() {
		toSerialize["date_include_time"] = o.DateIncludeTime.Get()
	}
	// skip: nullable is readOnly
	if o.DateTimeFormat.IsSet() {
		toSerialize["date_time_format"] = o.DateTimeFormat.Get()
	}
	if o.NumberDecimalPlaces.IsSet() {
		toSerialize["number_decimal_places"] = o.NumberDecimalPlaces.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.ThroughFieldId.IsSet() {
		toSerialize["through_field_id"] = o.ThroughFieldId.Get()
	}
	if o.ThroughFieldName.IsSet() {
		toSerialize["through_field_name"] = o.ThroughFieldName.Get()
	}
	if o.TargetFieldId.IsSet() {
		toSerialize["target_field_id"] = o.TargetFieldId.Get()
	}
	if o.TargetFieldName.IsSet() {
		toSerialize["target_field_name"] = o.TargetFieldName.Get()
	}
	if !IsNil(o.FormulaType) {
		toSerialize["formula_type"] = o.FormulaType
	}
	return toSerialize, nil
}

type NullableRequestLookupFieldUpdateField struct {
	value *RequestLookupFieldUpdateField
	isSet bool
}

func (v NullableRequestLookupFieldUpdateField) Get() *RequestLookupFieldUpdateField {
	return v.value
}

func (v *NullableRequestLookupFieldUpdateField) Set(val *RequestLookupFieldUpdateField) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestLookupFieldUpdateField) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestLookupFieldUpdateField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestLookupFieldUpdateField(val *RequestLookupFieldUpdateField) *NullableRequestLookupFieldUpdateField {
	return &NullableRequestLookupFieldUpdateField{value: val, isSet: true}
}

func (v NullableRequestLookupFieldUpdateField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestLookupFieldUpdateField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


