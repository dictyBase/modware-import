/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TokenCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenCreate{}

// TokenCreate A mixin that allows us to rename the `group` field to `workspace` when serializing.
type TokenCreate struct {
	// The human readable name of the database token for the user.
	Name string `json:"name"`
	Group string `json:"group"`
	// Only the tables of the workspace can be accessed.
	Workspace int32 `json:"workspace"`
}

// NewTokenCreate instantiates a new TokenCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenCreate(name string, group string, workspace int32) *TokenCreate {
	this := TokenCreate{}
	this.Name = name
	this.Group = group
	this.Workspace = workspace
	return &this
}

// NewTokenCreateWithDefaults instantiates a new TokenCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenCreateWithDefaults() *TokenCreate {
	this := TokenCreate{}
	return &this
}

// GetName returns the Name field value
func (o *TokenCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenCreate) SetName(v string) {
	o.Name = v
}

// GetGroup returns the Group field value
func (o *TokenCreate) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *TokenCreate) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *TokenCreate) SetGroup(v string) {
	o.Group = v
}

// GetWorkspace returns the Workspace field value
func (o *TokenCreate) GetWorkspace() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value
// and a boolean to check if the value has been set.
func (o *TokenCreate) GetWorkspaceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace, true
}

// SetWorkspace sets field value
func (o *TokenCreate) SetWorkspace(v int32) {
	o.Workspace = v
}

func (o TokenCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	// skip: group is readOnly
	toSerialize["workspace"] = o.Workspace
	return toSerialize, nil
}

type NullableTokenCreate struct {
	value *TokenCreate
	isSet bool
}

func (v NullableTokenCreate) Get() *TokenCreate {
	return v.value
}

func (v *NullableTokenCreate) Set(val *TokenCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenCreate(val *TokenCreate) *NullableTokenCreate {
	return &NullableTokenCreate{value: val, isSet: true}
}

func (v NullableTokenCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


