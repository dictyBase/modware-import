/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MultipleSelectFieldCreateField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleSelectFieldCreateField{}

// MultipleSelectFieldCreateField struct for MultipleSelectFieldCreateField
type MultipleSelectFieldCreateField struct {
	Name string `json:"name"`
	Type Type712Enum `json:"type"`
	SelectOptions []SelectOption `json:"select_options,omitempty"`
}

// NewMultipleSelectFieldCreateField instantiates a new MultipleSelectFieldCreateField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleSelectFieldCreateField(name string, type_ Type712Enum) *MultipleSelectFieldCreateField {
	this := MultipleSelectFieldCreateField{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewMultipleSelectFieldCreateFieldWithDefaults instantiates a new MultipleSelectFieldCreateField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleSelectFieldCreateFieldWithDefaults() *MultipleSelectFieldCreateField {
	this := MultipleSelectFieldCreateField{}
	return &this
}

// GetName returns the Name field value
func (o *MultipleSelectFieldCreateField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MultipleSelectFieldCreateField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MultipleSelectFieldCreateField) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MultipleSelectFieldCreateField) GetType() Type712Enum {
	if o == nil {
		var ret Type712Enum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MultipleSelectFieldCreateField) GetTypeOk() (*Type712Enum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MultipleSelectFieldCreateField) SetType(v Type712Enum) {
	o.Type = v
}

// GetSelectOptions returns the SelectOptions field value if set, zero value otherwise.
func (o *MultipleSelectFieldCreateField) GetSelectOptions() []SelectOption {
	if o == nil || IsNil(o.SelectOptions) {
		var ret []SelectOption
		return ret
	}
	return o.SelectOptions
}

// GetSelectOptionsOk returns a tuple with the SelectOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleSelectFieldCreateField) GetSelectOptionsOk() ([]SelectOption, bool) {
	if o == nil || IsNil(o.SelectOptions) {
		return nil, false
	}
	return o.SelectOptions, true
}

// HasSelectOptions returns a boolean if a field has been set.
func (o *MultipleSelectFieldCreateField) HasSelectOptions() bool {
	if o != nil && !IsNil(o.SelectOptions) {
		return true
	}

	return false
}

// SetSelectOptions gets a reference to the given []SelectOption and assigns it to the SelectOptions field.
func (o *MultipleSelectFieldCreateField) SetSelectOptions(v []SelectOption) {
	o.SelectOptions = v
}

func (o MultipleSelectFieldCreateField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleSelectFieldCreateField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.SelectOptions) {
		toSerialize["select_options"] = o.SelectOptions
	}
	return toSerialize, nil
}

type NullableMultipleSelectFieldCreateField struct {
	value *MultipleSelectFieldCreateField
	isSet bool
}

func (v NullableMultipleSelectFieldCreateField) Get() *MultipleSelectFieldCreateField {
	return v.value
}

func (v *NullableMultipleSelectFieldCreateField) Set(val *MultipleSelectFieldCreateField) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleSelectFieldCreateField) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleSelectFieldCreateField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleSelectFieldCreateField(val *MultipleSelectFieldCreateField) *NullableMultipleSelectFieldCreateField {
	return &NullableMultipleSelectFieldCreateField{value: val, isSet: true}
}

func (v NullableMultipleSelectFieldCreateField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleSelectFieldCreateField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


