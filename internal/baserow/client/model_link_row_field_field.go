/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the LinkRowFieldField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkRowFieldField{}

// LinkRowFieldField struct for LinkRowFieldField
type LinkRowFieldField struct {
	Id int32 `json:"id"`
	TableId int32 `json:"table_id"`
	Name string `json:"name"`
	// Lowest first.
	Order int32 `json:"order"`
	// The type of the related field.
	Type string `json:"type"`
	// Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
	Primary *bool `json:"primary,omitempty"`
	// Indicates whether the field is a read only field. If true, it's not possible to update the cell value.
	ReadOnly bool `json:"read_only"`
	// The id of the linked table.
	LinkRowTableId NullableInt32 `json:"link_row_table_id,omitempty"`
	// The id of the related field.
	LinkRowRelatedFieldId NullableInt32 `json:"link_row_related_field_id"`
	// (Deprecated) The id of the linked table.
	LinkRowTable NullableInt32 `json:"link_row_table,omitempty"`
	// (Deprecated) The id of the related field.
	LinkRowRelatedField int32 `json:"link_row_related_field"`
}

// NewLinkRowFieldField instantiates a new LinkRowFieldField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkRowFieldField(id int32, tableId int32, name string, order int32, type_ string, readOnly bool, linkRowRelatedFieldId NullableInt32, linkRowRelatedField int32) *LinkRowFieldField {
	this := LinkRowFieldField{}
	this.Id = id
	this.TableId = tableId
	this.Name = name
	this.Order = order
	this.Type = type_
	this.ReadOnly = readOnly
	this.LinkRowRelatedFieldId = linkRowRelatedFieldId
	this.LinkRowRelatedField = linkRowRelatedField
	return &this
}

// NewLinkRowFieldFieldWithDefaults instantiates a new LinkRowFieldField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkRowFieldFieldWithDefaults() *LinkRowFieldField {
	this := LinkRowFieldField{}
	return &this
}

// GetId returns the Id field value
func (o *LinkRowFieldField) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LinkRowFieldField) SetId(v int32) {
	o.Id = v
}

// GetTableId returns the TableId field value
func (o *LinkRowFieldField) GetTableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetTableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableId, true
}

// SetTableId sets field value
func (o *LinkRowFieldField) SetTableId(v int32) {
	o.TableId = v
}

// GetName returns the Name field value
func (o *LinkRowFieldField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LinkRowFieldField) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value
func (o *LinkRowFieldField) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *LinkRowFieldField) SetOrder(v int32) {
	o.Order = v
}

// GetType returns the Type field value
func (o *LinkRowFieldField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LinkRowFieldField) SetType(v string) {
	o.Type = v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *LinkRowFieldField) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *LinkRowFieldField) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *LinkRowFieldField) SetPrimary(v bool) {
	o.Primary = &v
}

// GetReadOnly returns the ReadOnly field value
func (o *LinkRowFieldField) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *LinkRowFieldField) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetLinkRowTableId returns the LinkRowTableId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkRowFieldField) GetLinkRowTableId() int32 {
	if o == nil || IsNil(o.LinkRowTableId.Get()) {
		var ret int32
		return ret
	}
	return *o.LinkRowTableId.Get()
}

// GetLinkRowTableIdOk returns a tuple with the LinkRowTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkRowFieldField) GetLinkRowTableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkRowTableId.Get(), o.LinkRowTableId.IsSet()
}

// HasLinkRowTableId returns a boolean if a field has been set.
func (o *LinkRowFieldField) HasLinkRowTableId() bool {
	if o != nil && o.LinkRowTableId.IsSet() {
		return true
	}

	return false
}

// SetLinkRowTableId gets a reference to the given NullableInt32 and assigns it to the LinkRowTableId field.
func (o *LinkRowFieldField) SetLinkRowTableId(v int32) {
	o.LinkRowTableId.Set(&v)
}
// SetLinkRowTableIdNil sets the value for LinkRowTableId to be an explicit nil
func (o *LinkRowFieldField) SetLinkRowTableIdNil() {
	o.LinkRowTableId.Set(nil)
}

// UnsetLinkRowTableId ensures that no value is present for LinkRowTableId, not even an explicit nil
func (o *LinkRowFieldField) UnsetLinkRowTableId() {
	o.LinkRowTableId.Unset()
}

// GetLinkRowRelatedFieldId returns the LinkRowRelatedFieldId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *LinkRowFieldField) GetLinkRowRelatedFieldId() int32 {
	if o == nil || o.LinkRowRelatedFieldId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.LinkRowRelatedFieldId.Get()
}

// GetLinkRowRelatedFieldIdOk returns a tuple with the LinkRowRelatedFieldId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkRowFieldField) GetLinkRowRelatedFieldIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkRowRelatedFieldId.Get(), o.LinkRowRelatedFieldId.IsSet()
}

// SetLinkRowRelatedFieldId sets field value
func (o *LinkRowFieldField) SetLinkRowRelatedFieldId(v int32) {
	o.LinkRowRelatedFieldId.Set(&v)
}

// GetLinkRowTable returns the LinkRowTable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkRowFieldField) GetLinkRowTable() int32 {
	if o == nil || IsNil(o.LinkRowTable.Get()) {
		var ret int32
		return ret
	}
	return *o.LinkRowTable.Get()
}

// GetLinkRowTableOk returns a tuple with the LinkRowTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkRowFieldField) GetLinkRowTableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkRowTable.Get(), o.LinkRowTable.IsSet()
}

// HasLinkRowTable returns a boolean if a field has been set.
func (o *LinkRowFieldField) HasLinkRowTable() bool {
	if o != nil && o.LinkRowTable.IsSet() {
		return true
	}

	return false
}

// SetLinkRowTable gets a reference to the given NullableInt32 and assigns it to the LinkRowTable field.
func (o *LinkRowFieldField) SetLinkRowTable(v int32) {
	o.LinkRowTable.Set(&v)
}
// SetLinkRowTableNil sets the value for LinkRowTable to be an explicit nil
func (o *LinkRowFieldField) SetLinkRowTableNil() {
	o.LinkRowTable.Set(nil)
}

// UnsetLinkRowTable ensures that no value is present for LinkRowTable, not even an explicit nil
func (o *LinkRowFieldField) UnsetLinkRowTable() {
	o.LinkRowTable.Unset()
}

// GetLinkRowRelatedField returns the LinkRowRelatedField field value
func (o *LinkRowFieldField) GetLinkRowRelatedField() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LinkRowRelatedField
}

// GetLinkRowRelatedFieldOk returns a tuple with the LinkRowRelatedField field value
// and a boolean to check if the value has been set.
func (o *LinkRowFieldField) GetLinkRowRelatedFieldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkRowRelatedField, true
}

// SetLinkRowRelatedField sets field value
func (o *LinkRowFieldField) SetLinkRowRelatedField(v int32) {
	o.LinkRowRelatedField = v
}

func (o LinkRowFieldField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkRowFieldField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: table_id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["order"] = o.Order
	// skip: type is readOnly
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	// skip: read_only is readOnly
	if o.LinkRowTableId.IsSet() {
		toSerialize["link_row_table_id"] = o.LinkRowTableId.Get()
	}
	toSerialize["link_row_related_field_id"] = o.LinkRowRelatedFieldId.Get()
	if o.LinkRowTable.IsSet() {
		toSerialize["link_row_table"] = o.LinkRowTable.Get()
	}
	// skip: link_row_related_field is readOnly
	return toSerialize, nil
}

type NullableLinkRowFieldField struct {
	value *LinkRowFieldField
	isSet bool
}

func (v NullableLinkRowFieldField) Get() *LinkRowFieldField {
	return v.value
}

func (v *NullableLinkRowFieldField) Set(val *LinkRowFieldField) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkRowFieldField) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkRowFieldField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkRowFieldField(val *LinkRowFieldField) *NullableLinkRowFieldField {
	return &NullableLinkRowFieldField{value: val, isSet: true}
}

func (v NullableLinkRowFieldField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkRowFieldField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


