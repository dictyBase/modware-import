/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EmailTesterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailTesterResponse{}

// EmailTesterResponse struct for EmailTesterResponse
type EmailTesterResponse struct {
	// Whether or not the test email was sent successfully.
	Succeeded bool `json:"succeeded"`
	// The full stack trace and error message if the test email failed.
	ErrorStack NullableString `json:"error_stack,omitempty"`
	// The type of error that occurred if the test email failed.
	ErrorType NullableString `json:"error_type,omitempty"`
	// A short message describing the error that occured if the test email failed
	Error NullableString `json:"error,omitempty"`
}

// NewEmailTesterResponse instantiates a new EmailTesterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailTesterResponse(succeeded bool) *EmailTesterResponse {
	this := EmailTesterResponse{}
	this.Succeeded = succeeded
	return &this
}

// NewEmailTesterResponseWithDefaults instantiates a new EmailTesterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTesterResponseWithDefaults() *EmailTesterResponse {
	this := EmailTesterResponse{}
	return &this
}

// GetSucceeded returns the Succeeded field value
func (o *EmailTesterResponse) GetSucceeded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value
// and a boolean to check if the value has been set.
func (o *EmailTesterResponse) GetSucceededOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Succeeded, true
}

// SetSucceeded sets field value
func (o *EmailTesterResponse) SetSucceeded(v bool) {
	o.Succeeded = v
}

// GetErrorStack returns the ErrorStack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailTesterResponse) GetErrorStack() string {
	if o == nil || IsNil(o.ErrorStack.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorStack.Get()
}

// GetErrorStackOk returns a tuple with the ErrorStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailTesterResponse) GetErrorStackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorStack.Get(), o.ErrorStack.IsSet()
}

// HasErrorStack returns a boolean if a field has been set.
func (o *EmailTesterResponse) HasErrorStack() bool {
	if o != nil && o.ErrorStack.IsSet() {
		return true
	}

	return false
}

// SetErrorStack gets a reference to the given NullableString and assigns it to the ErrorStack field.
func (o *EmailTesterResponse) SetErrorStack(v string) {
	o.ErrorStack.Set(&v)
}
// SetErrorStackNil sets the value for ErrorStack to be an explicit nil
func (o *EmailTesterResponse) SetErrorStackNil() {
	o.ErrorStack.Set(nil)
}

// UnsetErrorStack ensures that no value is present for ErrorStack, not even an explicit nil
func (o *EmailTesterResponse) UnsetErrorStack() {
	o.ErrorStack.Unset()
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailTesterResponse) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorType.Get()
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailTesterResponse) GetErrorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorType.Get(), o.ErrorType.IsSet()
}

// HasErrorType returns a boolean if a field has been set.
func (o *EmailTesterResponse) HasErrorType() bool {
	if o != nil && o.ErrorType.IsSet() {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given NullableString and assigns it to the ErrorType field.
func (o *EmailTesterResponse) SetErrorType(v string) {
	o.ErrorType.Set(&v)
}
// SetErrorTypeNil sets the value for ErrorType to be an explicit nil
func (o *EmailTesterResponse) SetErrorTypeNil() {
	o.ErrorType.Set(nil)
}

// UnsetErrorType ensures that no value is present for ErrorType, not even an explicit nil
func (o *EmailTesterResponse) UnsetErrorType() {
	o.ErrorType.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailTesterResponse) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailTesterResponse) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *EmailTesterResponse) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *EmailTesterResponse) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *EmailTesterResponse) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *EmailTesterResponse) UnsetError() {
	o.Error.Unset()
}

func (o EmailTesterResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailTesterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["succeeded"] = o.Succeeded
	if o.ErrorStack.IsSet() {
		toSerialize["error_stack"] = o.ErrorStack.Get()
	}
	if o.ErrorType.IsSet() {
		toSerialize["error_type"] = o.ErrorType.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	return toSerialize, nil
}

type NullableEmailTesterResponse struct {
	value *EmailTesterResponse
	isSet bool
}

func (v NullableEmailTesterResponse) Get() *EmailTesterResponse {
	return v.value
}

func (v *NullableEmailTesterResponse) Set(val *EmailTesterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailTesterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailTesterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailTesterResponse(val *EmailTesterResponse) *NullableEmailTesterResponse {
	return &NullableEmailTesterResponse{value: val, isSet: true}
}

func (v NullableEmailTesterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailTesterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


