/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FormViewUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormViewUpdate{}

// FormViewUpdate struct for FormViewUpdate
type FormViewUpdate struct {
	Name *string `json:"name,omitempty"`
	FilterType *ConditionTypeEnum `json:"filter_type,omitempty"`
	// Allows users to see results unfiltered while still keeping the filters saved for the view.
	FiltersDisabled *bool `json:"filters_disabled,omitempty"`
	// The password required to access the public view URL.
	PublicViewPassword *string `json:"public_view_password,omitempty"`
	// The title that is displayed at the beginning of the form.
	Title *string `json:"title,omitempty"`
	// The description that is displayed at the beginning of the form.
	Description *string `json:"description,omitempty"`
	Mode *ModeEnum `json:"mode,omitempty"`
	CoverImage NullableFormViewCreateViewCoverImage `json:"cover_image,omitempty"`
	LogoImage NullableFormViewCreateViewLogoImage `json:"logo_image,omitempty"`
	// The text displayed on the submit button.
	SubmitText *string `json:"submit_text,omitempty"`
	SubmitAction *SubmitActionEnum `json:"submit_action,omitempty"`
	// If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.
	SubmitActionMessage *string `json:"submit_action_message,omitempty"`
	// If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
	SubmitActionRedirectUrl *string `json:"submit_action_redirect_url,omitempty"`
	// Indicates whether the view is publicly accessible to visitors.
	Public *bool `json:"public,omitempty"`
	// The unique slug that can be used to construct a public URL.
	Slug string `json:"slug"`
}

// NewFormViewUpdate instantiates a new FormViewUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormViewUpdate(slug string) *FormViewUpdate {
	this := FormViewUpdate{}
	this.Slug = slug
	return &this
}

// NewFormViewUpdateWithDefaults instantiates a new FormViewUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormViewUpdateWithDefaults() *FormViewUpdate {
	this := FormViewUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormViewUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormViewUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormViewUpdate) SetName(v string) {
	o.Name = &v
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *FormViewUpdate) GetFilterType() ConditionTypeEnum {
	if o == nil || IsNil(o.FilterType) {
		var ret ConditionTypeEnum
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetFilterTypeOk() (*ConditionTypeEnum, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *FormViewUpdate) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given ConditionTypeEnum and assigns it to the FilterType field.
func (o *FormViewUpdate) SetFilterType(v ConditionTypeEnum) {
	o.FilterType = &v
}

// GetFiltersDisabled returns the FiltersDisabled field value if set, zero value otherwise.
func (o *FormViewUpdate) GetFiltersDisabled() bool {
	if o == nil || IsNil(o.FiltersDisabled) {
		var ret bool
		return ret
	}
	return *o.FiltersDisabled
}

// GetFiltersDisabledOk returns a tuple with the FiltersDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetFiltersDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FiltersDisabled) {
		return nil, false
	}
	return o.FiltersDisabled, true
}

// HasFiltersDisabled returns a boolean if a field has been set.
func (o *FormViewUpdate) HasFiltersDisabled() bool {
	if o != nil && !IsNil(o.FiltersDisabled) {
		return true
	}

	return false
}

// SetFiltersDisabled gets a reference to the given bool and assigns it to the FiltersDisabled field.
func (o *FormViewUpdate) SetFiltersDisabled(v bool) {
	o.FiltersDisabled = &v
}

// GetPublicViewPassword returns the PublicViewPassword field value if set, zero value otherwise.
func (o *FormViewUpdate) GetPublicViewPassword() string {
	if o == nil || IsNil(o.PublicViewPassword) {
		var ret string
		return ret
	}
	return *o.PublicViewPassword
}

// GetPublicViewPasswordOk returns a tuple with the PublicViewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetPublicViewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PublicViewPassword) {
		return nil, false
	}
	return o.PublicViewPassword, true
}

// HasPublicViewPassword returns a boolean if a field has been set.
func (o *FormViewUpdate) HasPublicViewPassword() bool {
	if o != nil && !IsNil(o.PublicViewPassword) {
		return true
	}

	return false
}

// SetPublicViewPassword gets a reference to the given string and assigns it to the PublicViewPassword field.
func (o *FormViewUpdate) SetPublicViewPassword(v string) {
	o.PublicViewPassword = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FormViewUpdate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FormViewUpdate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FormViewUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FormViewUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FormViewUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FormViewUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *FormViewUpdate) GetMode() ModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret ModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetModeOk() (*ModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *FormViewUpdate) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ModeEnum and assigns it to the Mode field.
func (o *FormViewUpdate) SetMode(v ModeEnum) {
	o.Mode = &v
}

// GetCoverImage returns the CoverImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormViewUpdate) GetCoverImage() FormViewCreateViewCoverImage {
	if o == nil || IsNil(o.CoverImage.Get()) {
		var ret FormViewCreateViewCoverImage
		return ret
	}
	return *o.CoverImage.Get()
}

// GetCoverImageOk returns a tuple with the CoverImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormViewUpdate) GetCoverImageOk() (*FormViewCreateViewCoverImage, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverImage.Get(), o.CoverImage.IsSet()
}

// HasCoverImage returns a boolean if a field has been set.
func (o *FormViewUpdate) HasCoverImage() bool {
	if o != nil && o.CoverImage.IsSet() {
		return true
	}

	return false
}

// SetCoverImage gets a reference to the given NullableFormViewCreateViewCoverImage and assigns it to the CoverImage field.
func (o *FormViewUpdate) SetCoverImage(v FormViewCreateViewCoverImage) {
	o.CoverImage.Set(&v)
}
// SetCoverImageNil sets the value for CoverImage to be an explicit nil
func (o *FormViewUpdate) SetCoverImageNil() {
	o.CoverImage.Set(nil)
}

// UnsetCoverImage ensures that no value is present for CoverImage, not even an explicit nil
func (o *FormViewUpdate) UnsetCoverImage() {
	o.CoverImage.Unset()
}

// GetLogoImage returns the LogoImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormViewUpdate) GetLogoImage() FormViewCreateViewLogoImage {
	if o == nil || IsNil(o.LogoImage.Get()) {
		var ret FormViewCreateViewLogoImage
		return ret
	}
	return *o.LogoImage.Get()
}

// GetLogoImageOk returns a tuple with the LogoImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormViewUpdate) GetLogoImageOk() (*FormViewCreateViewLogoImage, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogoImage.Get(), o.LogoImage.IsSet()
}

// HasLogoImage returns a boolean if a field has been set.
func (o *FormViewUpdate) HasLogoImage() bool {
	if o != nil && o.LogoImage.IsSet() {
		return true
	}

	return false
}

// SetLogoImage gets a reference to the given NullableFormViewCreateViewLogoImage and assigns it to the LogoImage field.
func (o *FormViewUpdate) SetLogoImage(v FormViewCreateViewLogoImage) {
	o.LogoImage.Set(&v)
}
// SetLogoImageNil sets the value for LogoImage to be an explicit nil
func (o *FormViewUpdate) SetLogoImageNil() {
	o.LogoImage.Set(nil)
}

// UnsetLogoImage ensures that no value is present for LogoImage, not even an explicit nil
func (o *FormViewUpdate) UnsetLogoImage() {
	o.LogoImage.Unset()
}

// GetSubmitText returns the SubmitText field value if set, zero value otherwise.
func (o *FormViewUpdate) GetSubmitText() string {
	if o == nil || IsNil(o.SubmitText) {
		var ret string
		return ret
	}
	return *o.SubmitText
}

// GetSubmitTextOk returns a tuple with the SubmitText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetSubmitTextOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitText) {
		return nil, false
	}
	return o.SubmitText, true
}

// HasSubmitText returns a boolean if a field has been set.
func (o *FormViewUpdate) HasSubmitText() bool {
	if o != nil && !IsNil(o.SubmitText) {
		return true
	}

	return false
}

// SetSubmitText gets a reference to the given string and assigns it to the SubmitText field.
func (o *FormViewUpdate) SetSubmitText(v string) {
	o.SubmitText = &v
}

// GetSubmitAction returns the SubmitAction field value if set, zero value otherwise.
func (o *FormViewUpdate) GetSubmitAction() SubmitActionEnum {
	if o == nil || IsNil(o.SubmitAction) {
		var ret SubmitActionEnum
		return ret
	}
	return *o.SubmitAction
}

// GetSubmitActionOk returns a tuple with the SubmitAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetSubmitActionOk() (*SubmitActionEnum, bool) {
	if o == nil || IsNil(o.SubmitAction) {
		return nil, false
	}
	return o.SubmitAction, true
}

// HasSubmitAction returns a boolean if a field has been set.
func (o *FormViewUpdate) HasSubmitAction() bool {
	if o != nil && !IsNil(o.SubmitAction) {
		return true
	}

	return false
}

// SetSubmitAction gets a reference to the given SubmitActionEnum and assigns it to the SubmitAction field.
func (o *FormViewUpdate) SetSubmitAction(v SubmitActionEnum) {
	o.SubmitAction = &v
}

// GetSubmitActionMessage returns the SubmitActionMessage field value if set, zero value otherwise.
func (o *FormViewUpdate) GetSubmitActionMessage() string {
	if o == nil || IsNil(o.SubmitActionMessage) {
		var ret string
		return ret
	}
	return *o.SubmitActionMessage
}

// GetSubmitActionMessageOk returns a tuple with the SubmitActionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetSubmitActionMessageOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitActionMessage) {
		return nil, false
	}
	return o.SubmitActionMessage, true
}

// HasSubmitActionMessage returns a boolean if a field has been set.
func (o *FormViewUpdate) HasSubmitActionMessage() bool {
	if o != nil && !IsNil(o.SubmitActionMessage) {
		return true
	}

	return false
}

// SetSubmitActionMessage gets a reference to the given string and assigns it to the SubmitActionMessage field.
func (o *FormViewUpdate) SetSubmitActionMessage(v string) {
	o.SubmitActionMessage = &v
}

// GetSubmitActionRedirectUrl returns the SubmitActionRedirectUrl field value if set, zero value otherwise.
func (o *FormViewUpdate) GetSubmitActionRedirectUrl() string {
	if o == nil || IsNil(o.SubmitActionRedirectUrl) {
		var ret string
		return ret
	}
	return *o.SubmitActionRedirectUrl
}

// GetSubmitActionRedirectUrlOk returns a tuple with the SubmitActionRedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetSubmitActionRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitActionRedirectUrl) {
		return nil, false
	}
	return o.SubmitActionRedirectUrl, true
}

// HasSubmitActionRedirectUrl returns a boolean if a field has been set.
func (o *FormViewUpdate) HasSubmitActionRedirectUrl() bool {
	if o != nil && !IsNil(o.SubmitActionRedirectUrl) {
		return true
	}

	return false
}

// SetSubmitActionRedirectUrl gets a reference to the given string and assigns it to the SubmitActionRedirectUrl field.
func (o *FormViewUpdate) SetSubmitActionRedirectUrl(v string) {
	o.SubmitActionRedirectUrl = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *FormViewUpdate) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *FormViewUpdate) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *FormViewUpdate) SetPublic(v bool) {
	o.Public = &v
}

// GetSlug returns the Slug field value
func (o *FormViewUpdate) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *FormViewUpdate) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *FormViewUpdate) SetSlug(v string) {
	o.Slug = v
}

func (o FormViewUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormViewUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FilterType) {
		toSerialize["filter_type"] = o.FilterType
	}
	if !IsNil(o.FiltersDisabled) {
		toSerialize["filters_disabled"] = o.FiltersDisabled
	}
	if !IsNil(o.PublicViewPassword) {
		toSerialize["public_view_password"] = o.PublicViewPassword
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if o.CoverImage.IsSet() {
		toSerialize["cover_image"] = o.CoverImage.Get()
	}
	if o.LogoImage.IsSet() {
		toSerialize["logo_image"] = o.LogoImage.Get()
	}
	if !IsNil(o.SubmitText) {
		toSerialize["submit_text"] = o.SubmitText
	}
	if !IsNil(o.SubmitAction) {
		toSerialize["submit_action"] = o.SubmitAction
	}
	if !IsNil(o.SubmitActionMessage) {
		toSerialize["submit_action_message"] = o.SubmitActionMessage
	}
	if !IsNil(o.SubmitActionRedirectUrl) {
		toSerialize["submit_action_redirect_url"] = o.SubmitActionRedirectUrl
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	// skip: slug is readOnly
	return toSerialize, nil
}

type NullableFormViewUpdate struct {
	value *FormViewUpdate
	isSet bool
}

func (v NullableFormViewUpdate) Get() *FormViewUpdate {
	return v.value
}

func (v *NullableFormViewUpdate) Set(val *FormViewUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFormViewUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFormViewUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormViewUpdate(val *FormViewUpdate) *NullableFormViewUpdate {
	return &NullableFormViewUpdate{value: val, isSet: true}
}

func (v NullableFormViewUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormViewUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


