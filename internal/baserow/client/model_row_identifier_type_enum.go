/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RowIdentifierTypeEnum * `id` - Id * `count` - Count
type RowIdentifierTypeEnum string

// List of RowIdentifierTypeEnum
const (
	ID RowIdentifierTypeEnum = "id"
)

// All allowed values of RowIdentifierTypeEnum enum
var AllowedRowIdentifierTypeEnumEnumValues = []RowIdentifierTypeEnum{
	"id",
	"count",
}

func (v *RowIdentifierTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RowIdentifierTypeEnum(value)
	for _, existing := range AllowedRowIdentifierTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RowIdentifierTypeEnum", value)
}

// NewRowIdentifierTypeEnumFromValue returns a pointer to a valid RowIdentifierTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRowIdentifierTypeEnumFromValue(v string) (*RowIdentifierTypeEnum, error) {
	ev := RowIdentifierTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RowIdentifierTypeEnum: valid values are %v", v, AllowedRowIdentifierTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RowIdentifierTypeEnum) IsValid() bool {
	for _, existing := range AllowedRowIdentifierTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RowIdentifierTypeEnum value
func (v RowIdentifierTypeEnum) Ptr() *RowIdentifierTypeEnum {
	return &v
}

type NullableRowIdentifierTypeEnum struct {
	value *RowIdentifierTypeEnum
	isSet bool
}

func (v NullableRowIdentifierTypeEnum) Get() *RowIdentifierTypeEnum {
	return v.value
}

func (v *NullableRowIdentifierTypeEnum) Set(val *RowIdentifierTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRowIdentifierTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRowIdentifierTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRowIdentifierTypeEnum(val *RowIdentifierTypeEnum) *NullableRowIdentifierTypeEnum {
	return &NullableRowIdentifierTypeEnum{value: val, isSet: true}
}

func (v NullableRowIdentifierTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRowIdentifierTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

