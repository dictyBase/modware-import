/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ConditionTypeEnum * `AND` - And * `OR` - Or
type ConditionTypeEnum string

// List of ConditionTypeEnum
const (
	AND ConditionTypeEnum = "AND"
	OR ConditionTypeEnum = "OR"
)

// All allowed values of ConditionTypeEnum enum
var AllowedConditionTypeEnumEnumValues = []ConditionTypeEnum{
	"AND",
	"OR",
}

func (v *ConditionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionTypeEnum(value)
	for _, existing := range AllowedConditionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionTypeEnum", value)
}

// NewConditionTypeEnumFromValue returns a pointer to a valid ConditionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionTypeEnumFromValue(v string) (*ConditionTypeEnum, error) {
	ev := ConditionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionTypeEnum: valid values are %v", v, AllowedConditionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionTypeEnum) IsValid() bool {
	for _, existing := range AllowedConditionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionTypeEnum value
func (v ConditionTypeEnum) Ptr() *ConditionTypeEnum {
	return &v
}

type NullableConditionTypeEnum struct {
	value *ConditionTypeEnum
	isSet bool
}

func (v NullableConditionTypeEnum) Get() *ConditionTypeEnum {
	return v.value
}

func (v *NullableConditionTypeEnum) Set(val *ConditionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionTypeEnum(val *ConditionTypeEnum) *NullableConditionTypeEnum {
	return &NullableConditionTypeEnum{value: val, isSet: true}
}

func (v NullableConditionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

