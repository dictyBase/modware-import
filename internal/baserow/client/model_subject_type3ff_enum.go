/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SubjectType3ffEnum * `auth.User` - auth.User
type SubjectType3ffEnum string

// List of SubjectType3ffEnum
const (
	AUTH_USER SubjectType3ffEnum = "auth.User"
)

// All allowed values of SubjectType3ffEnum enum
var AllowedSubjectType3ffEnumEnumValues = []SubjectType3ffEnum{
	"auth.User",
}

func (v *SubjectType3ffEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubjectType3ffEnum(value)
	for _, existing := range AllowedSubjectType3ffEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubjectType3ffEnum", value)
}

// NewSubjectType3ffEnumFromValue returns a pointer to a valid SubjectType3ffEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubjectType3ffEnumFromValue(v string) (*SubjectType3ffEnum, error) {
	ev := SubjectType3ffEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubjectType3ffEnum: valid values are %v", v, AllowedSubjectType3ffEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubjectType3ffEnum) IsValid() bool {
	for _, existing := range AllowedSubjectType3ffEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubjectType3ffEnum value
func (v SubjectType3ffEnum) Ptr() *SubjectType3ffEnum {
	return &v
}

type NullableSubjectType3ffEnum struct {
	value *SubjectType3ffEnum
	isSet bool
}

func (v NullableSubjectType3ffEnum) Get() *SubjectType3ffEnum {
	return v.value
}

func (v *NullableSubjectType3ffEnum) Set(val *SubjectType3ffEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectType3ffEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectType3ffEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectType3ffEnum(val *SubjectType3ffEnum) *NullableSubjectType3ffEnum {
	return &NullableSubjectType3ffEnum{value: val, isSet: true}
}

func (v NullableSubjectType3ffEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectType3ffEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

