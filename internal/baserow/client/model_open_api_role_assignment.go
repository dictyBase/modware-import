/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OpenApiRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenApiRoleAssignment{}

// OpenApiRoleAssignment Serializer for RoleAssignment used for the Open API spec
type OpenApiRoleAssignment struct {
	Id int32 `json:"id"`
	// The uid of the role assigned to the user or team in the given workspace.
	Role string `json:"role"`
	Subject OpenApiRoleAssignmentSubject `json:"subject"`
	// The subject ID.
	SubjectId int32 `json:"subject_id"`
	// The unique scope ID.
	ScopeId int32 `json:"scope_id"`
	SubjectType SubjectType6dcEnum `json:"subject_type"`
	ScopeType ScopeTypeEnum `json:"scope_type"`
}

// NewOpenApiRoleAssignment instantiates a new OpenApiRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenApiRoleAssignment(id int32, role string, subject OpenApiRoleAssignmentSubject, subjectId int32, scopeId int32, subjectType SubjectType6dcEnum, scopeType ScopeTypeEnum) *OpenApiRoleAssignment {
	this := OpenApiRoleAssignment{}
	this.Id = id
	this.Role = role
	this.Subject = subject
	this.SubjectId = subjectId
	this.ScopeId = scopeId
	this.SubjectType = subjectType
	this.ScopeType = scopeType
	return &this
}

// NewOpenApiRoleAssignmentWithDefaults instantiates a new OpenApiRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenApiRoleAssignmentWithDefaults() *OpenApiRoleAssignment {
	this := OpenApiRoleAssignment{}
	return &this
}

// GetId returns the Id field value
func (o *OpenApiRoleAssignment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpenApiRoleAssignment) SetId(v int32) {
	o.Id = v
}

// GetRole returns the Role field value
func (o *OpenApiRoleAssignment) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *OpenApiRoleAssignment) SetRole(v string) {
	o.Role = v
}

// GetSubject returns the Subject field value
func (o *OpenApiRoleAssignment) GetSubject() OpenApiRoleAssignmentSubject {
	if o == nil {
		var ret OpenApiRoleAssignmentSubject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetSubjectOk() (*OpenApiRoleAssignmentSubject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *OpenApiRoleAssignment) SetSubject(v OpenApiRoleAssignmentSubject) {
	o.Subject = v
}

// GetSubjectId returns the SubjectId field value
func (o *OpenApiRoleAssignment) GetSubjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetSubjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *OpenApiRoleAssignment) SetSubjectId(v int32) {
	o.SubjectId = v
}

// GetScopeId returns the ScopeId field value
func (o *OpenApiRoleAssignment) GetScopeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetScopeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeId, true
}

// SetScopeId sets field value
func (o *OpenApiRoleAssignment) SetScopeId(v int32) {
	o.ScopeId = v
}

// GetSubjectType returns the SubjectType field value
func (o *OpenApiRoleAssignment) GetSubjectType() SubjectType6dcEnum {
	if o == nil {
		var ret SubjectType6dcEnum
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetSubjectTypeOk() (*SubjectType6dcEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *OpenApiRoleAssignment) SetSubjectType(v SubjectType6dcEnum) {
	o.SubjectType = v
}

// GetScopeType returns the ScopeType field value
func (o *OpenApiRoleAssignment) GetScopeType() ScopeTypeEnum {
	if o == nil {
		var ret ScopeTypeEnum
		return ret
	}

	return o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value
// and a boolean to check if the value has been set.
func (o *OpenApiRoleAssignment) GetScopeTypeOk() (*ScopeTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeType, true
}

// SetScopeType sets field value
func (o *OpenApiRoleAssignment) SetScopeType(v ScopeTypeEnum) {
	o.ScopeType = v
}

func (o OpenApiRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenApiRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["role"] = o.Role
	toSerialize["subject"] = o.Subject
	toSerialize["subject_id"] = o.SubjectId
	toSerialize["scope_id"] = o.ScopeId
	toSerialize["subject_type"] = o.SubjectType
	toSerialize["scope_type"] = o.ScopeType
	return toSerialize, nil
}

type NullableOpenApiRoleAssignment struct {
	value *OpenApiRoleAssignment
	isSet bool
}

func (v NullableOpenApiRoleAssignment) Get() *OpenApiRoleAssignment {
	return v.value
}

func (v *NullableOpenApiRoleAssignment) Set(val *OpenApiRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenApiRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenApiRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenApiRoleAssignment(val *OpenApiRoleAssignment) *NullableOpenApiRoleAssignment {
	return &NullableOpenApiRoleAssignment{value: val, isSet: true}
}

func (v NullableOpenApiRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenApiRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


