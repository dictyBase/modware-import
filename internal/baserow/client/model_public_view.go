/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PublicView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicView{}

// PublicView struct for PublicView
type PublicView struct {
	Id string `json:"id"`
	Table PublicViewTable `json:"table"`
	Name string `json:"name"`
	Order int32 `json:"order"`
	Type string `json:"type"`
	Sortings []PublicViewSort `json:"sortings"`
	// Indicates whether the view is publicly accessible to visitors.
	Public *bool `json:"public,omitempty"`
	// The unique slug where the view can be accessed publicly on.
	Slug string `json:"slug"`
	ShowLogo *bool `json:"show_logo,omitempty"`
}

// NewPublicView instantiates a new PublicView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicView(id string, table PublicViewTable, name string, order int32, type_ string, sortings []PublicViewSort, slug string) *PublicView {
	this := PublicView{}
	this.Id = id
	this.Table = table
	this.Name = name
	this.Order = order
	this.Type = type_
	this.Sortings = sortings
	this.Slug = slug
	return &this
}

// NewPublicViewWithDefaults instantiates a new PublicView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicViewWithDefaults() *PublicView {
	this := PublicView{}
	return &this
}

// GetId returns the Id field value
func (o *PublicView) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicView) SetId(v string) {
	o.Id = v
}

// GetTable returns the Table field value
func (o *PublicView) GetTable() PublicViewTable {
	if o == nil {
		var ret PublicViewTable
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetTableOk() (*PublicViewTable, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *PublicView) SetTable(v PublicViewTable) {
	o.Table = v
}

// GetName returns the Name field value
func (o *PublicView) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicView) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value
func (o *PublicView) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *PublicView) SetOrder(v int32) {
	o.Order = v
}

// GetType returns the Type field value
func (o *PublicView) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicView) SetType(v string) {
	o.Type = v
}

// GetSortings returns the Sortings field value
func (o *PublicView) GetSortings() []PublicViewSort {
	if o == nil {
		var ret []PublicViewSort
		return ret
	}

	return o.Sortings
}

// GetSortingsOk returns a tuple with the Sortings field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetSortingsOk() ([]PublicViewSort, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sortings, true
}

// SetSortings sets field value
func (o *PublicView) SetSortings(v []PublicViewSort) {
	o.Sortings = v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *PublicView) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicView) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *PublicView) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *PublicView) SetPublic(v bool) {
	o.Public = &v
}

// GetSlug returns the Slug field value
func (o *PublicView) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *PublicView) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *PublicView) SetSlug(v string) {
	o.Slug = v
}

// GetShowLogo returns the ShowLogo field value if set, zero value otherwise.
func (o *PublicView) GetShowLogo() bool {
	if o == nil || IsNil(o.ShowLogo) {
		var ret bool
		return ret
	}
	return *o.ShowLogo
}

// GetShowLogoOk returns a tuple with the ShowLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicView) GetShowLogoOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLogo) {
		return nil, false
	}
	return o.ShowLogo, true
}

// HasShowLogo returns a boolean if a field has been set.
func (o *PublicView) HasShowLogo() bool {
	if o != nil && !IsNil(o.ShowLogo) {
		return true
	}

	return false
}

// SetShowLogo gets a reference to the given bool and assigns it to the ShowLogo field.
func (o *PublicView) SetShowLogo(v bool) {
	o.ShowLogo = &v
}

func (o PublicView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["table"] = o.Table
	toSerialize["name"] = o.Name
	toSerialize["order"] = o.Order
	// skip: type is readOnly
	// skip: sortings is readOnly
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	// skip: slug is readOnly
	if !IsNil(o.ShowLogo) {
		toSerialize["show_logo"] = o.ShowLogo
	}
	return toSerialize, nil
}

type NullablePublicView struct {
	value *PublicView
	isSet bool
}

func (v NullablePublicView) Get() *PublicView {
	return v.value
}

func (v *NullablePublicView) Set(val *PublicView) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicView) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicView(val *PublicView) *NullablePublicView {
	return &NullablePublicView{value: val, isSet: true}
}

func (v NullablePublicView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


