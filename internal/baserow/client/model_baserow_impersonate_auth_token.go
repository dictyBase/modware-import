/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BaserowImpersonateAuthToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaserowImpersonateAuthToken{}

// BaserowImpersonateAuthToken Serializer used for impersonation.
type BaserowImpersonateAuthToken struct {
	User int32 `json:"user"`
}

// NewBaserowImpersonateAuthToken instantiates a new BaserowImpersonateAuthToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaserowImpersonateAuthToken(user int32) *BaserowImpersonateAuthToken {
	this := BaserowImpersonateAuthToken{}
	this.User = user
	return &this
}

// NewBaserowImpersonateAuthTokenWithDefaults instantiates a new BaserowImpersonateAuthToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaserowImpersonateAuthTokenWithDefaults() *BaserowImpersonateAuthToken {
	this := BaserowImpersonateAuthToken{}
	return &this
}

// GetUser returns the User field value
func (o *BaserowImpersonateAuthToken) GetUser() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *BaserowImpersonateAuthToken) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *BaserowImpersonateAuthToken) SetUser(v int32) {
	o.User = v
}

func (o BaserowImpersonateAuthToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaserowImpersonateAuthToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	return toSerialize, nil
}

type NullableBaserowImpersonateAuthToken struct {
	value *BaserowImpersonateAuthToken
	isSet bool
}

func (v NullableBaserowImpersonateAuthToken) Get() *BaserowImpersonateAuthToken {
	return v.value
}

func (v *NullableBaserowImpersonateAuthToken) Set(val *BaserowImpersonateAuthToken) {
	v.value = val
	v.isSet = true
}

func (v NullableBaserowImpersonateAuthToken) IsSet() bool {
	return v.isSet
}

func (v *NullableBaserowImpersonateAuthToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaserowImpersonateAuthToken(val *BaserowImpersonateAuthToken) *NullableBaserowImpersonateAuthToken {
	return &NullableBaserowImpersonateAuthToken{value: val, isSet: true}
}

func (v NullableBaserowImpersonateAuthToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaserowImpersonateAuthToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


