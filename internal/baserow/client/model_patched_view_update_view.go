/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PatchedViewUpdateView struct for PatchedViewUpdateView
type PatchedViewUpdateView struct {
	CalendarViewUpdate *CalendarViewUpdate
	FormViewUpdate *FormViewUpdate
	GalleryViewUpdate *GalleryViewUpdate
	GridViewUpdate *GridViewUpdate
	KanbanViewUpdate *KanbanViewUpdate
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PatchedViewUpdateView) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CalendarViewUpdate
	err = json.Unmarshal(data, &dst.CalendarViewUpdate);
	if err == nil {
		jsonCalendarViewUpdate, _ := json.Marshal(dst.CalendarViewUpdate)
		if string(jsonCalendarViewUpdate) == "{}" { // empty struct
			dst.CalendarViewUpdate = nil
		} else {
			return nil // data stored in dst.CalendarViewUpdate, return on the first match
		}
	} else {
		dst.CalendarViewUpdate = nil
	}

	// try to unmarshal JSON data into FormViewUpdate
	err = json.Unmarshal(data, &dst.FormViewUpdate);
	if err == nil {
		jsonFormViewUpdate, _ := json.Marshal(dst.FormViewUpdate)
		if string(jsonFormViewUpdate) == "{}" { // empty struct
			dst.FormViewUpdate = nil
		} else {
			return nil // data stored in dst.FormViewUpdate, return on the first match
		}
	} else {
		dst.FormViewUpdate = nil
	}

	// try to unmarshal JSON data into GalleryViewUpdate
	err = json.Unmarshal(data, &dst.GalleryViewUpdate);
	if err == nil {
		jsonGalleryViewUpdate, _ := json.Marshal(dst.GalleryViewUpdate)
		if string(jsonGalleryViewUpdate) == "{}" { // empty struct
			dst.GalleryViewUpdate = nil
		} else {
			return nil // data stored in dst.GalleryViewUpdate, return on the first match
		}
	} else {
		dst.GalleryViewUpdate = nil
	}

	// try to unmarshal JSON data into GridViewUpdate
	err = json.Unmarshal(data, &dst.GridViewUpdate);
	if err == nil {
		jsonGridViewUpdate, _ := json.Marshal(dst.GridViewUpdate)
		if string(jsonGridViewUpdate) == "{}" { // empty struct
			dst.GridViewUpdate = nil
		} else {
			return nil // data stored in dst.GridViewUpdate, return on the first match
		}
	} else {
		dst.GridViewUpdate = nil
	}

	// try to unmarshal JSON data into KanbanViewUpdate
	err = json.Unmarshal(data, &dst.KanbanViewUpdate);
	if err == nil {
		jsonKanbanViewUpdate, _ := json.Marshal(dst.KanbanViewUpdate)
		if string(jsonKanbanViewUpdate) == "{}" { // empty struct
			dst.KanbanViewUpdate = nil
		} else {
			return nil // data stored in dst.KanbanViewUpdate, return on the first match
		}
	} else {
		dst.KanbanViewUpdate = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PatchedViewUpdateView)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PatchedViewUpdateView) MarshalJSON() ([]byte, error) {
	if src.CalendarViewUpdate != nil {
		return json.Marshal(&src.CalendarViewUpdate)
	}

	if src.FormViewUpdate != nil {
		return json.Marshal(&src.FormViewUpdate)
	}

	if src.GalleryViewUpdate != nil {
		return json.Marshal(&src.GalleryViewUpdate)
	}

	if src.GridViewUpdate != nil {
		return json.Marshal(&src.GridViewUpdate)
	}

	if src.KanbanViewUpdate != nil {
		return json.Marshal(&src.KanbanViewUpdate)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePatchedViewUpdateView struct {
	value *PatchedViewUpdateView
	isSet bool
}

func (v NullablePatchedViewUpdateView) Get() *PatchedViewUpdateView {
	return v.value
}

func (v *NullablePatchedViewUpdateView) Set(val *PatchedViewUpdateView) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedViewUpdateView) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedViewUpdateView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedViewUpdateView(val *PatchedViewUpdateView) *NullablePatchedViewUpdateView {
	return &NullablePatchedViewUpdateView{value: val, isSet: true}
}

func (v NullablePatchedViewUpdateView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedViewUpdateView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


