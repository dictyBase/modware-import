/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PatchedUpdateViewSort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedUpdateViewSort{}

// PatchedUpdateViewSort struct for PatchedUpdateViewSort
type PatchedUpdateViewSort struct {
	// The field that must be sorted on.
	Field *int32 `json:"field,omitempty"`
	Order *OrderEnum `json:"order,omitempty"`
}

// NewPatchedUpdateViewSort instantiates a new PatchedUpdateViewSort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedUpdateViewSort() *PatchedUpdateViewSort {
	this := PatchedUpdateViewSort{}
	return &this
}

// NewPatchedUpdateViewSortWithDefaults instantiates a new PatchedUpdateViewSort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedUpdateViewSortWithDefaults() *PatchedUpdateViewSort {
	this := PatchedUpdateViewSort{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *PatchedUpdateViewSort) GetField() int32 {
	if o == nil || IsNil(o.Field) {
		var ret int32
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUpdateViewSort) GetFieldOk() (*int32, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *PatchedUpdateViewSort) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given int32 and assigns it to the Field field.
func (o *PatchedUpdateViewSort) SetField(v int32) {
	o.Field = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PatchedUpdateViewSort) GetOrder() OrderEnum {
	if o == nil || IsNil(o.Order) {
		var ret OrderEnum
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedUpdateViewSort) GetOrderOk() (*OrderEnum, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PatchedUpdateViewSort) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given OrderEnum and assigns it to the Order field.
func (o *PatchedUpdateViewSort) SetOrder(v OrderEnum) {
	o.Order = &v
}

func (o PatchedUpdateViewSort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedUpdateViewSort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullablePatchedUpdateViewSort struct {
	value *PatchedUpdateViewSort
	isSet bool
}

func (v NullablePatchedUpdateViewSort) Get() *PatchedUpdateViewSort {
	return v.value
}

func (v *NullablePatchedUpdateViewSort) Set(val *PatchedUpdateViewSort) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedUpdateViewSort) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedUpdateViewSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedUpdateViewSort(val *PatchedUpdateViewSort) *NullablePatchedUpdateViewSort {
	return &NullablePatchedUpdateViewSort{value: val, isSet: true}
}

func (v NullablePatchedUpdateViewSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedUpdateViewSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


