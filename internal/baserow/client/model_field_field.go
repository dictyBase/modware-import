/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// FieldField - struct for FieldField
type FieldField struct {
	BooleanFieldField *BooleanFieldField
	CountFieldField *CountFieldField
	CreatedOnFieldField *CreatedOnFieldField
	DateFieldField *DateFieldField
	EmailFieldField *EmailFieldField
	FileFieldField *FileFieldField
	FormulaFieldField *FormulaFieldField
	LastModifiedFieldField *LastModifiedFieldField
	LinkRowFieldField *LinkRowFieldField
	LongTextFieldField *LongTextFieldField
	LookupFieldField *LookupFieldField
	MultipleCollaboratorsFieldField *MultipleCollaboratorsFieldField
	MultipleSelectFieldField *MultipleSelectFieldField
	NumberFieldField *NumberFieldField
	PhoneNumberFieldField *PhoneNumberFieldField
	RatingFieldField *RatingFieldField
	RollupFieldField *RollupFieldField
	SingleSelectFieldField *SingleSelectFieldField
	TextFieldField *TextFieldField
	URLFieldField *URLFieldField
}

// BooleanFieldFieldAsFieldField is a convenience function that returns BooleanFieldField wrapped in FieldField
func BooleanFieldFieldAsFieldField(v *BooleanFieldField) FieldField {
	return FieldField{
		BooleanFieldField: v,
	}
}

// CountFieldFieldAsFieldField is a convenience function that returns CountFieldField wrapped in FieldField
func CountFieldFieldAsFieldField(v *CountFieldField) FieldField {
	return FieldField{
		CountFieldField: v,
	}
}

// CreatedOnFieldFieldAsFieldField is a convenience function that returns CreatedOnFieldField wrapped in FieldField
func CreatedOnFieldFieldAsFieldField(v *CreatedOnFieldField) FieldField {
	return FieldField{
		CreatedOnFieldField: v,
	}
}

// DateFieldFieldAsFieldField is a convenience function that returns DateFieldField wrapped in FieldField
func DateFieldFieldAsFieldField(v *DateFieldField) FieldField {
	return FieldField{
		DateFieldField: v,
	}
}

// EmailFieldFieldAsFieldField is a convenience function that returns EmailFieldField wrapped in FieldField
func EmailFieldFieldAsFieldField(v *EmailFieldField) FieldField {
	return FieldField{
		EmailFieldField: v,
	}
}

// FileFieldFieldAsFieldField is a convenience function that returns FileFieldField wrapped in FieldField
func FileFieldFieldAsFieldField(v *FileFieldField) FieldField {
	return FieldField{
		FileFieldField: v,
	}
}

// FormulaFieldFieldAsFieldField is a convenience function that returns FormulaFieldField wrapped in FieldField
func FormulaFieldFieldAsFieldField(v *FormulaFieldField) FieldField {
	return FieldField{
		FormulaFieldField: v,
	}
}

// LastModifiedFieldFieldAsFieldField is a convenience function that returns LastModifiedFieldField wrapped in FieldField
func LastModifiedFieldFieldAsFieldField(v *LastModifiedFieldField) FieldField {
	return FieldField{
		LastModifiedFieldField: v,
	}
}

// LinkRowFieldFieldAsFieldField is a convenience function that returns LinkRowFieldField wrapped in FieldField
func LinkRowFieldFieldAsFieldField(v *LinkRowFieldField) FieldField {
	return FieldField{
		LinkRowFieldField: v,
	}
}

// LongTextFieldFieldAsFieldField is a convenience function that returns LongTextFieldField wrapped in FieldField
func LongTextFieldFieldAsFieldField(v *LongTextFieldField) FieldField {
	return FieldField{
		LongTextFieldField: v,
	}
}

// LookupFieldFieldAsFieldField is a convenience function that returns LookupFieldField wrapped in FieldField
func LookupFieldFieldAsFieldField(v *LookupFieldField) FieldField {
	return FieldField{
		LookupFieldField: v,
	}
}

// MultipleCollaboratorsFieldFieldAsFieldField is a convenience function that returns MultipleCollaboratorsFieldField wrapped in FieldField
func MultipleCollaboratorsFieldFieldAsFieldField(v *MultipleCollaboratorsFieldField) FieldField {
	return FieldField{
		MultipleCollaboratorsFieldField: v,
	}
}

// MultipleSelectFieldFieldAsFieldField is a convenience function that returns MultipleSelectFieldField wrapped in FieldField
func MultipleSelectFieldFieldAsFieldField(v *MultipleSelectFieldField) FieldField {
	return FieldField{
		MultipleSelectFieldField: v,
	}
}

// NumberFieldFieldAsFieldField is a convenience function that returns NumberFieldField wrapped in FieldField
func NumberFieldFieldAsFieldField(v *NumberFieldField) FieldField {
	return FieldField{
		NumberFieldField: v,
	}
}

// PhoneNumberFieldFieldAsFieldField is a convenience function that returns PhoneNumberFieldField wrapped in FieldField
func PhoneNumberFieldFieldAsFieldField(v *PhoneNumberFieldField) FieldField {
	return FieldField{
		PhoneNumberFieldField: v,
	}
}

// RatingFieldFieldAsFieldField is a convenience function that returns RatingFieldField wrapped in FieldField
func RatingFieldFieldAsFieldField(v *RatingFieldField) FieldField {
	return FieldField{
		RatingFieldField: v,
	}
}

// RollupFieldFieldAsFieldField is a convenience function that returns RollupFieldField wrapped in FieldField
func RollupFieldFieldAsFieldField(v *RollupFieldField) FieldField {
	return FieldField{
		RollupFieldField: v,
	}
}

// SingleSelectFieldFieldAsFieldField is a convenience function that returns SingleSelectFieldField wrapped in FieldField
func SingleSelectFieldFieldAsFieldField(v *SingleSelectFieldField) FieldField {
	return FieldField{
		SingleSelectFieldField: v,
	}
}

// TextFieldFieldAsFieldField is a convenience function that returns TextFieldField wrapped in FieldField
func TextFieldFieldAsFieldField(v *TextFieldField) FieldField {
	return FieldField{
		TextFieldField: v,
	}
}

// URLFieldFieldAsFieldField is a convenience function that returns URLFieldField wrapped in FieldField
func URLFieldFieldAsFieldField(v *URLFieldField) FieldField {
	return FieldField{
		URLFieldField: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FieldField) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanFieldField
	err = newStrictDecoder(data).Decode(&dst.BooleanFieldField)
	if err == nil {
		jsonBooleanFieldField, _ := json.Marshal(dst.BooleanFieldField)
		if string(jsonBooleanFieldField) == "{}" { // empty struct
			dst.BooleanFieldField = nil
		} else {
			match++
		}
	} else {
		dst.BooleanFieldField = nil
	}

	// try to unmarshal data into CountFieldField
	err = newStrictDecoder(data).Decode(&dst.CountFieldField)
	if err == nil {
		jsonCountFieldField, _ := json.Marshal(dst.CountFieldField)
		if string(jsonCountFieldField) == "{}" { // empty struct
			dst.CountFieldField = nil
		} else {
			match++
		}
	} else {
		dst.CountFieldField = nil
	}

	// try to unmarshal data into CreatedOnFieldField
	err = newStrictDecoder(data).Decode(&dst.CreatedOnFieldField)
	if err == nil {
		jsonCreatedOnFieldField, _ := json.Marshal(dst.CreatedOnFieldField)
		if string(jsonCreatedOnFieldField) == "{}" { // empty struct
			dst.CreatedOnFieldField = nil
		} else {
			match++
		}
	} else {
		dst.CreatedOnFieldField = nil
	}

	// try to unmarshal data into DateFieldField
	err = newStrictDecoder(data).Decode(&dst.DateFieldField)
	if err == nil {
		jsonDateFieldField, _ := json.Marshal(dst.DateFieldField)
		if string(jsonDateFieldField) == "{}" { // empty struct
			dst.DateFieldField = nil
		} else {
			match++
		}
	} else {
		dst.DateFieldField = nil
	}

	// try to unmarshal data into EmailFieldField
	err = newStrictDecoder(data).Decode(&dst.EmailFieldField)
	if err == nil {
		jsonEmailFieldField, _ := json.Marshal(dst.EmailFieldField)
		if string(jsonEmailFieldField) == "{}" { // empty struct
			dst.EmailFieldField = nil
		} else {
			match++
		}
	} else {
		dst.EmailFieldField = nil
	}

	// try to unmarshal data into FileFieldField
	err = newStrictDecoder(data).Decode(&dst.FileFieldField)
	if err == nil {
		jsonFileFieldField, _ := json.Marshal(dst.FileFieldField)
		if string(jsonFileFieldField) == "{}" { // empty struct
			dst.FileFieldField = nil
		} else {
			match++
		}
	} else {
		dst.FileFieldField = nil
	}

	// try to unmarshal data into FormulaFieldField
	err = newStrictDecoder(data).Decode(&dst.FormulaFieldField)
	if err == nil {
		jsonFormulaFieldField, _ := json.Marshal(dst.FormulaFieldField)
		if string(jsonFormulaFieldField) == "{}" { // empty struct
			dst.FormulaFieldField = nil
		} else {
			match++
		}
	} else {
		dst.FormulaFieldField = nil
	}

	// try to unmarshal data into LastModifiedFieldField
	err = newStrictDecoder(data).Decode(&dst.LastModifiedFieldField)
	if err == nil {
		jsonLastModifiedFieldField, _ := json.Marshal(dst.LastModifiedFieldField)
		if string(jsonLastModifiedFieldField) == "{}" { // empty struct
			dst.LastModifiedFieldField = nil
		} else {
			match++
		}
	} else {
		dst.LastModifiedFieldField = nil
	}

	// try to unmarshal data into LinkRowFieldField
	err = newStrictDecoder(data).Decode(&dst.LinkRowFieldField)
	if err == nil {
		jsonLinkRowFieldField, _ := json.Marshal(dst.LinkRowFieldField)
		if string(jsonLinkRowFieldField) == "{}" { // empty struct
			dst.LinkRowFieldField = nil
		} else {
			match++
		}
	} else {
		dst.LinkRowFieldField = nil
	}

	// try to unmarshal data into LongTextFieldField
	err = newStrictDecoder(data).Decode(&dst.LongTextFieldField)
	if err == nil {
		jsonLongTextFieldField, _ := json.Marshal(dst.LongTextFieldField)
		if string(jsonLongTextFieldField) == "{}" { // empty struct
			dst.LongTextFieldField = nil
		} else {
			match++
		}
	} else {
		dst.LongTextFieldField = nil
	}

	// try to unmarshal data into LookupFieldField
	err = newStrictDecoder(data).Decode(&dst.LookupFieldField)
	if err == nil {
		jsonLookupFieldField, _ := json.Marshal(dst.LookupFieldField)
		if string(jsonLookupFieldField) == "{}" { // empty struct
			dst.LookupFieldField = nil
		} else {
			match++
		}
	} else {
		dst.LookupFieldField = nil
	}

	// try to unmarshal data into MultipleCollaboratorsFieldField
	err = newStrictDecoder(data).Decode(&dst.MultipleCollaboratorsFieldField)
	if err == nil {
		jsonMultipleCollaboratorsFieldField, _ := json.Marshal(dst.MultipleCollaboratorsFieldField)
		if string(jsonMultipleCollaboratorsFieldField) == "{}" { // empty struct
			dst.MultipleCollaboratorsFieldField = nil
		} else {
			match++
		}
	} else {
		dst.MultipleCollaboratorsFieldField = nil
	}

	// try to unmarshal data into MultipleSelectFieldField
	err = newStrictDecoder(data).Decode(&dst.MultipleSelectFieldField)
	if err == nil {
		jsonMultipleSelectFieldField, _ := json.Marshal(dst.MultipleSelectFieldField)
		if string(jsonMultipleSelectFieldField) == "{}" { // empty struct
			dst.MultipleSelectFieldField = nil
		} else {
			match++
		}
	} else {
		dst.MultipleSelectFieldField = nil
	}

	// try to unmarshal data into NumberFieldField
	err = newStrictDecoder(data).Decode(&dst.NumberFieldField)
	if err == nil {
		jsonNumberFieldField, _ := json.Marshal(dst.NumberFieldField)
		if string(jsonNumberFieldField) == "{}" { // empty struct
			dst.NumberFieldField = nil
		} else {
			match++
		}
	} else {
		dst.NumberFieldField = nil
	}

	// try to unmarshal data into PhoneNumberFieldField
	err = newStrictDecoder(data).Decode(&dst.PhoneNumberFieldField)
	if err == nil {
		jsonPhoneNumberFieldField, _ := json.Marshal(dst.PhoneNumberFieldField)
		if string(jsonPhoneNumberFieldField) == "{}" { // empty struct
			dst.PhoneNumberFieldField = nil
		} else {
			match++
		}
	} else {
		dst.PhoneNumberFieldField = nil
	}

	// try to unmarshal data into RatingFieldField
	err = newStrictDecoder(data).Decode(&dst.RatingFieldField)
	if err == nil {
		jsonRatingFieldField, _ := json.Marshal(dst.RatingFieldField)
		if string(jsonRatingFieldField) == "{}" { // empty struct
			dst.RatingFieldField = nil
		} else {
			match++
		}
	} else {
		dst.RatingFieldField = nil
	}

	// try to unmarshal data into RollupFieldField
	err = newStrictDecoder(data).Decode(&dst.RollupFieldField)
	if err == nil {
		jsonRollupFieldField, _ := json.Marshal(dst.RollupFieldField)
		if string(jsonRollupFieldField) == "{}" { // empty struct
			dst.RollupFieldField = nil
		} else {
			match++
		}
	} else {
		dst.RollupFieldField = nil
	}

	// try to unmarshal data into SingleSelectFieldField
	err = newStrictDecoder(data).Decode(&dst.SingleSelectFieldField)
	if err == nil {
		jsonSingleSelectFieldField, _ := json.Marshal(dst.SingleSelectFieldField)
		if string(jsonSingleSelectFieldField) == "{}" { // empty struct
			dst.SingleSelectFieldField = nil
		} else {
			match++
		}
	} else {
		dst.SingleSelectFieldField = nil
	}

	// try to unmarshal data into TextFieldField
	err = newStrictDecoder(data).Decode(&dst.TextFieldField)
	if err == nil {
		jsonTextFieldField, _ := json.Marshal(dst.TextFieldField)
		if string(jsonTextFieldField) == "{}" { // empty struct
			dst.TextFieldField = nil
		} else {
			match++
		}
	} else {
		dst.TextFieldField = nil
	}

	// try to unmarshal data into URLFieldField
	err = newStrictDecoder(data).Decode(&dst.URLFieldField)
	if err == nil {
		jsonURLFieldField, _ := json.Marshal(dst.URLFieldField)
		if string(jsonURLFieldField) == "{}" { // empty struct
			dst.URLFieldField = nil
		} else {
			match++
		}
	} else {
		dst.URLFieldField = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BooleanFieldField = nil
		dst.CountFieldField = nil
		dst.CreatedOnFieldField = nil
		dst.DateFieldField = nil
		dst.EmailFieldField = nil
		dst.FileFieldField = nil
		dst.FormulaFieldField = nil
		dst.LastModifiedFieldField = nil
		dst.LinkRowFieldField = nil
		dst.LongTextFieldField = nil
		dst.LookupFieldField = nil
		dst.MultipleCollaboratorsFieldField = nil
		dst.MultipleSelectFieldField = nil
		dst.NumberFieldField = nil
		dst.PhoneNumberFieldField = nil
		dst.RatingFieldField = nil
		dst.RollupFieldField = nil
		dst.SingleSelectFieldField = nil
		dst.TextFieldField = nil
		dst.URLFieldField = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FieldField)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FieldField)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FieldField) MarshalJSON() ([]byte, error) {
	if src.BooleanFieldField != nil {
		return json.Marshal(&src.BooleanFieldField)
	}

	if src.CountFieldField != nil {
		return json.Marshal(&src.CountFieldField)
	}

	if src.CreatedOnFieldField != nil {
		return json.Marshal(&src.CreatedOnFieldField)
	}

	if src.DateFieldField != nil {
		return json.Marshal(&src.DateFieldField)
	}

	if src.EmailFieldField != nil {
		return json.Marshal(&src.EmailFieldField)
	}

	if src.FileFieldField != nil {
		return json.Marshal(&src.FileFieldField)
	}

	if src.FormulaFieldField != nil {
		return json.Marshal(&src.FormulaFieldField)
	}

	if src.LastModifiedFieldField != nil {
		return json.Marshal(&src.LastModifiedFieldField)
	}

	if src.LinkRowFieldField != nil {
		return json.Marshal(&src.LinkRowFieldField)
	}

	if src.LongTextFieldField != nil {
		return json.Marshal(&src.LongTextFieldField)
	}

	if src.LookupFieldField != nil {
		return json.Marshal(&src.LookupFieldField)
	}

	if src.MultipleCollaboratorsFieldField != nil {
		return json.Marshal(&src.MultipleCollaboratorsFieldField)
	}

	if src.MultipleSelectFieldField != nil {
		return json.Marshal(&src.MultipleSelectFieldField)
	}

	if src.NumberFieldField != nil {
		return json.Marshal(&src.NumberFieldField)
	}

	if src.PhoneNumberFieldField != nil {
		return json.Marshal(&src.PhoneNumberFieldField)
	}

	if src.RatingFieldField != nil {
		return json.Marshal(&src.RatingFieldField)
	}

	if src.RollupFieldField != nil {
		return json.Marshal(&src.RollupFieldField)
	}

	if src.SingleSelectFieldField != nil {
		return json.Marshal(&src.SingleSelectFieldField)
	}

	if src.TextFieldField != nil {
		return json.Marshal(&src.TextFieldField)
	}

	if src.URLFieldField != nil {
		return json.Marshal(&src.URLFieldField)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FieldField) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BooleanFieldField != nil {
		return obj.BooleanFieldField
	}

	if obj.CountFieldField != nil {
		return obj.CountFieldField
	}

	if obj.CreatedOnFieldField != nil {
		return obj.CreatedOnFieldField
	}

	if obj.DateFieldField != nil {
		return obj.DateFieldField
	}

	if obj.EmailFieldField != nil {
		return obj.EmailFieldField
	}

	if obj.FileFieldField != nil {
		return obj.FileFieldField
	}

	if obj.FormulaFieldField != nil {
		return obj.FormulaFieldField
	}

	if obj.LastModifiedFieldField != nil {
		return obj.LastModifiedFieldField
	}

	if obj.LinkRowFieldField != nil {
		return obj.LinkRowFieldField
	}

	if obj.LongTextFieldField != nil {
		return obj.LongTextFieldField
	}

	if obj.LookupFieldField != nil {
		return obj.LookupFieldField
	}

	if obj.MultipleCollaboratorsFieldField != nil {
		return obj.MultipleCollaboratorsFieldField
	}

	if obj.MultipleSelectFieldField != nil {
		return obj.MultipleSelectFieldField
	}

	if obj.NumberFieldField != nil {
		return obj.NumberFieldField
	}

	if obj.PhoneNumberFieldField != nil {
		return obj.PhoneNumberFieldField
	}

	if obj.RatingFieldField != nil {
		return obj.RatingFieldField
	}

	if obj.RollupFieldField != nil {
		return obj.RollupFieldField
	}

	if obj.SingleSelectFieldField != nil {
		return obj.SingleSelectFieldField
	}

	if obj.TextFieldField != nil {
		return obj.TextFieldField
	}

	if obj.URLFieldField != nil {
		return obj.URLFieldField
	}

	// all schemas are nil
	return nil
}

type NullableFieldField struct {
	value *FieldField
	isSet bool
}

func (v NullableFieldField) Get() *FieldField {
	return v.value
}

func (v *NullableFieldField) Set(val *FieldField) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldField) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldField(val *FieldField) *NullableFieldField {
	return &NullableFieldField{value: val, isSet: true}
}

func (v NullableFieldField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


