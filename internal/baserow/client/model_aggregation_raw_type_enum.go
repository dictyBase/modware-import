/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AggregationRawTypeEnum * `empty_count` - empty_count * `not_empty_count` - not_empty_count * `unique_count` - unique_count * `min` - min * `max` - max * `sum` - sum * `average` - average * `median` - median * `decile` - decile * `variance` - variance * `std_dev` - std_dev
type AggregationRawTypeEnum string

// List of AggregationRawTypeEnum
const (
	EMPTY_COUNT AggregationRawTypeEnum = "empty_count"
	NOT_EMPTY_COUNT AggregationRawTypeEnum = "not_empty_count"
	UNIQUE_COUNT AggregationRawTypeEnum = "unique_count"
	MIN AggregationRawTypeEnum = "min"
	MAX AggregationRawTypeEnum = "max"
	SUM AggregationRawTypeEnum = "sum"
	AVERAGE AggregationRawTypeEnum = "average"
	MEDIAN AggregationRawTypeEnum = "median"
	DECILE AggregationRawTypeEnum = "decile"
	VARIANCE AggregationRawTypeEnum = "variance"
	STD_DEV AggregationRawTypeEnum = "std_dev"
)

// All allowed values of AggregationRawTypeEnum enum
var AllowedAggregationRawTypeEnumEnumValues = []AggregationRawTypeEnum{
	"empty_count",
	"not_empty_count",
	"unique_count",
	"min",
	"max",
	"sum",
	"average",
	"median",
	"decile",
	"variance",
	"std_dev",
}

func (v *AggregationRawTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregationRawTypeEnum(value)
	for _, existing := range AllowedAggregationRawTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregationRawTypeEnum", value)
}

// NewAggregationRawTypeEnumFromValue returns a pointer to a valid AggregationRawTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationRawTypeEnumFromValue(v string) (*AggregationRawTypeEnum, error) {
	ev := AggregationRawTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregationRawTypeEnum: valid values are %v", v, AllowedAggregationRawTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationRawTypeEnum) IsValid() bool {
	for _, existing := range AllowedAggregationRawTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregationRawTypeEnum value
func (v AggregationRawTypeEnum) Ptr() *AggregationRawTypeEnum {
	return &v
}

type NullableAggregationRawTypeEnum struct {
	value *AggregationRawTypeEnum
	isSet bool
}

func (v NullableAggregationRawTypeEnum) Get() *AggregationRawTypeEnum {
	return v.value
}

func (v *NullableAggregationRawTypeEnum) Set(val *AggregationRawTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationRawTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationRawTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationRawTypeEnum(val *AggregationRawTypeEnum) *NullableAggregationRawTypeEnum {
	return &NullableAggregationRawTypeEnum{value: val, isSet: true}
}

func (v NullableAggregationRawTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationRawTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

