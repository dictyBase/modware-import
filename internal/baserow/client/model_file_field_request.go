/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FileFieldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileFieldRequest{}

// FileFieldRequest struct for FileFieldRequest
type FileFieldRequest struct {
	// A visually editable name for the field.
	VisibleName *string `json:"visible_name,omitempty"`
	// Accepts the name of the already uploaded user file.
	Name string `json:"name"`
}

// NewFileFieldRequest instantiates a new FileFieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileFieldRequest(name string) *FileFieldRequest {
	this := FileFieldRequest{}
	this.Name = name
	return &this
}

// NewFileFieldRequestWithDefaults instantiates a new FileFieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileFieldRequestWithDefaults() *FileFieldRequest {
	this := FileFieldRequest{}
	return &this
}

// GetVisibleName returns the VisibleName field value if set, zero value otherwise.
func (o *FileFieldRequest) GetVisibleName() string {
	if o == nil || IsNil(o.VisibleName) {
		var ret string
		return ret
	}
	return *o.VisibleName
}

// GetVisibleNameOk returns a tuple with the VisibleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFieldRequest) GetVisibleNameOk() (*string, bool) {
	if o == nil || IsNil(o.VisibleName) {
		return nil, false
	}
	return o.VisibleName, true
}

// HasVisibleName returns a boolean if a field has been set.
func (o *FileFieldRequest) HasVisibleName() bool {
	if o != nil && !IsNil(o.VisibleName) {
		return true
	}

	return false
}

// SetVisibleName gets a reference to the given string and assigns it to the VisibleName field.
func (o *FileFieldRequest) SetVisibleName(v string) {
	o.VisibleName = &v
}

// GetName returns the Name field value
func (o *FileFieldRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FileFieldRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FileFieldRequest) SetName(v string) {
	o.Name = v
}

func (o FileFieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileFieldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VisibleName) {
		toSerialize["visible_name"] = o.VisibleName
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableFileFieldRequest struct {
	value *FileFieldRequest
	isSet bool
}

func (v NullableFileFieldRequest) Get() *FileFieldRequest {
	return v.value
}

func (v *NullableFileFieldRequest) Set(val *FileFieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFieldRequest(val *FileFieldRequest) *NullableFileFieldRequest {
	return &NullableFileFieldRequest{value: val, isSet: true}
}

func (v NullableFileFieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


