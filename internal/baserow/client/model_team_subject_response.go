/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TeamSubjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamSubjectResponse{}

// TeamSubjectResponse struct for TeamSubjectResponse
type TeamSubjectResponse struct {
	Id int32 `json:"id"`
	// The unique subject ID.
	SubjectId int32 `json:"subject_id"`
	// Returns the TeamSubject's `subject_type` natural key.  :param obj: The TeamSubject record. :return: The subject's content type natural key.
	SubjectType string `json:"subject_type"`
	// The team this subject belongs to.
	Team int32 `json:"team"`
}

// NewTeamSubjectResponse instantiates a new TeamSubjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamSubjectResponse(id int32, subjectId int32, subjectType string, team int32) *TeamSubjectResponse {
	this := TeamSubjectResponse{}
	this.Id = id
	this.SubjectId = subjectId
	this.SubjectType = subjectType
	this.Team = team
	return &this
}

// NewTeamSubjectResponseWithDefaults instantiates a new TeamSubjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamSubjectResponseWithDefaults() *TeamSubjectResponse {
	this := TeamSubjectResponse{}
	return &this
}

// GetId returns the Id field value
func (o *TeamSubjectResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamSubjectResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamSubjectResponse) SetId(v int32) {
	o.Id = v
}

// GetSubjectId returns the SubjectId field value
func (o *TeamSubjectResponse) GetSubjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *TeamSubjectResponse) GetSubjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *TeamSubjectResponse) SetSubjectId(v int32) {
	o.SubjectId = v
}

// GetSubjectType returns the SubjectType field value
func (o *TeamSubjectResponse) GetSubjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *TeamSubjectResponse) GetSubjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *TeamSubjectResponse) SetSubjectType(v string) {
	o.SubjectType = v
}

// GetTeam returns the Team field value
func (o *TeamSubjectResponse) GetTeam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *TeamSubjectResponse) GetTeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *TeamSubjectResponse) SetTeam(v int32) {
	o.Team = v
}

func (o TeamSubjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamSubjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["subject_id"] = o.SubjectId
	// skip: subject_type is readOnly
	toSerialize["team"] = o.Team
	return toSerialize, nil
}

type NullableTeamSubjectResponse struct {
	value *TeamSubjectResponse
	isSet bool
}

func (v NullableTeamSubjectResponse) Get() *TeamSubjectResponse {
	return v.value
}

func (v *NullableTeamSubjectResponse) Set(val *TeamSubjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamSubjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamSubjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamSubjectResponse(val *TeamSubjectResponse) *NullableTeamSubjectResponse {
	return &NullableTeamSubjectResponse{value: val, isSet: true}
}

func (v NullableTeamSubjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamSubjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


