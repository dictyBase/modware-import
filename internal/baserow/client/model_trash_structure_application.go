/*
Baserow API spec

For more information about our REST API, please visit [this page](https://baserow.io/docs/apis%2Frest-api).  For more information about our deprecation policy, please visit [this page](https://baserow.io/docs/apis%2Fdeprecations).

API version: 1.18.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TrashStructureApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrashStructureApplication{}

// TrashStructureApplication struct for TrashStructureApplication
type TrashStructureApplication struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Trashed *bool `json:"trashed,omitempty"`
}

// NewTrashStructureApplication instantiates a new TrashStructureApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrashStructureApplication(id int32, name string) *TrashStructureApplication {
	this := TrashStructureApplication{}
	this.Id = id
	this.Name = name
	return &this
}

// NewTrashStructureApplicationWithDefaults instantiates a new TrashStructureApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashStructureApplicationWithDefaults() *TrashStructureApplication {
	this := TrashStructureApplication{}
	return &this
}

// GetId returns the Id field value
func (o *TrashStructureApplication) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrashStructureApplication) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrashStructureApplication) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TrashStructureApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrashStructureApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrashStructureApplication) SetName(v string) {
	o.Name = v
}

// GetTrashed returns the Trashed field value if set, zero value otherwise.
func (o *TrashStructureApplication) GetTrashed() bool {
	if o == nil || IsNil(o.Trashed) {
		var ret bool
		return ret
	}
	return *o.Trashed
}

// GetTrashedOk returns a tuple with the Trashed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrashStructureApplication) GetTrashedOk() (*bool, bool) {
	if o == nil || IsNil(o.Trashed) {
		return nil, false
	}
	return o.Trashed, true
}

// HasTrashed returns a boolean if a field has been set.
func (o *TrashStructureApplication) HasTrashed() bool {
	if o != nil && !IsNil(o.Trashed) {
		return true
	}

	return false
}

// SetTrashed gets a reference to the given bool and assigns it to the Trashed field.
func (o *TrashStructureApplication) SetTrashed(v bool) {
	o.Trashed = &v
}

func (o TrashStructureApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrashStructureApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	if !IsNil(o.Trashed) {
		toSerialize["trashed"] = o.Trashed
	}
	return toSerialize, nil
}

type NullableTrashStructureApplication struct {
	value *TrashStructureApplication
	isSet bool
}

func (v NullableTrashStructureApplication) Get() *TrashStructureApplication {
	return v.value
}

func (v *NullableTrashStructureApplication) Set(val *TrashStructureApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashStructureApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashStructureApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashStructureApplication(val *TrashStructureApplication) *NullableTrashStructureApplication {
	return &NullableTrashStructureApplication{value: val, isSet: true}
}

func (v NullableTrashStructureApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashStructureApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


